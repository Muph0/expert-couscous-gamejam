{"version":3,"file":"main.js","mappings":"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","sources":["webpack://excalibur-webpack/webpack/runtime/chunk loaded","webpack://excalibur-webpack/./src/actors/items/itemActor.ts","webpack://excalibur-webpack/./src/resources.ts","webpack://excalibur-webpack/./src/actors/items/items.ts","webpack://excalibur-webpack/./src/scenes/scene-scaler.ts","webpack://excalibur-webpack/./src/actors/level-boundary.ts","webpack://excalibur-webpack/./src/scenes/main-scene.ts","webpack://excalibur-webpack/./src/ui/text-label.ts","webpack://excalibur-webpack/./src/scenes/level-intro.ts","webpack://excalibur-webpack/./src/scenes/game-start.ts","webpack://excalibur-webpack/./src/scenes/level-outro.ts","webpack://excalibur-webpack/./src/actors/player.ts","webpack://excalibur-webpack/./src/actors/platform.ts","webpack://excalibur-webpack/./src/actors/contols/hamster-wheel.ts","webpack://excalibur-webpack/./src/actors/customer.ts","webpack://excalibur-webpack/./src/actors/customers-control.ts","webpack://excalibur-webpack/./src/actors/machines/machine.ts","webpack://excalibur-webpack/./src/actors/machines/brewer.ts","webpack://excalibur-webpack/./src/actors/paddle.ts","webpack://excalibur-webpack/./src/actors/machines/grinder.ts","webpack://excalibur-webpack/./src/actors/stations/resource-station.ts","webpack://excalibur-webpack/./src/levels/level.ts","webpack://excalibur-webpack/./src/game.ts","webpack://excalibur-webpack/./src/index.ts","webpack://excalibur-webpack/webpack/bootstrap","webpack://excalibur-webpack/webpack/runtime/define property getters","webpack://excalibur-webpack/webpack/runtime/global","webpack://excalibur-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://excalibur-webpack/webpack/runtime/publicPath","webpack://excalibur-webpack/webpack/runtime/jsonp chunk loading","webpack://excalibur-webpack/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import { Item } from '@/actors/items/items';\nimport { Resources } from '@/resources';\nimport {Actor, CollisionType, Color, Engine, Vector} from 'excalibur';\n\nexport class ItemActor extends Actor {\n    public allocatedToCustomer: boolean = false;\n\n    constructor(readonly item: Item, spawnPos?: Vector) {\n        super({\n            radius: 6,\n            collisionType: CollisionType.Active,\n        });\n        if (spawnPos) {\n            this.pos = spawnPos.clone();\n        }\n\n        this.graphics.use(item.getSprite());\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        this.angularVelocity = this.vel.x / 10;\n\n        this.vel.x *= 0.99;\n    }\n}\n","import { ImageSource, Sprite, SpriteSheet } from 'excalibur';\nimport sword from './images/sword.png';\nimport magor from './images/magor.png';\nimport button from './images/button.png';\nimport veverkaRun from './images/veverka-run.png';\nimport veverkaIdle from './images/veverka-idle.png';\nimport logo from './images/acorn_logo.png';\nimport lever from './images/lever.png';\nimport platformSmall from './images/platform-small.png';\nimport platformMedium from './images/platform-medium.png';\nimport platformWheel from './images/platform-wheel.png';\nimport wheel from './images/wheel.png';\nimport items from './images/items.png';\nimport machines from './images/machines.png';\nimport levelTable from './images/level_table.png';\nimport starGold from './images/star_gold.png';\nimport starGrey from './images/star_grey.png';\nimport bubble from './images/bubble.png';\n\nimport resourceStation from './images/resource-station.png';\n\n/**\n * Default global resource dictionary. This gets loaded immediately\n * and holds available assets for the game.\n */\nconst Resources = new class Resources {\n    public Load = {\n        Sword: new ImageSource(sword),\n        Magor: new ImageSource(magor),\n        VeverkaRun: new ImageSource(veverkaRun),\n        VeverkaIdle: new ImageSource(veverkaIdle),\n        ItemsImg: new ImageSource(items),\n        Logo: new ImageSource(logo),\n        Lever: new ImageSource(lever),\n        PlatformSmall: new ImageSource(platformSmall),\n        PlatformMedium: new ImageSource(platformMedium),\n        PlatformWheel: new ImageSource(platformWheel),\n        ResourceStation: new ImageSource(resourceStation),\n        Wheel: new ImageSource(wheel),\n        Button: new ImageSource(button),\n        Machines: new ImageSource(machines),\n        LevelTable: new ImageSource(levelTable),\n        StarGold: new ImageSource(starGold),\n        StarGrey: new ImageSource(starGrey),\n        Bubble: new ImageSource(bubble),\n    }\n\n    readonly Items = lazy(() =>\n        SpriteSheet.fromImageSource({\n            image: this.Load.ItemsImg,\n            grid: {\n                columns: 8,\n                rows: 8,\n                spriteHeight: 16,\n                spriteWidth: 16,\n            }\n        })\n    );\n\n    readonly Machines = lazy(() =>\n        SpriteSheet.fromImageSource({\n            image: this.Load.Machines,\n            grid: {\n                columns: 8,\n                rows: 5,\n                spriteWidth: 48,\n                spriteHeight: 70,\n            }\n        })\n    );\n}\n\nfunction lazy<T>(provider: () => T): () => T {\n    let storage: T | undefined = undefined;\n    let computed = false;\n    return () => {\n        if (!computed) {\n            storage = provider();\n        }\n        return storage!;\n    }\n}\n\nexport { Resources }\n","import {Resources} from \"@/resources\";\nimport {Sprite} from \"excalibur\";\n\n\nexport interface Drawable {\n    getSprite(): Sprite;\n}\n\nexport interface Item extends Drawable {\n    grind?(): Item;\n    brew?(): Item;\n    roast?(): Item;\n\n    getSprite(): Sprite;\n}\n\nexport class Leaf implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(3, 0); }\n\n    grind(): Item {\n        return new GroundLeaf();\n    }\n}\n\nexport class Acorn implements Item{\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 0); }\n\n    grind(): Item {\n        return new GroundAcorn();\n    }\n    roast(): Item {\n        return new RoastedAcorn();\n    }\n}\n\nexport class GroundAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(1, 0); }\n    brew(): Item {\n        return new Coffee();\n    }\n    roast(): Item {\n        return new RoastedGroundAcorn();\n    }\n}\n\nexport class Coffee implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(2, 0); }\n}\n\nexport class RoastedAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 1); }\n}\n\nexport class RoastedGroundAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 2); }\n}\n\n\nexport class GroundLeaf implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(4, 0); }\n\n    brew(): Item {\n        return new Tea();\n    }\n}\n\nexport class Tea implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(5, 0); }\n}\n","import { ExcaliburGraphicsContext, PreDrawEvent, Scene, vec, Vector } from \"excalibur\";\n\n\n/** Updates the scene camera pos and zoom so that the entire scene is visible */\nexport class SceneScaler {\n\n    private handler: typeof this.onScenePreDraw;\n\n    constructor(\n        readonly sizeInPixels: Vector,\n        readonly scene: Scene,\n    ) {\n        this.handler = this.onScenePreDraw.bind(this);\n        scene.on('predraw', this.handler);\n    }\n\n    deactivate() {\n        this.scene.off('predraw', this.handler);\n    }\n\n    private onScenePreDraw(e: PreDrawEvent): void {\n        this.scene.camera.pos = this.sizeInPixels.scale(1 / 2);\n\n        const zoom = Math.min(\n            window.innerWidth / this.sizeInPixels.x,\n            window.innerHeight / this.sizeInPixels.y);\n\n        this.scene.camera.zoom = zoom;\n        //console.log('ctx: ', e.ctx.width, e.ctx.height, 'window: ', window.innerWidth, window.innerHeight);\n    }\n}\n","import { Action, Actor, CompositeCollider, Shape, vec, Vector } from \"excalibur\";\n\n\nexport interface BoundariesConfig {\n    top?: boolean, down?: boolean, left?: boolean, right?: boolean,\n}\n\nexport class LevelBoundaries extends Actor {\n\n    constructor(private readonly size: Vector, config?: BoundariesConfig) {\n        super();\n\n        const { x: W, y: H } = size;\n        const p = 10;\n        const bounds: any = [];\n\n        if (config?.top ?? true) bounds.push(Shape.Box(W + 2 * p, p, vec(0, 0), vec(0, -p)));\n        if (config?.down ?? true) bounds.push(Shape.Box(W + 2 * p, p, vec(0, 0), vec(0, H + p)));\n        if (config?.top ?? true) bounds.push(Shape.Box(p, H, vec(0, 0), vec(-p, 0)));\n        if (config?.top ?? true) bounds.push(Shape.Box(p, H, vec(0, 0), vec(W + p, 0)));\n\n        this.collider.set(new CompositeCollider(bounds));\n        // TODO set type to FIXED\n    }\n}","import * as ex from 'excalibur';\nimport { ExcaliburGraphicsContext, Label, vec } from 'excalibur';\nimport { ItemActor } from '@/actors/items/itemActor';\nimport { Coffee } from '@/actors/items/items';\nimport { SceneScaler } from \"@/scenes/scene-scaler\";\nimport { Level } from './level-intro';\nimport { Game } from '@/game';\nimport { Paddle } from '@/actors/paddle';\nimport { LevelBoundaries } from '@/actors/level-boundary';\n\nconst LEVEL_TIME: number = 5 * 60 * 1000;\n\nexport interface GameStatistics {\n    customersServed: number\n    customerLongestWait: number\n    pointsMax: number\n    pointsGained: number\n    recipesMade: number\n}\n\nexport class MainScene extends ex.Scene {\n    entityCounter = new Label({ text: '' });\n    timeLabel = new Label({ text: '', pos: vec(10, 10) })\n    timePlayed: number\n\n    private statistics: GameStatistics\n\n    constructor(\n        private game: Game,\n        private level: Level,\n    ) {\n        super();\n        this.timePlayed = 0;\n        this.statistics = {\n            customersServed: 0,\n            customerLongestWait: 0,\n            pointsMax: 0,\n            pointsGained: 0,\n            recipesMade: 0,\n        }\n    }\n\n\n    onInitialize(engine: ex.Engine) {\n        this.add(this.entityCounter);\n        this.add(this.timeLabel);\n\n        this.level.spawnItems(this);\n\n        let mouse = engine.input.pointers.primary;\n        mouse.on('down', e => {\n            console.log('spawn');\n            let acorn = new ItemActor(new Coffee());\n            acorn.pos = mouse.lastWorldPos.clone();\n            this.add(acorn);\n        });\n        this.physics.config.gravity = vec(0, 250);\n\n        new SceneScaler(this.level.size, this);\n\n        this.add(new LevelBoundaries(this.level.size));\n    }\n\n    onPreDraw(ctx: ExcaliburGraphicsContext, delta: number): void {\n        this.entityCounter.text = `Entities: ${this.entities.length}`;\n        this.timeLabel.text = `${Math.floor((LEVEL_TIME - this.timePlayed) / 1000)} s`\n    }\n\n    onPreUpdate(engine: ex.Engine, delta: number): void {\n        this.timePlayed += delta;\n        if (this.timePlayed >= LEVEL_TIME) {\n            this.statistics.pointsMax = 200;\n            this.statistics.pointsGained = 130;\n            this.game.showLevelOutro(this.statistics);\n        }\n\n        if (engine.input.keyboard.wasPressed(ex.Keys.P)) {\n            this.game.showPause();\n        }\n    }\n}\n","import { Actor, Vector, Text, Font, BaseAlign, Color, FontUnit, TextAlign, vec } from \"excalibur\";\n\nexport class TextLabel {\n    static WHITE = new Color(255, 255, 255);\n    static GREY = new Color(46, 46, 46);\n    static ORANGE = new Color(242, 157, 79);\n\n    private _actor: Actor;\n    constructor(\n        x: number,\n        y: number,\n        size: number,\n        message: string,\n        color: Color = TextLabel.GREY,\n        align: TextAlign = TextAlign.Center,\n    ) {\n        const text = new Text({ \n            text: message,\n            font: new Font({\n                textAlign: align,\n                baseAlign: BaseAlign.Bottom,\n                family: 'Pixelify Sans',\n                size,\n                unit: FontUnit.Px,\n                color,\n                smoothing: false,\n            })\n        });\n        text.scale = vec(1,1).scale(0.1);\n        this._actor = new Actor();\n        this._actor.graphics.use(text);\n        this.actor.pos = vec(x + text.width / 2, y)\n    }\n\n    public get actor() {\n        return this._actor;\n    }\n}","import { Drawable, Item } from '@/actors/items/items';\nimport { Actor, Color, Engine, Keys, Scene, SceneActivationContext, vec, Vector } from 'excalibur';\nimport { Game } from '@/game';\nimport { Resources } from '@/resources';\nimport { TextLabel } from '@/ui/text-label';\nimport { SceneScaler } from './scene-scaler';\nimport {ItemActor} from \"@/actors/items/itemActor\";\n\nexport interface Level {\n    maxPoints: number;\n    size: Vector;\n    spawnItems(scene: Scene): void;\n    getNewRecipes(): Recipe[];\n\n    getDesiredItems(): Item[];\n    getItemDistribution(): number[];\n}\n\nexport class Recipe {\n    constructor(\n        public ingredient1: Drawable,\n        public ingredient2: Drawable,\n        public result: Item,\n    ) { }\n\n    public show(scene: Scene, x: number, y: number) {\n        const plus = Resources.Items().getSprite(0, 2);\n        const equals = Resources.Items().getSprite(1, 2);\n\n        const ingr1Act = new Actor({pos: vec(x, y)});\n        ingr1Act.graphics.add(this.ingredient1.getSprite());\n        scene.add(ingr1Act);\n\n        const plusAct = new Actor({pos: vec(x + 1 * 16, y)});\n        plusAct.graphics.add(plus);\n        scene.add(plusAct);\n\n        const ingr2Act = new Actor({pos: vec(x + 2 * 16, y)});\n        ingr2Act.graphics.add(this.ingredient2.getSprite());\n        scene.add(ingr2Act);\n\n        const eqAct = new Actor({pos: vec(x + 3 * 16, y)});\n        eqAct.graphics.add(equals);\n        scene.add(eqAct);\n\n        const resultAct = new ItemActor(this.result, vec(x + 4 * 16, y));\n        resultAct.graphics.add(this.result.getSprite());\n        scene.add(resultAct);\n    }\n}\n\nexport class LevelIntro extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n\n    private hintText: Actor;\n    constructor(\n        private game: Game,\n        private level: Level,\n        private levelId: number,\n        private paused: boolean = false,\n    ) {\n        super();\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n        this.hintText = new Actor;\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const levelTable = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        levelTable.graphics.add(Resources.Load.LevelTable.toSprite());\n        this.add(levelTable);\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\n\n        this.hintText = new TextLabel(this.width / 2, 75, 40, \"Want a little hint?\", TextLabel.WHITE).actor\n        this.add(this.hintText);\n        this.showHint();\n\n        if (this.paused) {\n            this.add(new TextLabel(this.width / 2, this.height / 2 + 50, 70, \"PAUSED\", TextLabel.GREY).actor);\n            this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to continue\", TextLabel.GREY).actor);\n\n        } else {\n            this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\", TextLabel.GREY).actor);\n        }\n    }\n\n    showHint() {\n        const recipes = this.level.getNewRecipes();\n        for (let i = 0; i < recipes.length; i++) {\n            const recipe = recipes[i];\n            recipe.show(this, this.width / 2 - (4 * 16) / 2,(this.height / 2 - 10) + i * 16 + 5);\n        }\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\n            if (this.paused) {\n                this.game.exitPause();\n            } else {\n                this.game.showCurrentLevel();\n            }\n        }\n    }\n\n\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import { Game } from \"@/game\";\nimport { Resources } from \"@/resources\";\nimport { Actor, Color, Engine, Keys, Scene, SceneActivationContext, vec } from \"excalibur\";\nimport { SceneScaler } from \"./scene-scaler\";\nimport { TextLabel } from \"@/ui/text-label\";\n\nexport class GameStart extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n    constructor(\n        private game: Game,\n    ) {\n        super();\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const logo = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        logo.graphics.add(Resources.Load.Logo.toSprite());\n        this.add(logo);\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 20, 56, \"Your forest cafe awaits...\\n Brew, Bake, Delight!\").actor);\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\").actor);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\n            this.game.showLevelIntro();\n        }\n    }\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import { Actor, Color, Engine, Keys, Scene, SceneActivationContext, TextAlign, vec } from \"excalibur\";\nimport { Game } from \"@/game\";\nimport { Resources } from \"@/resources\";\nimport { TextLabel } from \"@/ui/text-label\";\nimport { SceneScaler } from \"./scene-scaler\";\nimport { GameStatistics } from \"./main-scene\";\n\nexport class LevelOutro extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n    starsGained: number\n\n    constructor(\n        private game: Game,\n        private levelId: number,\n        private statistics: GameStatistics,\n    ) {\n        super();\n        const ratio = statistics.pointsGained / statistics.pointsMax;\n        this.starsGained = ratio < 0.33\n            ? 1\n            : (ratio < 0.66 ? 2 : 3);\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const levelTable = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        levelTable.graphics.add(Resources.Load.LevelTable.toSprite());\n        this.add(levelTable);\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\n\n        const resultMessage = this.starsGained == 1 ? \"Good start!\" : (this.starsGained == 2 ? \"Well done!\" : \"Barista Master <3\")\n        this.add(new TextLabel(this.width / 2 + 2, 78, 56, resultMessage, TextLabel.GREY).actor)\n\n        for (let i = 1; i <= 3; i++) {\n            const image = i <= this.starsGained ? Resources.Load.StarGold : Resources.Load.StarGrey;\n            const star = new Actor({x: this.width / 2 + (i - 2) * 25, y: this.height / 2});\n            star.graphics.add(image.toSprite());\n            this.add(star);\n        }\n\n        this.add(new TextLabel(this.width / 2 - 17, 115, 35, `- Points: ${this.statistics.pointsGained}`, TextLabel.WHITE, TextAlign.Left).actor)\n        this.add(new TextLabel(this.width / 2 - 17, 120, 35, `- Customers served: ${this.statistics.customersServed}`, TextLabel.WHITE, TextAlign.Left).actor)\n        this.add(new TextLabel(this.width / 2 - 17, 125, 35, `- Longest wait: ${this.statistics.customerLongestWait} s`, TextLabel.WHITE, TextAlign.Left).actor)\n\n\n        this.add(new TextLabel(this.width / 2, 150, 40, \"Press [T] to TRY AGAIN\", TextLabel.GREY).actor);\n        this.add(new TextLabel(this.width / 2, 160, 40, \"Press [N] to play NEXT LEVEL\", TextLabel.GREY).actor);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.T)) {\n            this.game.showCurrentLevel();\n        }\n        if(engine.input.keyboard.wasPressed(Keys.N)) {\n            this.game.showNextLevel();\n        }\n    }\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import {\n    Actor,\n    BodyComponent,\n    CircleCollider,\n    clamp,\n    Collider, CollisionContact, CollisionGroup,\n    CollisionType,\n    Color,\n    Engine,\n    Keys, Shape,\n    Side,\n    vec\n} from 'excalibur';\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport * as ex from \"excalibur\";\nimport {Resources} from \"@/resources\";\nimport {Platform, SolidPlatform, WheelPlatform} from \"@/actors/platform\";\n\n\nexport class Player extends Actor {\n    GRAVITY = 3000;\n    JUMP_GRAVITY = this.GRAVITY * 0.5\n\n    MAX_VELOCITY = 300\n    ACCELERATION = 700\n    TURN_ACCELERATION = this.ACCELERATION * 4\n\n    AIR_MOVEMENT_PENALITY = 0.75;\n\n    JUMP_FORCE = 430\n\n    isOnWheel = false;\n    public runningDirection = 0;\n\n    isOnGround = false;\n    isPressingDown = false;\n\n    // set by the solid platform\n    public isOnSolidPlatform = false;\n\n    private carryingItem: ItemActor | null = null;\n\n    animations = {\n        run: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [0, 1, 2, 3, 4, 5, 6], 50),\n        flying: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [2, 3], 100),\n        idle: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaIdle,\n                grid: {\n                    columns: 3,\n                    rows: 1,\n                    spriteWidth: 32,\n                    spriteHeight: 32,\n                },\n            }), [0, 1, 2, 1], 200),\n    }\n\n    public constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 1,\n            width: 25,\n            height: 25,\n            color: new Color(255, 255, 255),\n            collisionType: CollisionType.Passive,\n            collider: Shape.Box(32, 32),\n        });\n    }\n\n    onInitialize(engine: ex.Engine) {\n        engine.input.keyboard.on('press', this.onKeyPress.bind(this));\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        const jumpPressed = engine.input.keyboard.wasPressed(Keys.W) || engine.input.keyboard.isHeld(Keys.Up)\n        const jumpHeld = engine.input.keyboard.isHeld(Keys.W) || engine.input.keyboard.isHeld(Keys.Up)\n\n        const heldLeft = engine.input.keyboard.isHeld(Keys.A) || engine.input.keyboard.isHeld(Keys.Left)\n        const heldRight = engine.input.keyboard.isHeld(Keys.D) || engine.input.keyboard.isHeld(Keys.Right)\n\n        let movementDirection = Math.sign(this.vel.x);\n\n        this.isPressingDown = engine.input.keyboard.isHeld(Keys.S) || engine.input.keyboard.isHeld(Keys.Down);\n\n        // move left or right\n        if (heldLeft || heldRight) {\n            let direction = 0;\n\n            if (heldLeft) direction -= 1;\n            if (heldRight) direction += 1;\n\n            // turning the other way is faster\n            let accel = (direction != movementDirection ? this.TURN_ACCELERATION : this.ACCELERATION)\n                * direction;\n\n            // turning in air is slower\n            if (!this.isOnGround) accel *= this.AIR_MOVEMENT_PENALITY;\n\n            this.acc.x = accel;\n\n            this.runningDirection = direction;\n        } else {\n            this.acc.x = 0;\n            this.vel.x *= 0.75;\n\n            this.runningDirection = 0;\n        }\n\n        if (this.runningDirection == -1) {\n            this.graphics.flipHorizontal = true;\n        } else if (this.runningDirection == 1) {\n            this.graphics.flipHorizontal = false;\n        }\n\n        this.vel.x = clamp(this.vel.x, -this.MAX_VELOCITY, this.MAX_VELOCITY)\n\n        // just jumping\n        if (jumpPressed && this.isOnGround) {\n            this.vel.y = -this.JUMP_FORCE;\n            this.isOnGround = false;\n            this.isOnWheel = false;\n        }\n\n        // fall through the platform\n        if (this.isPressingDown && !this.isOnSolidPlatform) {\n            this.isOnGround = false;\n            this.isOnWheel = false;\n        }\n\n        // if space is held and we're going up, apply jump gravity\n        if (jumpHeld && Math.sign(this.vel.y) < 0) {\n            this.acc.y = this.JUMP_GRAVITY\n        } else {\n            this.acc.y = this.GRAVITY\n        }\n\n        // not on the ground always means flying\n        if (!this.isOnGround) {\n            this.graphics.use(this.animations.flying);\n            this.updateItemPosition('back');\n        } else {\n            // when on the ground, we are either running on the wheel\n            if (this.isOnWheel) {\n                if (this.runningDirection == 0) {\n                    this.graphics.use(this.animations.idle);\n                    this.updateItemPosition('hand');\n                }\n                else {\n                    this.graphics.use(this.animations.run);\n                    this.updateItemPosition('back');\n                }\n            }\n\n            // else we're idling\n            else if (Math.abs(this.vel.x) < 50) {\n                this.graphics.use(this.animations.idle);\n                this.updateItemPosition('hand');\n            }\n            else {\n                this.graphics.use(this.animations.run);\n                this.updateItemPosition('back');\n            }\n        }\n\n        // ground cancels all Y movement\n        if (this.isOnGround) {\n            this.acc.y = 0;\n            this.vel.y = 0;\n        }\n\n        if (this.isOnWheel) {\n            this.acc.x = 0;\n            this.vel.x = 0;\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody?.collisionType === CollisionType.Fixed || otherBody?.collisionType === CollisionType.Passive) {\n            // player landed on the ground\n            if ((side === Side.Bottom && !this.isPressingDown && otherBody.owner instanceof Platform) || otherBody.owner instanceof SolidPlatform) {\n                this.isOnGround = true;\n\n                if (otherBody.owner instanceof WheelPlatform) {\n                    this.isOnWheel = true;\n                    this.pos.x = other.center.x;\n                }\n\n                // push out of the platform\n                // minuses because y axis is negative upwards\n                this.pos.y = other.getFurthestPoint(vec(0, -1)).y\n                    - self.bounds.height / 2 + 0.1;\n            }\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        super.onCollisionEnd(self, other, side, lastContact);\n\n        const otherBody = other.owner.get(BodyComponent)\n\n        // Tom is fucking going to jail\n        if (otherBody?.owner instanceof Platform && otherBody.pos.y > this.pos.y) {\n            this.isOnGround = false;\n        }\n    }\n\n    onKeyPress(evt: ex.Input.KeyEvent) {\n        if (evt.key === ex.Input.Keys.Space) {\n            this.dropItem();\n        }\n    }\n\n    isCarryingItem() {\n        return (this.carryingItem != null);\n    }\n\n    pickUpItem(item: ItemActor) {\n        this.carryingItem = item;\n        item.body.collisionType = ex.CollisionType.Passive;\n        this.addChild(this.carryingItem);\n    }\n\n    dropItem() {\n        if (this.carryingItem) {\n            this.removeChild(this.carryingItem)\n\n            this.carryingItem.pos = this.pos.clone().add(this.carryingItem.offset);\n            this.carryingItem.vel = ex.vec(this.vel.x / 5, this.vel.y / 10);\n\n            this.carryingItem.body.collisionType = ex.CollisionType.Active;\n\n            this.carryingItem.offset = vec(0, 0);\n\n            this.scene?.add(this.carryingItem);\n\n            this.carryingItem = null;\n        }\n    }\n\n    private updateItemPosition(position: string) {\n        let facing = this.graphics.flipHorizontal;\n\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset  = Math.sin(frame);\n\n        let handOffset = vec(facing ? -10 : 10, 3 + uglyOffset);\n        let backOffset = vec(facing ? -20 : 20, 2 + uglyOffset);\n\n        if (this.carryingItem != undefined) {\n            this.carryingItem.graphics.flipHorizontal = facing;\n\n            if (position == 'hand') {\n                this.carryingItem.offset = handOffset;\n            }\n            else {\n                this.carryingItem.offset = backOffset;\n            }\n        }\n    }\n}\n","import * as ex from 'excalibur';\nimport {BodyComponent, Collider, CollisionContact, CollisionType, Color, Engine, Side} from 'excalibur';\nimport {Player} from \"@/actors/player\";\nimport {Resources} from \"@/resources\";\n\nexport class Platform extends ex.Actor {\n    constructor(x: number, y: number, width: number, height: number, rotation: number = 0, collisionType: CollisionType = CollisionType.Passive) {\n        super({\n            pos: ex.vec(x, y),\n            width: width,\n            height: height,\n            color: Color.DarkGray,\n            collisionType: collisionType,\n        });\n\n        this.rotation = rotation;\n\n        if (width == 25)\n            this.graphics.use(Resources.Load.PlatformWheel.toSprite());\n        if (width == 30)\n            this.graphics.use(Resources.Load.PlatformSmall.toSprite());\n        else if (width == 60)\n            this.graphics.use(Resources.Load.PlatformMedium.toSprite());\n    }\n}\n\nexport class SolidPlatform extends Platform {\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            otherBody.owner.isOnSolidPlatform = true;\n            otherBody.owner.isOnGround = true;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        // this happened. no idea why\n        if (other.owner == null)\n            return;\n\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            otherBody.owner.isOnSolidPlatform = false;\n        }\n    }\n}\n\nexport class WheelPlatform extends Platform {\n    public isOnPlayform = false;\n    public direction  = 0;\n\n    playerReference?: Player;\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.playerReference && this.playerReference.isOnGround) {\n            this.direction = this.playerReference.runningDirection;\n            this.isOnPlayform = this.playerReference.isOnWheel;\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = undefined;\n            this.direction = 0;\n        }\n    }\n\n}","import * as ex from 'excalibur';\nimport {Engine, vec} from 'excalibur';\nimport { Machine } from '../machines/machine';\nimport { WheelPlatform } from \"@/actors/platform\";\nimport {Resources} from \"@/resources\";\n\nexport class HamsterWheel extends ex.Actor {\n    public linkedMachine: Machine | undefined;\n\n    public wheel: ex.Actor;\n    public platform: WheelPlatform;\n\n    constructor(x: number, y: number, radius: number, linkedMachine?: Machine) {\n        super({ pos: ex.vec(x, y) });\n\n        this.linkedMachine = linkedMachine;\n\n        // Add wheel component\n        this.wheel = new ex.Actor({\n            radius: radius,\n            color: ex.Color.Gray,\n            scale: vec(1.1, 1.1),\n        });\n\n        this.wheel.graphics.use(Resources.Load.Wheel.toSprite())\n\n        const platformWidth = 25;\n        const platformHeight = 10;\n\n        // Add platform component on top of the wheel\n        this.platform = new WheelPlatform(0, radius + platformHeight / 2, platformWidth, platformHeight);\n\n        // Add components as children\n        this.addChild(this.wheel);\n        this.addChild(this.platform);\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.platform.direction != 0 && this.platform.isOnPlayform) {\n            this.wheel.actions.rotateBy(this.platform.direction / 20, 100);\n\n            if (this.linkedMachine != undefined) {\n                this.linkedMachine.remainingProcessingTime = Math.max(this.linkedMachine.remainingProcessingTime - delta / 1000, 0);\n            }\n        }\n    }\n}\n","import * as ex from 'excalibur';\nimport { ItemActor } from './items/itemActor';\nimport {Item} from './items/items';\nimport { Resources } from \"@/resources\";\nimport { clamp, CollisionType, Engine, vec } from 'excalibur';\nimport { Coffee, Tea } from \"@/actors/items/items\";\n\nexport class Customer extends ex.Actor {\n    private static readonly MAX_VELOCITY = 300;\n    private static readonly ACCELERATION = 700;\n    private static readonly PICK_UP_THRESHOLD = 25;\n\n    private animations = {\n        run: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [0, 1, 2, 3, 4, 5, 6], 100),\n        flying: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [2, 3], 100),\n        idle: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaIdle,\n                grid: {\n                    columns: 3,\n                    rows: 1,\n                    spriteWidth: 32,\n                    spriteHeight: 32,\n                },\n            }), [0, 1, 2], 200),\n    };\n\n    private bubble: ex.Actor; // New bubble actor\n    public readonly desiredItem: Item;\n    public satisfied: boolean = false;\n    private assignedItem: ItemActor | null = null;\n    private runningDirection: number | null = null;\n    private runningTarget: number | null = null;\n\n    private carryingItem: ItemActor | null = null;\n\n    constructor(waitingX: number, desiredProductType: Item) {\n        super({\n            pos: ex.vec(waitingX, 0),\n            width: 32,\n            height: 32,\n            color: ex.Color.Yellow,\n            collisionType: ex.CollisionType.Passive,\n        });\n        this.desiredItem = desiredProductType;\n\n        // Initialize the bubble actor\n        this.bubble = new ex.Actor({\n            pos: ex.vec(0, -16), // Position above the customer\n            offset: ex.vec(0, -16), // Position above the customer\n            width: 32,\n            height: 32,\n            collisionType: ex.CollisionType.PreventCollision,\n        });\n\n        this.bubble.graphics.use(Resources.Load.Bubble.toSprite());\n        this.bubble.scale = vec(1, 1)\n\n        let itemActor = new ItemActor(desiredProductType);\n        itemActor.pos = vec(0, -18)\n        itemActor.body.collisionType = CollisionType.PreventCollision;\n        this.bubble.addChild(itemActor)\n\n        // Attach the bubble to the customer as a child actor\n        this.addChild(this.bubble);\n    }\n\n    pickUpItem(item: ItemActor) {\n        this.carryingItem = item;\n        item.body.collisionType = ex.CollisionType.PreventCollision;\n        item.pos = vec(0, 0);\n        item.vel = vec(0, 0);\n        item.angularVelocity = 0;\n\n        item.rotation = 0;\n        this.addChild(this.carryingItem);\n\n        this.bubble.actions.scaleTo(vec(0, 0), vec(5, 10));\n    }\n\n    private updateBubblePosition() {\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset  = Math.sin(frame);\n\n        this.bubble.pos = ex.vec(0, -16 + uglyOffset);\n    }\n\n    private updateItemPosition(position: string) {\n        let facing = this.graphics.flipHorizontal;\n\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset = Math.sin(frame);\n\n        let handOffset = vec(facing ? -10 : 10, 3 + uglyOffset);\n        let backOffset = vec(facing ? -20 : 20, 2 + uglyOffset);\n\n        if (this.carryingItem != undefined) {\n            this.carryingItem.graphics.flipHorizontal = facing;\n\n            if (position == 'hand') {\n                this.carryingItem.offset = handOffset;\n            }\n            else {\n                this.carryingItem.offset = backOffset;\n            }\n        }\n    }\n\n    onInitialize(engine: ex.Engine) {\n        this.pos = ex.vec(this.pos.x, engine.drawHeight - this.height / 2);\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.runningTarget !== null) {\n            this.runningDirection = Math.sign(this.runningTarget - this.pos.x);\n\n            if (Math.abs(this.runningTarget - this.pos.x) < Customer.PICK_UP_THRESHOLD) {\n                this.runningTarget = null;\n\n                if (this.assignedItem) {\n                    this.satisfied = true;\n                    this.pickUpItem(this.assignedItem)\n                    this.goTo(10000)\n                }\n            }\n        } else {\n            if (!this.satisfied) {\n                this.runningDirection = null;\n            }\n        }\n\n        if (this.satisfied && this.pos.x > engine.drawWidth + this.width) {\n            console.log(\"Killing customer\")\n            this.kill();\n        }\n\n        if (this.runningDirection !== null) {\n            this.acc.x = Customer.ACCELERATION * this.runningDirection;\n        } else {\n            this.acc.x = 0;\n            this.vel.x *= 0.75;\n        }\n\n        if (this.runningDirection == -1) {\n            this.graphics.flipHorizontal = true;\n            this.graphics.use(this.animations.run);\n            this.updateItemPosition('back');\n        } else if (this.runningDirection == 1) {\n            this.graphics.flipHorizontal = false;\n            this.graphics.use(this.animations.run);\n            this.updateItemPosition('back');\n        } else {\n            this.graphics.use(this.animations.idle);\n            this.updateItemPosition('hand');\n        }\n        this.vel.x = clamp(this.vel.x, -Customer.MAX_VELOCITY, Customer.MAX_VELOCITY)\n\n        this.updateBubblePosition()\n    }\n\n    goFetchItem(item: ItemActor) {\n        this.runningTarget = item.pos.x;\n        this.assignedItem = item;\n        item.allocatedToCustomer = true;\n    }\n\n    goTo(xPosition: number) {\n        this.runningTarget = xPosition;\n    }\n\n    productAssigned(): boolean {\n        return this.assignedItem != null;\n    }\n}\n","import {Engine, Shape, vec, Actor, Color, CollisionType, Collider, Side, CollisionContact} from \"excalibur\";\nimport {Customer} from \"@/actors/customer\";\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport {Recipe} from \"@/scenes/level-intro\";\nimport {Item} from \"@/actors/items/items\";\n\nexport class CustomerControl extends Actor {\n    private static readonly HEIGHT = 100;\n    private static readonly MIN_TIMEOUT = 1000;\n    private static readonly MAX_TIMEOUT = 3000;\n    private static readonly MAX_WAITING_CUSTOMERS = 2;\n    private static readonly ITEM_TIMEOUT = 5000;\n    private static readonly CUSTOMER_OFFSET = 40;\n\n    private customers: Customer[] = [];\n    private pendingProducts: ItemActor[] = [];\n\n    private desiredItems: Item[];\n    private itemDistribution: number[];\n\n    constructor(x: number, y: number, width: number, desiredItems: Item[], itemDistribution: number[], height: number = 80) {\n        super({\n            pos: vec(x, y),\n            height: height,\n            width: width,\n            color: Color.Transparent,\n            collisionType: CollisionType.Passive,\n        });\n\n        this.desiredItems = desiredItems;\n        this.itemDistribution = itemDistribution;\n    }\n\n    sampleItem() {\n        const cumulativeWeights: number[] = [];\n        this.itemDistribution.reduce((acc, weight, i) => {\n            cumulativeWeights[i] = acc + weight;\n            return cumulativeWeights[i];\n        }, 0);\n\n        const random = Math.random() * cumulativeWeights[cumulativeWeights.length - 1];\n\n        return this.desiredItems[cumulativeWeights.findIndex(cumulativeWeight => random < cumulativeWeight)];\n    }\n\n    onInitialize(engine: Engine) {\n        this.scheduleCustomersRefresh(engine);\n    }\n\n    private scheduleCustomersRefresh(engine: Engine) {\n        const timeout = Math.random() * (CustomerControl.MAX_TIMEOUT - CustomerControl.MIN_TIMEOUT) + CustomerControl.MIN_TIMEOUT;\n        const scene = this.scene;\n        if (scene === null)\n            return;\n        setTimeout(() => {\n            this.customers = this.customers.filter(c => !c.isKilled());\n            let waitingCustomers = this.customers.filter(c => !c.productAssigned());\n            if (waitingCustomers.length < CustomerControl.MAX_WAITING_CUSTOMERS) {\n                console.log(\"Adding customer.\")\n\n                const product = this.sampleItem()\n                const waitingX = this.width + CustomerControl.CUSTOMER_OFFSET;\n                const customer = new Customer(waitingX, product);\n\n                this.customers.push(customer);\n                waitingCustomers = this.customers.filter(c => !c.productAssigned());\n\n                for (let i = 0; i < waitingCustomers.length; i++) {\n                    waitingCustomers[i].goTo(this.width - CustomerControl.CUSTOMER_OFFSET * (waitingCustomers.length - i));\n                }\n\n                scene.add(customer);\n\n                if (this.pendingProducts.length > 0) {\n                    customer.goFetchItem(this.pendingProducts.pop()!);\n                }\n            }\n\n            this.scheduleCustomersRefresh(engine);\n        }, timeout);\n    }\n\n    onCollisionStart(self: Collider, other: Collider, side: Side, contact: CollisionContact) {\n        const itemActor = other.owner;\n        if (!(itemActor instanceof ItemActor)) return;\n        if (itemActor.allocatedToCustomer) return;\n\n        let item = itemActor.item;\n\n        const customer = this.customers.find(c =>\n            !c.satisfied && !c.productAssigned() && Object.getPrototypeOf(c.desiredItem) == Object.getPrototypeOf(item)\n        );\n\n        if (customer) {\n            customer.goFetchItem(itemActor);\n        } else {\n            // Add item to pendingProducts\n            this.pendingProducts.push(itemActor);\n\n            console.log(itemActor)\n\n            // Set a timeout to remove the item if it’s not assigned to a customer\n            setTimeout(() => {\n                // Check if item is still in pendingProducts and not assigned\n                if (this.pendingProducts.includes(itemActor) && !itemActor.allocatedToCustomer) {\n                    // Remove from pendingProducts\n                    this.pendingProducts = this.pendingProducts.filter(p => p !== itemActor);\n\n                    itemActor.actions.fade(0, 1000).callMethod(() => {\n                    });\n                }\n            }, CustomerControl.ITEM_TIMEOUT);\n        }\n    }\n}","import { ItemActor } from '../items/itemActor';\nimport { Drawable, Item } from '@/actors/items/items';\nimport {\n    Actor,\n    ActorArgs, BaseAlign,\n    Collider,\n    CollisionContact,\n    CollisionType,\n    Color,\n    Engine, Font, FontUnit,\n    Label,\n    Side, Sprite, TextAlign, vec,\n    Vector\n} from 'excalibur';\n\nexport abstract class Machine extends Actor implements Drawable {\n    public isOn: boolean = true;\n\n    intakeActor: Actor;\n\n    private itemQueue: Array<ItemActor> = [];\n    private blacklistedItemQueue: Array<ItemActor> = [];\n\n    private isProcessing: boolean = false;\n    private manual: boolean;\n\n    public remainingProcessingTime = 0;\n    public maxProcessingTime = 1.5;\n\n    private tooltip: Label;\n\n    constructor(config?: ActorArgs, manual: boolean = false) {\n        super({\n            color: Color.Gray,\n            collisionType: CollisionType.Fixed,\n            ...config,\n        });\n\n        this.manual = manual;\n\n        // Create tooltip (initially hidden)\n        this.tooltip = new Label({\n            text: '',\n            pos: vec(0, -20), // Position the label above the station\n            font: new Font({\n                textAlign: TextAlign.Center,\n                baseAlign: BaseAlign.Middle,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n                family: 'Silkscreen',\n                size: 15,\n                unit: FontUnit.Px,\n                color: Color.White\n            })\n        });\n\n        this.tooltip.z = 1000;\n\n        let [intakeStart, intakeEnd] = this.getIntake();\n        this.intakeActor = new Actor({\n            pos: intakeStart.add(intakeEnd).scale(1 / 2),\n            width: intakeEnd.x - intakeStart.x,\n            height: intakeEnd.y - intakeStart.y,\n            collisionType: CollisionType.Fixed,\n            color: Color.Transparent,\n        });\n        this.intakeActor.on('collisionstart', e => {\n            if (this.isOn && e.other instanceof ItemActor) {\n                const itemActor = e.other as ItemActor;\n\n                if (!this.itemQueue.includes(itemActor) && !this.blacklistedItemQueue.includes(itemActor)) {\n                    this.itemQueue.push(itemActor);\n                }\n            }\n        });\n\n        this.addChild(this.intakeActor);\n        this.addChild(this.tooltip);\n    }\n\n    abstract getSprite(): Sprite;\n\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (!this.isProcessing) {\n            if (this.itemQueue.length != 0) {\n                this.isProcessing = true;\n                this.remainingProcessingTime = this.maxProcessingTime;\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\n\n            }\n        } else {\n            if (this.remainingProcessingTime <= 0) {\n                const itemActor = this.itemQueue.shift()!;\n\n                itemActor.kill();\n                this.isProcessing = false;\n\n                this.remainingProcessingTime = 0;\n                this.tooltip.text = '';\n\n                const newItem = this.processItem(itemActor.item);\n\n                if (newItem) {\n                    const newActor = new ItemActor(newItem);\n                    newActor.pos = this.getOutlet().add(this.pos);\n                    this.blacklistedItemQueue.push(newActor);\n                    this.scene?.add(newActor);\n                }\n            } else {\n                if (!this.manual) {\n                    this.remainingProcessingTime = Math.max(this.remainingProcessingTime - delta / 1000, 0);\n                }\n\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\n            }\n        }\n    }\n\n    /** Position of intake [start, end] in relative coordinates */\n    protected abstract getIntake(): [Vector, Vector];\n\n    /** Position of the outlet */\n    protected abstract getOutlet(): Vector;\n\n    protected abstract processItem(item: Item): Item | null;\n}\n","import { Item } from '@/actors/items/items';\nimport { Machine } from './machine';\nimport { CompositeCollider, Rectangle, Resource, Shape, Sprite, vec, Vector } from 'excalibur';\nimport { Resources } from '@/resources';\nimport { Paddle } from '../paddle';\n\nexport class Brewer extends Machine {\n    getSprite(): Sprite {\n        const sprite = Resources.Machines().getSprite(2, 0)\n        sprite.scale = vec(0.22, 0.22);\n        return sprite;\n    }\n    constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 1,\n        });\n        this.graphics.use(Resources.Machines().getSprite(2, 0));\n\n        this.collider.set(new CompositeCollider([\n            Shape.Box(45, 16, undefined, vec(0, -6)),\n            // in tile coordinates\n            Shape.Polygon([vec(10, 1), vec(14, 21), vec(15, 21), vec(11, 0)], vec(-24, -35)),\n            Shape.Polygon([vec(43, 1), vec(42, 0), vec(39, 21), vec(40, 21)], vec(-24, -35)),\n        ]));\n    }\n\n    processItem(item: Item): Item | null {\n        return item.brew ? item.brew() : null;\n    }\n\n    protected getIntake(): [Vector, Vector] {\n        return [\n            vec(-8, -16),\n            vec(8, -4),\n        ];\n    }\n    protected getOutlet(): Vector {\n        return vec(0, 10);\n    }\n}\n","import { Actor, CollisionType, Color, vec, Vector } from \"excalibur\";\n\n\n/** Small box collider with rotation used for details of machine colliders */\nexport class Paddle extends Actor {\n\n    constructor(pos: Vector, size: Vector, degrees: number = 0) {\n        super({\n            pos,\n            rotation: degrees / 180 * Math.PI,\n            width: size.x,\n            height: size.y,\n            collisionType: CollisionType.Fixed,\n        })\n    }\n}","import { Machine } from './machine';\nimport { ItemActor } from '../items/itemActor';\nimport { Item } from '@/actors/items/items';\nimport { Actor, CircleCollider, Color, CompositeCollider, EdgeCollider, Engine, Sprite, vec, Vector } from 'excalibur';\nimport { Resources } from '@/resources';\nimport { Paddle } from '../paddle';\n\n\nexport class Grinder extends Machine {\n    getSprite(): Sprite {\n        const sprite = Resources.Machines().getSprite(0, 0)\n        sprite.scale = vec(0.22, 0.22);\n        return sprite;\n    }\n\n    crank: Actor;\n\n    constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 1,\n        }, true);\n\n        this.graphics.add(Resources.Machines().getSprite(0, 0));\n        this.collider.set(new CircleCollider({ radius: 16, offset: vec(0, 6) }));\n\n        this.crank = new Actor({\n            pos: vec(0.5, 5),\n            z: this.z + 1,\n        });\n        const crankSprite = Resources.Machines().getSprite(1, 0)\n        this.crank.graphics.add(crankSprite);\n        this.addChild(this.crank);\n\n        this.addChild(new Paddle(vec(-11, -18), vec(27, 2), 75));\n        this.addChild(new Paddle(vec(12, -18), vec(27, 2), -75));\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        super.onPostUpdate(engine, delta);\n\n        if (this.isOn) {\n            this.crank.rotation = -(this.remainingProcessingTime / this.maxProcessingTime)  * Math.PI * 2;\n        }\n    }\n\n    protected processItem(item: Item): Item | null {\n        return item.grind ? item.grind() : null;\n    }\n    protected getIntake(): [Vector, Vector] {\n        return [\n            vec(-5, -10),\n            vec(5, -5)\n        ];\n    }\n    protected getOutlet(): Vector {\n        return vec(.5, 10);\n    }\n}\n","import {\n    Actor,\n    BaseAlign,\n    BodyComponent,\n    Collider,\n    CollisionContact,\n    CollisionType,\n    Color,\n    Engine,\n    Font,\n    FontUnit,\n    Keys,\n    Label,\n    Side,\n    TextAlign,\n    vec\n} from 'excalibur';\nimport {Player} from \"@/actors/player\";\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport {Item} from \"@/actors/items/items\";\nimport {Resources} from \"@/resources\";\n\nclass ResourceStation extends Actor {\n    private tooltip: Label;\n    private cooldownTimer = 0;\n    private isOnCooldown = false;\n\n    playerReference?: Player;\n    item: Item;\n\n    COOLDOWN = 3;\n\n    constructor(x: number, y: number, size: number, item: Item) {\n        super({\n            x: x,\n            y: y,\n            width: size,\n            height: size,\n            color: Color.Gray,\n            collisionType: CollisionType.Passive,\n        });\n\n        this.item = item;\n\n        // Create tooltip (initially hidden)\n        this.tooltip = new Label({\n            text: 'Space',\n            pos: vec(0, -size / 2 - 6), // Position the label above the station\n            font: new Font({\n                textAlign: TextAlign.Center,\n                baseAlign: BaseAlign.Bottom,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n                family: 'Silkscreen',\n                size: 15,\n                unit: FontUnit.Px,\n                color: Color.White\n            })\n        });\n\n        this.tooltip.scale = vec(0, 0);\n\n        let itemActor = new ItemActor(item);\n        itemActor.body.collisionType = CollisionType.PreventCollision;\n\n        this.addChild(this.tooltip); // Attach tooltip to the ResourceStation\n        this.addChild(itemActor)\n\n        itemActor.scale = vec(0.8, 0.8)\n\n        this.graphics.use(Resources.Load.ResourceStation.toSprite())\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        const fPressed = engine.input.keyboard.wasPressed(Keys.Space);\n\n        // Cooldown logic\n        if (this.isOnCooldown) {\n            // Decrease the cooldown timer by the delta time\n            this.cooldownTimer -= delta / 1000; // Convert ms to seconds\n            if (this.cooldownTimer <= 0) {\n                this.isOnCooldown = false;\n                this.tooltip.text = 'Space'; // Reset tooltip text when cooldown ends\n            } else {\n                // Update tooltip text with remaining time\n                this.tooltip.text = `${this.cooldownTimer.toFixed(1)}`;\n                this.tooltip.graphics.opacity = 0.5;\n            }\n        } else if (this.playerReference) {\n            if (!this.playerReference.isCarryingItem()) {\n                this.tooltip.graphics.opacity = 1;\n            } else {\n                this.tooltip.graphics.opacity = 0.5;\n            }\n\n            // Allow item pickup only if not on cooldown\n            if (fPressed && !this.playerReference.isCarryingItem() && !this.isOnCooldown) {\n                this.playerReference.pickUpItem(new ItemActor(this.item));\n\n                // Start the cooldown\n                this.isOnCooldown = true;\n                this.cooldownTimer = this.COOLDOWN;\n                this.tooltip.text = `${this.COOLDOWN.toFixed(1)}`; // Display initial cooldown time\n\n                this.actions.delay(this.COOLDOWN * 1000).callMethod(() => {\n                    // hide\n                    if (this.playerReference == undefined) {\n                        this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20)).callMethod(() => {this.tooltip.text = `Space`});\n                        ;\n                    }\n                })\n\n            }\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent);\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n            this.tooltip.actions.scaleTo(vec(1, 1), vec(10, 20));\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent);\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = undefined;\n\n            // only hide if it's not on cooldown, otherwise we hide when it comes out of cooldown\n            if (!this.isOnCooldown) {\n                this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20));\n            }\n        }\n    }\n}\n\nexport default ResourceStation;\n","import { AutomaticSquirrel } from \"@/actors/automatic-squirrel\";\nimport { HamsterWheel } from \"@/actors/contols/hamster-wheel\";\nimport { Lever } from \"@/actors/contols/lever\";\nimport { CustomerControl } from \"@/actors/customers-control\";\nimport { ItemActor } from \"@/actors/items/itemActor\";\nimport {Acorn, Coffee, GroundAcorn, Item, Leaf, Tea} from \"@/actors/items/items\";\nimport { Brewer } from \"@/actors/machines/brewer\";\nimport { Grinder } from \"@/actors/machines/grinder\";\nimport { Platform, SolidPlatform } from \"@/actors/platform\";\nimport { Player } from \"@/actors/player\";\nimport ResourceStation from \"@/actors/stations/resource-station\";\nimport { Level, Recipe } from \"@/scenes/level-intro\";\nimport { CollisionType, Scene, vec, Vector } from \"excalibur\";\n\n\n\nexport class Level1 implements Level {\n    readonly maxPoints: number = 100 // determined by playing\n    readonly size = Object.freeze(vec(400, 400)) as Vector;\n\n    getDesiredItems = (): Item[] => [new Tea(), new Coffee()];\n    getItemDistribution = (): number[] => [0.5, 0.5];\n\n    getNewRecipes(): Recipe[] {\n        // throw new Error(\"Method not implemented.\");\n        return [\n            new Recipe(new Acorn(), new Grinder(0, 0), new GroundAcorn()),\n            new Recipe(new GroundAcorn(), new Brewer(0, 0), new Coffee()),\n        ];\n    }\n\n    spawnItems(scene: Scene): void {\n        let { x: W, y: H } = this.size;\n\n        ([\n            new SolidPlatform(W / 2, 200, W, 20), // the main solid platform\n            new SolidPlatform(W / 2, H, W, 20, 0, CollisionType.Fixed), // the bottom\n\n            // resource station platforms\n            new Platform(210, 150, 60, 10),\n            new Platform(320, 150, 60, 10),\n\n            // brewer platform\n            new Platform(this.size.x / 2 + 5, 310, 30, 10, -Math.PI / 5, CollisionType.Fixed),\n\n\n        ]).forEach(platform => scene.add(platform));\n\n        ([\n            new ResourceStation(210, 150 - 15 - 5, 30, new Acorn()),\n            new ResourceStation(320, 150 - 15 - 5, 30, new Leaf()),\n        ]).forEach(station => scene.add(station));\n\n        // Create player-controlled squirrel\n        const player = new Player(this.size.x / 2, 180);\n        scene.add(player);\n\n        // // Create machines\n        const grinder = new Grinder(this.size.x / 2, 260);\n        scene.add(grinder);\n\n        const brewer = new Brewer(this.size.x / 2 - 30, 360);\n        scene.add(brewer);\n\n        const wheel = new HamsterWheel(90, 110, 50, grinder);\n        scene.add(wheel)\n\n        // TODO: Position the machines properly\n\n        const customerControl = new CustomerControl(this.size.x / 2, this.size.y, this.size.x, this.getDesiredItems(), this.getItemDistribution());\n        scene.add(customerControl);\n    }\n}\n\nexport const LEVELS: Level[] = [\n    new Level1(),\n];\n","import { Engine, Loader, DisplayMode, Keys, Scene, CollisionType, Color, Actor } from 'excalibur';\nimport { GameStatistics, MainScene } from './scenes/main-scene';\nimport { Resources } from './resources';\nimport { Level, LevelIntro } from './scenes/level-intro';\nimport { GameStart } from './scenes/game-start';\nimport { LevelOutro } from './scenes/level-outro';\nimport { LEVELS } from './levels/level';\n\nconst enum Scenes {\n    Idle = 'idle',\n    Start = 'start',\n    Intro = 'intro',\n    Outro = 'outro',\n    Main = 'main',\n    Pause = 'pause',\n}\n\n/**\n * Managed game class\n */\nexport class Game extends Engine {\n    private mainScene!: MainScene;\n    private curLevelId: number = 0\n    private isShowDebug = false;\n\n    constructor() {\n        super({\n            displayMode: DisplayMode.FillScreen,\n            antialiasing: false,\n        });\n\n        this.debug.collider.boundsColor = Color.Red;\n        this.debug.collider.showAll = true;\n    }\n\n    public start() {\n        // Automatically load all default resources\n        this.debug.collider.showBounds = true;\n        const loader = new Loader(Object.values(Resources.Load));\n\n        return super.start(loader);\n    }\n\n    restart(): void {\n        this.goToScene(Scenes.Idle).then(() => {\n            this.removeScene(this.mainScene);\n            this.showCurrentLevel();\n        });\n    }\n\n    onStart(): void {\n        this.addScene(Scenes.Start, new GameStart(this));\n        this.goToScene(Scenes.Start);\n    }\n\n    public showLevelIntro(): void {\n        this.addScene(Scenes.Intro, new LevelIntro(this, LEVELS[this.curLevelId], this.curLevelId));\n        this.goToScene(Scenes.Intro);\n    }\n\n    public showLevelOutro(statics: GameStatistics) {\n        this.addScene(Scenes.Outro, new LevelOutro(this, this.curLevelId, statics));\n        this.goToScene(Scenes.Outro);\n    }\n\n    public showNextLevel(): void {\n        this.curLevelId++;\n        if (this.curLevelId >= LEVELS.length) {\n            this.restart()\n            // TODO: add and screen or restart\n        } else {\n            this.showCurrentLevel();\n        }\n    }\n\n    public showCurrentLevel(): void {\n        this.addScene(Scenes.Main, new MainScene(this, LEVELS[this.curLevelId]));\n        this.goToScene(Scenes.Main);\n    }\n\n    public showPause(): void {\n        this.addScene(Scenes.Pause, new LevelIntro(this, LEVELS[this.curLevelId], this.curLevelId, true))\n        this.goToScene(Scenes.Pause);\n    }\n\n    public exitPause(): void {\n        this.goToScene(Scenes.Main);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.R)) {\n            this.restart();\n        }\n        if (engine.input.keyboard.wasPressed(Keys.F4)) {\n            this.isShowDebug = !this.isShowDebug;\n            this.showDebug(this.isShowDebug);\n        }\n    }\n}\n","import {Game} from \"./game\";\n\nconst game = new Game();\ngame.start().then(() => {\n  game.onStart();\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkexcalibur_webpack\"] = self[\"webpackChunkexcalibur_webpack\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [128], () => (__webpack_require__(957)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","ItemActor","constructor","item","spawnPos","super","radius","collisionType","Active","allocatedToCustomer","this","pos","clone","graphics","use","getSprite","onPostUpdate","engine","delta","angularVelocity","vel","x","Resources","Load","Sword","Magor","VeverkaRun","VeverkaIdle","ItemsImg","Logo","Lever","PlatformSmall","PlatformMedium","PlatformWheel","ResourceStation","Wheel","Button","Machines","LevelTable","StarGold","StarGrey","Bubble","Items","lazy","fromImageSource","image","grid","columns","rows","spriteHeight","spriteWidth","provider","storage","Leaf","grind","GroundLeaf","Acorn","GroundAcorn","roast","RoastedAcorn","brew","Coffee","RoastedGroundAcorn","Tea","SceneScaler","sizeInPixels","scene","handler","onScenePreDraw","bind","on","deactivate","off","e","camera","scale","zoom","Math","min","window","innerWidth","innerHeight","y","LevelBoundaries","size","config","W","H","p","bounds","top","push","Box","down","collider","set","LEVEL_TIME","MainScene","game","level","entityCounter","text","timeLabel","timePlayed","statistics","customersServed","customerLongestWait","pointsMax","pointsGained","recipesMade","onInitialize","add","spawnItems","mouse","input","pointers","primary","console","log","acorn","lastWorldPos","physics","gravity","onPreDraw","ctx","entities","length","floor","onPreUpdate","showLevelOutro","keyboard","wasPressed","P","showPause","TextLabel","message","color","GREY","align","Center","font","textAlign","baseAlign","Bottom","family","unit","Px","smoothing","_actor","actor","width","WHITE","ORANGE","Recipe","ingredient1","ingredient2","result","show","plus","equals","ingr1Act","plusAct","ingr2Act","eqAct","resultAct","LevelIntro","levelId","paused","height","scaler","hintText","backgroundColor","levelTable","toSprite","showHint","recipes","getNewRecipes","i","Space","exitPause","showCurrentLevel","onDeactivate","context","GameStart","logo","showLevelIntro","LevelOutro","ratio","starsGained","resultMessage","star","Left","T","N","showNextLevel","Player","z","Passive","GRAVITY","JUMP_GRAVITY","MAX_VELOCITY","ACCELERATION","TURN_ACCELERATION","AIR_MOVEMENT_PENALITY","JUMP_FORCE","isOnWheel","runningDirection","isOnGround","isPressingDown","isOnSolidPlatform","carryingItem","animations","run","fromSpriteSheet","flying","idle","onKeyPress","jumpPressed","isHeld","Up","jumpHeld","heldLeft","A","heldRight","D","Right","movementDirection","sign","S","Down","direction","accel","acc","flipHorizontal","updateItemPosition","abs","onCollisionStart","self","other","side","contact","otherBody","owner","get","Fixed","Platform","SolidPlatform","WheelPlatform","center","getFurthestPoint","onCollisionEnd","lastContact","evt","key","Keys","dropItem","isCarryingItem","pickUpItem","body","addChild","removeChild","offset","position","facing","frame","current","_currentFrame","uglyOffset","sin","handOffset","backOffset","undefined","rotation","DarkGray","isOnPlayform","playerReference","HamsterWheel","linkedMachine","wheel","Gray","platform","platformHeight","actions","rotateBy","remainingProcessingTime","max","Customer","waitingX","desiredProductType","Yellow","satisfied","assignedItem","runningTarget","desiredItem","bubble","PreventCollision","itemActor","scaleTo","updateBubblePosition","drawHeight","PICK_UP_THRESHOLD","goTo","drawWidth","kill","goFetchItem","xPosition","productAssigned","CustomerControl","desiredItems","itemDistribution","Transparent","customers","pendingProducts","sampleItem","cumulativeWeights","reduce","weight","random","findIndex","cumulativeWeight","scheduleCustomersRefresh","timeout","MAX_TIMEOUT","MIN_TIMEOUT","setTimeout","filter","c","isKilled","waitingCustomers","MAX_WAITING_CUSTOMERS","product","CUSTOMER_OFFSET","customer","pop","find","Object","getPrototypeOf","includes","fade","callMethod","ITEM_TIMEOUT","HEIGHT","Machine","manual","isOn","itemQueue","blacklistedItemQueue","isProcessing","maxProcessingTime","tooltip","Middle","shadow","blur","Black","White","intakeStart","intakeEnd","getIntake","intakeActor","shift","newItem","processItem","newActor","getOutlet","toFixed","Brewer","sprite","Polygon","Paddle","degrees","PI","Grinder","crank","crankSprite","cooldownTimer","isOnCooldown","COOLDOWN","fPressed","opacity","delay","LEVELS","maxPoints","freeze","getDesiredItems","getItemDistribution","forEach","station","player","grinder","brewer","customerControl","Game","displayMode","FillScreen","antialiasing","curLevelId","isShowDebug","debug","boundsColor","Red","showAll","start","showBounds","loader","values","restart","goToScene","then","removeScene","mainScene","onStart","addScene","statics","R","F4","showDebug","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","d","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","Error","replace","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}