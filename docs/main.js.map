{"version":3,"file":"main.js","mappings":"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","sources":["webpack://excalibur-webpack/webpack/runtime/chunk loaded","webpack://excalibur-webpack/./src/actors/items/itemActor.ts","webpack://excalibur-webpack/./src/resources.ts","webpack://excalibur-webpack/./src/actors/items/items.ts","webpack://excalibur-webpack/./src/scenes/scene-scaler.ts","webpack://excalibur-webpack/./src/scenes/main-scene.ts","webpack://excalibur-webpack/./src/ui/text-label.ts","webpack://excalibur-webpack/./src/scenes/level-intro.ts","webpack://excalibur-webpack/./src/scenes/game-start.ts","webpack://excalibur-webpack/./src/scenes/level-outro.ts","webpack://excalibur-webpack/./src/actors/automatic-squirrel.ts","webpack://excalibur-webpack/./src/actors/player.ts","webpack://excalibur-webpack/./src/actors/platform.ts","webpack://excalibur-webpack/./src/actors/contols/hamster-wheel.ts","webpack://excalibur-webpack/./src/actors/contols/lever.ts","webpack://excalibur-webpack/./src/actors/customer.ts","webpack://excalibur-webpack/./src/actors/customers-control.ts","webpack://excalibur-webpack/./src/actors/machines/machine.ts","webpack://excalibur-webpack/./src/actors/machines/brewer.ts","webpack://excalibur-webpack/./src/actors/paddle.ts","webpack://excalibur-webpack/./src/actors/machines/grinder.ts","webpack://excalibur-webpack/./src/actors/stations/resource-station.ts","webpack://excalibur-webpack/./src/levels/level.ts","webpack://excalibur-webpack/./src/game.ts","webpack://excalibur-webpack/./src/index.ts","webpack://excalibur-webpack/webpack/bootstrap","webpack://excalibur-webpack/webpack/runtime/define property getters","webpack://excalibur-webpack/webpack/runtime/global","webpack://excalibur-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://excalibur-webpack/webpack/runtime/publicPath","webpack://excalibur-webpack/webpack/runtime/jsonp chunk loading","webpack://excalibur-webpack/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import { Item } from '@/actors/items/items';\nimport { Resources } from '@/resources';\nimport {Actor, CollisionType, Color, Engine, Vector} from 'excalibur';\n\nexport class ItemActor extends Actor {\n    public allocatedToCustomer: boolean = false;\n\n    constructor(readonly item: Item, spawnPos?: Vector) {\n        super({\n            radius: 6,\n            collisionType: CollisionType.Active,\n        });\n        if (spawnPos) {\n            this.pos = spawnPos.clone();\n        }\n\n        this.graphics.use(item.getSprite());\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        this.angularVelocity = this.vel.x / 10;\n    }\n}\n","import { ImageSource, Sprite, SpriteSheet } from 'excalibur';\nimport sword from './images/sword.png';\nimport magor from './images/magor.png';\nimport button from './images/button.png';\nimport veverkaRun from './images/veverka-run.png';\nimport veverkaIdle from './images/veverka-idle.png';\nimport logo from './images/acorn_logo.png';\nimport lever from './images/lever.png';\nimport platformSmall from './images/platform-small.png';\nimport platformMedium from './images/platform-medium.png';\nimport platformWheel from './images/platform-wheel.png';\nimport wheel from './images/wheel.png';\nimport items from './images/items.png';\nimport machines from './images/machines.png';\nimport levelTable from './images/level_table.png';\nimport starGold from './images/star_gold.png';\nimport starGrey from './images/star_grey.png';\nimport bubble from './images/bubble.png';\n\nimport resourceStation from './images/resource-station.png';\n\n/**\n * Default global resource dictionary. This gets loaded immediately\n * and holds available assets for the game.\n */\nconst Resources = new class Resources {\n    public Load = {\n        Sword: new ImageSource(sword),\n        Magor: new ImageSource(magor),\n        VeverkaRun: new ImageSource(veverkaRun),\n        VeverkaIdle: new ImageSource(veverkaIdle),\n        ItemsImg: new ImageSource(items),\n        Logo: new ImageSource(logo),\n        Lever: new ImageSource(lever),\n        PlatformSmall: new ImageSource(platformSmall),\n        PlatformMedium: new ImageSource(platformMedium),\n        PlatformWheel: new ImageSource(platformWheel),\n        ResourceStation: new ImageSource(resourceStation),\n        Wheel: new ImageSource(wheel),\n        Button: new ImageSource(button),\n        Machines: new ImageSource(machines),\n        LevelTable: new ImageSource(levelTable),\n        StarGold: new ImageSource(starGold),\n        StarGrey: new ImageSource(starGrey),\n        Bubble: new ImageSource(bubble),\n    }\n\n    readonly Items = lazy(() =>\n        SpriteSheet.fromImageSource({\n            image: this.Load.ItemsImg,\n            grid: {\n                columns: 8,\n                rows: 8,\n                spriteHeight: 16,\n                spriteWidth: 16,\n            }\n        })\n    );\n\n    readonly Machines = lazy(() =>\n        SpriteSheet.fromImageSource({\n            image: this.Load.Machines,\n            grid: {\n                columns: 8,\n                rows: 5,\n                spriteWidth: 48,\n                spriteHeight: 70,\n            }\n        })\n    );\n}\n\nfunction lazy<T>(provider: () => T): () => T {\n    let storage: T | undefined = undefined;\n    let computed = false;\n    return () => {\n        if (!computed) {\n            storage = provider();\n        }\n        return storage!;\n    }\n}\n\nexport { Resources }\n","import {Resources} from \"@/resources\";\nimport {Sprite} from \"excalibur\";\n\n\nexport enum ProductType {\n    COFFEE,\n    TEA,\n}\n\nexport enum MachineType {\n    BREWER,\n    GRINDER,\n}\n\nexport interface Item {\n    grind?(): Item;\n    brew?(): Item;\n    roast?(): Item;\n\n    getSprite(): Sprite;\n    getProductType?(): ProductType;\n}\n\nexport class Leaf<T> implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(3, 0); }\n\n    grind(): Item {\n        return new GroundLeaf();\n    }\n}\n\nexport class Acorn<T> implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 0); }\n\n    grind(): Item {\n        return new GroundAcorn();\n    }\n    roast(): Item {\n        return new RoastedAcorn();\n    }\n}\n\nexport class GroundAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(1, 0); }\n    brew(): Item {\n        return new Coffee();\n    }\n    roast(): Item {\n        return new RoastedGroundAcorn();\n    }\n}\n\nexport class Coffee implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(2, 0); }\n    getProductType(): ProductType {\n        return ProductType.COFFEE;\n    }\n}\n\nexport class RoastedAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 1); }\n}\n\nexport class RoastedGroundAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 2); }\n}\n\n\nexport class GroundLeaf implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(4, 0); }\n}\n\nexport class Tea implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(5, 0); }\n    getProductType(): ProductType {\n        return ProductType.TEA;\n    }\n}\n","import { ExcaliburGraphicsContext, PreDrawEvent, Scene, vec, Vector } from \"excalibur\";\n\n\n/** Updates the scene camera pos and zoom so that the entire scene is visible */\nexport class SceneScaler {\n\n    private handler: typeof this.onScenePreDraw;\n\n    constructor(\n        readonly sizeInPixels: Vector,\n        readonly scene: Scene,\n    ) {\n        this.handler = this.onScenePreDraw.bind(this);\n        scene.on('predraw', this.handler);\n    }\n\n    deactivate() {\n        this.scene.off('predraw', this.handler);\n    }\n\n    private onScenePreDraw(e: PreDrawEvent): void {\n        this.scene.camera.pos = this.sizeInPixels.scale(1 / 2);\n\n        const zoom = Math.min(\n            window.innerWidth / this.sizeInPixels.x,\n            window.innerHeight / this.sizeInPixels.y);\n\n        this.scene.camera.zoom = zoom;\n        //console.log('ctx: ', e.ctx.width, e.ctx.height, 'window: ', window.innerWidth, window.innerHeight);\n    }\n}\n","import * as ex from 'excalibur';\nimport { ExcaliburGraphicsContext, Label, vec } from 'excalibur';\nimport { ItemActor } from '@/actors/items/itemActor';\nimport { Coffee } from '@/actors/items/items';\nimport { SceneScaler } from \"@/scenes/scene-scaler\";\nimport { Level } from './level-intro';\nimport { Game } from '@/game';\n\nconst LEVEL_TIME: number = 5 * 60 * 1000;\n\nexport interface GameStatistics {\n    customersServed: number\n    customerLongestWait: number\n    pointsMax: number\n    pointsGained: number\n    recipesMade: number\n}\n\nexport class MainScene extends ex.Scene {\n    entityCounter = new Label({ text: '' });\n    timeLabel = new Label({ text: '', pos: vec(10, 10) })\n    timePlayed: number\n\n    private statistics: GameStatistics\n\n    constructor(\n        private game: Game,\n        private level: Level,\n    ) {\n        super();\n        this.timePlayed = 0;\n        this.statistics = {\n            customersServed: 0,\n            customerLongestWait: 0,\n            pointsMax: 0,\n            pointsGained: 0,\n            recipesMade: 0,\n        }\n    }\n\n\n    onInitialize(engine: ex.Engine) {\n        this.add(this.entityCounter);\n        this.add(this.timeLabel);\n\n        this.level.spawnItems(this);\n\n        let mouse = engine.input.pointers.primary;\n        mouse.on('down', e => {\n            console.log('spawn');\n            let acorn = new ItemActor(new Coffee());\n            acorn.pos = mouse.lastWorldPos.clone();\n            this.add(acorn);\n        });\n        this.physics.config.gravity = vec(0, 250);\n\n        new SceneScaler(this.level.size, this)\n    }\n\n    onPreDraw(ctx: ExcaliburGraphicsContext, delta: number): void {\n        this.entityCounter.text = `Entities: ${this.entities.length}`;\n        this.timeLabel.text = `${Math.floor((LEVEL_TIME - this.timePlayed) / 1000)} s`\n    }\n\n    onPreUpdate(engine: ex.Engine, delta: number): void {\n        this.timePlayed += delta;\n        if (this.timePlayed >= LEVEL_TIME) {\n            this.statistics.pointsMax = 200;\n            this.statistics.pointsGained = 130;\n            this.game.showLevelOutro(this.statistics);\n        }\n    }\n}\n","import { Actor, Vector, Text, Font, BaseAlign, Color, FontUnit, TextAlign, vec } from \"excalibur\";\n\nexport class TextLabel {\n    static WHITE = new Color(255, 255, 255);\n    static GREY = new Color(46, 46, 46);\n    static ORANGE = new Color(242, 157, 79);\n\n    private _actor: Actor;\n    constructor(\n        x: number,\n        y: number,\n        size: number,\n        message: string,\n        color: Color = TextLabel.GREY,\n        align: TextAlign = TextAlign.Center,\n    ) {\n        const text = new Text({ \n            text: message,\n            font: new Font({\n                textAlign: align,\n                baseAlign: BaseAlign.Bottom,\n                family: 'Pixelify Sans',\n                size,\n                unit: FontUnit.Px,\n                color,\n                smoothing: false,\n            })\n        });\n        text.scale = vec(1,1).scale(0.1);\n        this._actor = new Actor();\n        this._actor.graphics.use(text);\n        this.actor.pos = vec(x + text.width / 2, y)\n    }\n\n    public get actor() {\n        return this._actor;\n    }\n}","import { Item } from '@/actors/items/items';\nimport { Actor, Color, Engine, Keys, Scene, SceneActivationContext, vec, Vector } from 'excalibur';\nimport { Game } from '@/game';\nimport { Resources } from '@/resources';\nimport { TextLabel } from '@/ui/text-label';\nimport { SceneScaler } from './scene-scaler';\n\nexport interface Level {\n    maxPoints: number;\n    size: Vector;\n    spawnItems(scene: Scene): void;\n    getNewRecipes(): Recipe[];\n}\n\nexport class Recipe {\n    constructor(\n        private ingredients: Item[],\n        private result: Item,\n    ) { }\n}\n\nexport class LevelIntro extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n    constructor(\n        private game: Game,\n        private level: Level,\n        private levelId: number,\n    ) {\n        super();\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const logo = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        logo.graphics.add(Resources.Load.LevelTable.toSprite());\n        this.add(logo);\n\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\", TextLabel.GREY).actor);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\n            this.game.showCurrentLevel();\n        }\n    }\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import { Game } from \"@/game\";\nimport { Resources } from \"@/resources\";\nimport { Actor, Color, Engine, Keys, Scene, SceneActivationContext, vec } from \"excalibur\";\nimport { SceneScaler } from \"./scene-scaler\";\nimport { TextLabel } from \"@/ui/text-label\";\n\nexport class GameStart extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n    constructor(\n        private game: Game,\n    ) {\n        super();\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const logo = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        logo.graphics.add(Resources.Load.Logo.toSprite());\n        this.add(logo);\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 20, 56, \"Your forest cafe awaits...\\n Brew, Bake, Delight!\").actor);\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\").actor);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\n            this.game.showLevelIntro();\n        }\n    }\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import { Actor, Color, Engine, Keys, Scene, SceneActivationContext, TextAlign, vec } from \"excalibur\";\nimport { Game } from \"@/game\";\nimport { Resources } from \"@/resources\";\nimport { TextLabel } from \"@/ui/text-label\";\nimport { SceneScaler } from \"./scene-scaler\";\nimport { GameStatistics } from \"./main-scene\";\n\nexport class LevelOutro extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n    starsGained: number\n\n    constructor(\n        private game: Game,\n        private levelId: number,\n        private statistics: GameStatistics,\n    ) {\n        super();\n        const ratio = statistics.pointsGained / statistics.pointsMax;\n        this.starsGained = ratio < 0.33\n            ? 1\n            : (ratio < 0.66 ? 2 : 3);\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const levelTable = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        levelTable.graphics.add(Resources.Load.LevelTable.toSprite());\n        this.add(levelTable);\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\n\n        const resultMessage = this.starsGained == 1 ? \"Good start!\" : (this.starsGained == 2 ? \"Well done!\" : \"Barista Master <3\")\n        this.add(new TextLabel(this.width / 2 + 2, 78, 56, resultMessage, TextLabel.GREY).actor)\n\n        for (let i = 1; i <= 3; i++) {\n            const image = i <= this.starsGained ? Resources.Load.StarGold : Resources.Load.StarGrey;\n            const star = new Actor({x: this.width / 2 + (i - 2) * 25, y: this.height / 2});\n            star.graphics.add(image.toSprite());\n            this.add(star);\n        }\n\n        this.add(new TextLabel(this.width / 2 - 17, 115, 35, `- Points: ${this.statistics.pointsGained}`, TextLabel.WHITE, TextAlign.Left).actor)\n        this.add(new TextLabel(this.width / 2 - 17, 120, 35, `- Customers served: ${this.statistics.customersServed}`, TextLabel.WHITE, TextAlign.Left).actor)\n        this.add(new TextLabel(this.width / 2 - 17, 125, 35, `- Longest wait: ${this.statistics.customerLongestWait} s`, TextLabel.WHITE, TextAlign.Left).actor)\n\n\n        this.add(new TextLabel(this.width / 2, 150, 40, \"Press [T] to TRY AGAIN\", TextLabel.GREY).actor);\n        this.add(new TextLabel(this.width / 2, 160, 40, \"Press [N] to play NEXT LEVEL\", TextLabel.GREY).actor);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.T)) {\n            this.game.showCurrentLevel();\n        }\n        if(engine.input.keyboard.wasPressed(Keys.N)) {\n            this.game.showNextLevel();\n        }\n    }\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import * as ex from 'excalibur';\nimport { ItemActor } from './items/itemActor';\nimport {Resources} from \"@/resources\";\n\nexport class AutomaticSquirrel extends ex.Actor {\n    private carryingItem: ItemActor | null = null;\n\n    constructor() {\n        super({\n            pos: ex.vec(200, 500),\n            width: 32,\n            height: 32,\n            color: ex.Color.Gray,\n            collisionType: ex.CollisionType.Active,\n        });\n    }\n\n    onInitialize(engine: ex.Engine) {\n        // TODO: Implement AI logic to collect items and deliver to customers\n    }\n\n    update(engine: ex.Engine, delta: number) {\n        super.update(engine, delta);\n        // TODO: Implement AI movement and item handling\n    }\n}\n","import {\n    Actor,\n    BodyComponent,\n    CircleCollider,\n    clamp,\n    Collider, CollisionContact, CollisionGroup,\n    CollisionType,\n    Color,\n    Engine,\n    Keys, Shape,\n    Side,\n    vec\n} from 'excalibur';\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport * as ex from \"excalibur\";\nimport {Resources} from \"@/resources\";\nimport {Platform, SolidPlatform, WheelPlatform} from \"@/actors/platform\";\n\n\nexport class Player extends Actor {\n    GRAVITY = 3000;\n    JUMP_GRAVITY = this.GRAVITY * 0.5\n\n    MAX_VELOCITY = 300\n    ACCELERATION = 700\n    TURN_ACCELERATION = this.ACCELERATION * 4\n\n    AIR_MOVEMENT_PENALITY = 0.75;\n\n    JUMP_FORCE = 430\n\n    isOnWheel = false;\n    public runningDirection = 0;\n\n    isOnGround = false;\n    isPressingDown = false;\n\n    // set by the solid platform\n    public isOnSolidPlatform = false;\n\n    private carryingItem: ItemActor | null = null;\n\n    animations = {\n        run: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [0, 1, 2, 3, 4, 5, 6], 50),\n        flying: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [2, 3], 100),\n        idle: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaIdle,\n                grid: {\n                    columns: 3,\n                    rows: 1,\n                    spriteWidth: 32,\n                    spriteHeight: 32,\n                },\n            }), [0, 1, 2, 1], 200),\n    }\n\n    public constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 1,\n            width: 25,\n            height: 25,\n            color: new Color(255, 255, 255),\n            collisionType: CollisionType.Passive,\n            collider: Shape.Box(32, 32),\n        });\n    }\n\n    onInitialize(engine: ex.Engine) {\n        engine.input.keyboard.on('press', this.onKeyPress.bind(this));\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        const jumpPressed = engine.input.keyboard.wasPressed(Keys.W) || engine.input.keyboard.isHeld(Keys.Up)\n        const jumpHeld = engine.input.keyboard.isHeld(Keys.W) || engine.input.keyboard.isHeld(Keys.Up)\n\n        const heldLeft = engine.input.keyboard.isHeld(Keys.A) || engine.input.keyboard.isHeld(Keys.Left)\n        const heldRight = engine.input.keyboard.isHeld(Keys.D) || engine.input.keyboard.isHeld(Keys.Right)\n\n        let movementDirection = Math.sign(this.vel.x);\n\n        this.isPressingDown = engine.input.keyboard.isHeld(Keys.S) || engine.input.keyboard.isHeld(Keys.Down);\n\n        // move left or right\n        if (heldLeft || heldRight) {\n            let direction = 0;\n\n            if (heldLeft) direction -= 1;\n            if (heldRight) direction += 1;\n\n            // turning the other way is faster\n            let accel = (direction != movementDirection ? this.TURN_ACCELERATION : this.ACCELERATION)\n                * direction;\n\n            // turning in air is slower\n            if (!this.isOnGround) accel *= this.AIR_MOVEMENT_PENALITY;\n\n            this.acc.x = accel;\n\n            this.runningDirection = direction;\n        } else {\n            this.acc.x = 0;\n            this.vel.x *= 0.75;\n\n            this.runningDirection = 0;\n        }\n\n        if (this.runningDirection == -1) {\n            this.graphics.flipHorizontal = true;\n        } else if (this.runningDirection == 1) {\n            this.graphics.flipHorizontal = false;\n        }\n\n        this.vel.x = clamp(this.vel.x, -this.MAX_VELOCITY, this.MAX_VELOCITY)\n\n        // just jumping\n        if (jumpPressed && this.isOnGround) {\n            this.vel.y = -this.JUMP_FORCE;\n            this.isOnGround = false;\n            this.isOnWheel = false;\n        }\n\n        // fall through the platform\n        if (this.isPressingDown && !this.isOnSolidPlatform) {\n            this.isOnGround = false;\n            this.isOnWheel = false;\n        }\n\n        // if space is held and we're going up, apply jump gravity\n        if (jumpHeld && Math.sign(this.vel.y) < 0) {\n            this.acc.y = this.JUMP_GRAVITY\n        } else {\n            this.acc.y = this.GRAVITY\n        }\n\n        // not on the ground always means flying\n        if (!this.isOnGround) {\n            this.graphics.use(this.animations.flying);\n            this.updateItemPosition('back');\n        } else {\n            // when on the ground, we are either running on the wheel\n            if (this.isOnWheel) {\n                if (this.runningDirection == 0) {\n                    this.graphics.use(this.animations.idle);\n                    this.updateItemPosition('hand');\n                }\n                else {\n                    this.graphics.use(this.animations.run);\n                    this.updateItemPosition('back');\n                }\n            }\n\n            // else we're idling\n            else if (Math.abs(this.vel.x) < 50) {\n                this.graphics.use(this.animations.idle);\n                this.updateItemPosition('hand');\n            }\n            else {\n                this.graphics.use(this.animations.run);\n                this.updateItemPosition('back');\n            }\n        }\n\n        // ground cancels all Y movement\n        if (this.isOnGround) {\n            this.acc.y = 0;\n            this.vel.y = 0;\n        }\n\n        if (this.isOnWheel) {\n            this.acc.x = 0;\n            this.vel.x = 0;\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody?.collisionType === CollisionType.Fixed || otherBody?.collisionType === CollisionType.Passive) {\n            // player landed on the ground\n            if ((side === Side.Bottom && !this.isPressingDown && otherBody.owner instanceof Platform) || otherBody.owner instanceof SolidPlatform) {\n                this.isOnGround = true;\n\n                if (otherBody.owner instanceof WheelPlatform) {\n                    this.isOnWheel = true;\n                    this.pos.x = other.center.x;\n                }\n\n                // push out of the platform\n                // minuses because y axis is negative upwards\n                this.pos.y = other.getFurthestPoint(vec(0, -1)).y\n                    - self.bounds.height / 2 + 0.1;\n            }\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        super.onCollisionEnd(self, other, side, lastContact);\n\n        const otherBody = other.owner.get(BodyComponent)\n\n        // Tom is fucking going to jail\n        if (otherBody?.owner instanceof Platform && otherBody.pos.y > this.pos.y) {\n            this.isOnGround = false;\n        }\n    }\n\n    onKeyPress(evt: ex.Input.KeyEvent) {\n        if (evt.key === ex.Input.Keys.Space) {\n            this.dropItem();\n        }\n    }\n\n    isCarryingItem() {\n        return (this.carryingItem != null);\n    }\n\n    pickUpItem(item: ItemActor) {\n        this.carryingItem = item;\n        item.body.collisionType = ex.CollisionType.Passive;\n        this.addChild(this.carryingItem);\n    }\n\n    dropItem() {\n        if (this.carryingItem) {\n            this.removeChild(this.carryingItem)\n\n            this.carryingItem.pos = this.pos.clone().add(this.carryingItem.offset);\n            this.carryingItem.vel = ex.vec(this.vel.x, this.vel.y / 10);\n\n            this.carryingItem.body.collisionType = ex.CollisionType.Active;\n\n            this.carryingItem.offset = vec(0, 0);\n\n            this.scene?.add(this.carryingItem);\n\n            this.carryingItem = null;\n        }\n    }\n\n    private updateItemPosition(position: string) {\n        let facing = this.graphics.flipHorizontal;\n\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset  = Math.sin(frame);\n\n        let handOffset = vec(facing ? -10 : 10, 3 + uglyOffset);\n        let backOffset = vec(facing ? -20 : 20, 2 + uglyOffset);\n\n        if (this.carryingItem != undefined) {\n            this.carryingItem.graphics.flipHorizontal = facing;\n\n            if (position == 'hand') {\n                this.carryingItem.offset = handOffset;\n            }\n            else {\n                this.carryingItem.offset = backOffset;\n            }\n        }\n    }\n}\n","import * as ex from 'excalibur';\nimport {BodyComponent, Collider, CollisionContact, CollisionType, Color, Engine, Side} from 'excalibur';\nimport {Player} from \"@/actors/player\";\nimport {Resources} from \"@/resources\";\n\nexport class Platform extends ex.Actor {\n    constructor(x: number, y: number, width: number, height: number, rotation: number = 0, collisionType: CollisionType = CollisionType.Passive) {\n        super({\n            pos: ex.vec(x, y),\n            width: width,\n            height: height,\n            color: Color.DarkGray,\n            collisionType: collisionType,\n        });\n\n        this.rotation = rotation;\n\n        if (width == 25)\n            this.graphics.use(Resources.Load.PlatformWheel.toSprite());\n        if (width == 30)\n            this.graphics.use(Resources.Load.PlatformSmall.toSprite());\n        else if (width == 60)\n            this.graphics.use(Resources.Load.PlatformMedium.toSprite());\n    }\n}\n\nexport class SolidPlatform extends Platform {\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            otherBody.owner.isOnSolidPlatform = true;\n            otherBody.owner.isOnGround = true;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        // this happened. no idea why\n        if (other.owner == null)\n            return;\n\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            otherBody.owner.isOnSolidPlatform = false;\n        }\n    }\n}\n\nexport class WheelPlatform extends Platform {\n    public isOnPlayform = false;\n    public direction  = 0;\n\n    playerReference?: Player;\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.playerReference && this.playerReference.isOnGround) {\n            this.direction = this.playerReference.runningDirection;\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.isOnPlayform = true;\n            this.playerReference = otherBody.owner;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.isOnPlayform = false;\n            this.playerReference = undefined;\n            this.direction = 0;\n        }\n    }\n\n}","import * as ex from 'excalibur';\nimport {Engine, vec} from 'excalibur';\nimport { Machine } from '../machines/machine';\nimport { WheelPlatform } from \"@/actors/platform\";\nimport {Resources} from \"@/resources\";\n\nexport class HamsterWheel extends ex.Actor {\n    public linkedMachine: Machine | undefined;\n\n    public wheel: ex.Actor;\n    public platform: WheelPlatform;\n\n    constructor(x: number, y: number, radius: number, linkedMachine?: Machine) {\n        super({ pos: ex.vec(x, y) });\n\n        this.linkedMachine = linkedMachine;\n\n        // Add wheel component\n        this.wheel = new ex.Actor({\n            radius: radius,\n            color: ex.Color.Gray,\n            scale: vec(1.1, 1.1),\n        });\n\n        this.wheel.graphics.use(Resources.Load.Wheel.toSprite())\n\n        const platformWidth = 25;\n        const platformHeight = 10;\n\n        // Add platform component on top of the wheel\n        this.platform = new WheelPlatform(0, radius + platformHeight / 2, platformWidth, platformHeight);\n\n        // Add components as children\n        this.addChild(this.wheel);\n        this.addChild(this.platform);\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.platform.direction != 0) {\n            this.wheel.actions.rotateBy(this.platform.direction / 20, 100);\n\n            if (this.linkedMachine != undefined) {\n                this.linkedMachine.remainingProcessingTime = Math.max(this.linkedMachine.remainingProcessingTime - delta / 1000, 0);\n            }\n        }\n    }\n}\n","import * as ex from 'excalibur';\nimport { Machine } from '../machines/machine';\nimport {BodyComponent, Collider, CollisionContact, Engine, Shape, Side, vec} from \"excalibur\";\nimport {Player} from \"@/actors/player\";\nimport {Resources} from \"@/resources\";\n\nexport class Lever extends ex.Actor {\n    public linkedMachine!: Machine;\n\n    playerReference!: Player | null\n\n    constructor(x: number, y: number, linkedMachine?: Machine) {\n        super({\n            pos: ex.vec(x, y),\n            width: 8,\n            height: 32,\n            offset: vec(0, -16),\n            collisionType: ex.CollisionType.Passive,\n            collider: Shape.Circle(4)\n        });\n\n        this.graphics.use(Resources.Load.Lever.toSprite())\n\n        if (linkedMachine) {\n            this.linkedMachine = linkedMachine;\n        }\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.playerReference && this.actions.getQueue().isComplete()) {\n            let direction = Math.sign(this.playerReference.vel.x)\n\n            if (direction) {\n                this.actions.clearActions()\n                this.actions.rotateTo(direction / 2, 5);\n            }\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = null;\n        }\n    }\n\n    onInitialize(engine: ex.Engine) {\n        // TODO: Implement lever interaction\n    }\n}\n","import * as ex from 'excalibur';\nimport { ItemActor } from './items/itemActor';\nimport { ProductType } from './items/items';\nimport { Resources } from \"@/resources\";\nimport { clamp, CollisionType, Engine, vec } from 'excalibur';\nimport { Coffee, Tea } from \"@/actors/items/items\";\n\nexport class Customer extends ex.Actor {\n    private static readonly MAX_VELOCITY = 300;\n    private static readonly ACCELERATION = 700;\n    private static readonly PICK_UP_THRESHOLD = 25;\n\n    private animations = {\n        run: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [0, 1, 2, 3, 4, 5, 6], 100),\n        flying: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [2, 3], 100),\n        idle: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaIdle,\n                grid: {\n                    columns: 3,\n                    rows: 1,\n                    spriteWidth: 32,\n                    spriteHeight: 32,\n                },\n            }), [0, 1, 2], 200),\n    };\n\n    private bubble: ex.Actor; // New bubble actor\n    public readonly desiredProductType: ProductType;\n    public satisfied: boolean = false;\n    private assignedItem: ItemActor | null = null;\n    private runningDirection: number | null = null;\n    private runningTarget: number | null = null;\n\n    private carryingItem: ItemActor | null = null;\n\n    constructor(waitingX: number, desiredProductType: ProductType) {\n        super({\n            pos: ex.vec(waitingX, 0),\n            width: 32,\n            height: 32,\n            color: ex.Color.Yellow,\n            collisionType: ex.CollisionType.Passive,\n        });\n        this.desiredProductType = desiredProductType;\n\n        // Initialize the bubble actor\n        this.bubble = new ex.Actor({\n            pos: ex.vec(0, -16), // Position above the customer\n            offset: ex.vec(0, -16), // Position above the customer\n            width: 32,\n            height: 32,\n            collisionType: ex.CollisionType.PreventCollision,\n        });\n\n        this.bubble.graphics.use(Resources.Load.Bubble.toSprite());\n        this.bubble.scale = vec(1, 1)\n\n        let itemActor;\n        if (desiredProductType == ProductType.COFFEE) {\n            itemActor = new ItemActor(new Coffee());\n        }\n        else {\n            itemActor = new ItemActor(new Tea());\n        }\n\n        itemActor.pos = vec(0, -18)\n        itemActor.body.collisionType = CollisionType.PreventCollision;\n        this.bubble.addChild(itemActor)\n\n        // Attach the bubble to the customer as a child actor\n        this.addChild(this.bubble);\n    }\n\n    pickUpItem(item: ItemActor) {\n        this.carryingItem = item;\n        item.body.collisionType = ex.CollisionType.PreventCollision;\n        item.pos = vec(0, 0);\n        item.vel = vec(0, 0);\n        item.angularVelocity = 0;\n\n        item.rotation = 0;\n        this.addChild(this.carryingItem);\n\n        this.bubble.actions.scaleTo(vec(0, 0), vec(5, 10));\n    }\n\n    private updateBubblePosition() {\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset  = Math.sin(frame);\n\n        console.log(uglyOffset)\n\n        this.bubble.pos = ex.vec(0, -16 + uglyOffset);\n    }\n\n    private updateItemPosition(position: string) {\n        let facing = this.graphics.flipHorizontal;\n\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset = Math.sin(frame);\n\n        let handOffset = vec(facing ? -10 : 10, 3 + uglyOffset);\n        let backOffset = vec(facing ? -20 : 20, 2 + uglyOffset);\n\n        if (this.carryingItem != undefined) {\n            this.carryingItem.graphics.flipHorizontal = facing;\n\n            if (position == 'hand') {\n                this.carryingItem.offset = handOffset;\n            }\n            else {\n                this.carryingItem.offset = backOffset;\n            }\n        }\n    }\n\n    onInitialize(engine: ex.Engine) {\n        this.pos = ex.vec(this.pos.x, engine.drawHeight - this.height / 2);\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.runningTarget !== null) {\n            this.runningDirection = Math.sign(this.runningTarget - this.pos.x);\n\n            if (Math.abs(this.runningTarget - this.pos.x) < Customer.PICK_UP_THRESHOLD) {\n                this.runningTarget = null;\n\n                if (this.assignedItem) {\n                    this.satisfied = true;\n                    this.pickUpItem(this.assignedItem)\n                    this.goTo(10000)\n                }\n            }\n        } else {\n            if (!this.satisfied) {\n                this.runningDirection = null;\n            }\n        }\n\n        if (this.satisfied && this.pos.x > engine.drawWidth + this.width) {\n            console.log(\"Killing customer\")\n            this.kill();\n        }\n\n        if (this.runningDirection !== null) {\n            this.acc.x = Customer.ACCELERATION * this.runningDirection;\n        } else {\n            this.acc.x = 0;\n            this.vel.x *= 0.75;\n        }\n\n        if (this.runningDirection == -1) {\n            this.graphics.flipHorizontal = true;\n            this.graphics.use(this.animations.run);\n            this.updateItemPosition('back');\n        } else if (this.runningDirection == 1) {\n            this.graphics.flipHorizontal = false;\n            this.graphics.use(this.animations.run);\n            this.updateItemPosition('back');\n        } else {\n            this.graphics.use(this.animations.idle);\n            this.updateItemPosition('hand');\n        }\n        this.vel.x = clamp(this.vel.x, -Customer.MAX_VELOCITY, Customer.MAX_VELOCITY)\n\n        this.updateBubblePosition()\n    }\n\n    goFetchItem(item: ItemActor) {\n        this.runningTarget = item.pos.x;\n        this.assignedItem = item;\n        item.allocatedToCustomer = true;\n    }\n\n    goTo(xPosition: number) {\n        this.runningTarget = xPosition;\n    }\n\n    productAssigned(): boolean {\n        return this.assignedItem != null;\n    }\n}\n","import { Engine, Shape, vec, Actor, Color, CollisionType, Collider, Side, CollisionContact } from \"excalibur\";\nimport { Customer } from \"@/actors/customer\";\nimport { ItemActor } from \"@/actors/items/itemActor\";\nimport { ProductType } from \"./items/items\";\n\n\nlet LOL = 480\n\n\nexport class CustomerControl extends Actor {\n    private static readonly HEIGHT = 100;\n    private static readonly MIN_TIMEOUT = 1000;\n    private static readonly MAX_TIMEOUT = 3000;\n    private static readonly MAX_WAITING_CUSTOMERS = 3;\n    private static readonly ITEM_TIMEOUT = 5000;\n\n    private customers: Customer[] = [];\n    private pendingProducts: ItemActor[] = [];\n\n    constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            width: 480,\n            height: 80,\n            color: Color.Transparent,\n            collisionType: CollisionType.Passive,\n        });\n    }\n\n    onInitialize(engine: Engine) {\n        this.scheduleCustomersRefresh(engine);\n    }\n\n    private scheduleCustomersRefresh(engine: Engine) {\n        const timeout = Math.random() * (CustomerControl.MAX_TIMEOUT - CustomerControl.MIN_TIMEOUT) + CustomerControl.MIN_TIMEOUT;\n        const scene = this.scene;\n        if (scene === null)\n            return;\n        setTimeout(() => {\n            this.customers = this.customers.filter(c => !c.isKilled());\n            let waitingCustomers = this.customers.filter(c => !c.productAssigned());\n            if (waitingCustomers.length < CustomerControl.MAX_WAITING_CUSTOMERS) {\n                console.log(\"Adding customer.\")\n                const product = ProductType.COFFEE; // TODO: choose at random\n                const waitingX = LOL + 64;\n                const customer = new Customer(waitingX, product);\n\n                this.customers.push(customer);\n                waitingCustomers = this.customers.filter(c => !c.productAssigned());\n\n                for (let i = 0; i < waitingCustomers.length; i++) {\n                    waitingCustomers[i].goTo(LOL - 64 * (waitingCustomers.length - i));\n                }\n\n                scene.add(customer);\n\n                if (this.pendingProducts.length > 0) {\n                    customer.goFetchItem(this.pendingProducts.pop()!);\n                }\n            }\n\n            this.scheduleCustomersRefresh(engine);\n        }, timeout);\n    }\n\n    onCollisionStart(self: Collider, other: Collider, side: Side, contact: CollisionContact) {\n        const item = other.owner;\n        if (!(item instanceof ItemActor))\n            return;\n        if (item.allocatedToCustomer)\n            return;\n        if (!item.item.getProductType)\n            return;\n        const productType = item.item.getProductType();\n        const customer = this.customers.find(c =>\n            !c.satisfied && !c.productAssigned() && c.desiredProductType == productType\n        );\n        if (customer) {\n            customer.goFetchItem(item);\n        } else {\n            this.pendingProducts.push(item);\n            setTimeout(() => {\n                if (this.pendingProducts.includes(item) && !item.allocatedToCustomer) {\n                    this.pendingProducts = this.pendingProducts.filter(p => p != item);\n                }\n            }, CustomerControl.ITEM_TIMEOUT);\n        }\n    }\n}","import { ItemActor } from '../items/itemActor';\nimport { Item } from '@/actors/items/items';\nimport {\n    Actor,\n    ActorArgs, BaseAlign,\n    Collider,\n    CollisionContact,\n    CollisionType,\n    Color,\n    Engine, Font, FontUnit,\n    Label,\n    Side, TextAlign, vec,\n    Vector\n} from 'excalibur';\n\nexport abstract class Machine extends Actor {\n    public isOn: boolean = true;\n\n    intakeActor: Actor;\n\n    private itemQueue: Array<ItemActor> = [];\n    private blacklistedItemQueue: Array<ItemActor> = [];\n\n    private isProcessing: boolean = false;\n    private manual: boolean;\n\n    public remainingProcessingTime = 0;\n    public maxProcessingTime = 1.5;\n\n    private tooltip: Label;\n\n    constructor(config?: ActorArgs, manual: boolean = false) {\n        super({\n            color: Color.Gray,\n            collisionType: CollisionType.Fixed,\n            ...config,\n        });\n\n        this.manual = manual;\n\n        // Create tooltip (initially hidden)\n        this.tooltip = new Label({\n            text: '',\n            pos: vec(0, 0), // Position the label above the station\n            font: new Font({\n                textAlign: TextAlign.Center,\n                baseAlign: BaseAlign.Middle,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n                family: 'Silkscreen',\n                size: 15,\n                unit: FontUnit.Px,\n                color: Color.White\n            })\n        });\n\n        this.tooltip.z = 10;\n\n        let [intakeStart, intakeEnd] = this.getIntake();\n        this.intakeActor = new Actor({\n            pos: intakeStart.add(intakeEnd).scale(1 / 2),\n            width: intakeEnd.x - intakeStart.x,\n            height: intakeEnd.y - intakeStart.y,\n            collisionType: CollisionType.Fixed,\n            color: Color.Green,\n        });\n        this.intakeActor.on('collisionstart', e => {\n            if (this.isOn && e.other instanceof ItemActor) {\n                const itemActor = e.other as ItemActor;\n\n                if (!this.itemQueue.includes(itemActor) && !this.blacklistedItemQueue.includes(itemActor)) {\n                    this.itemQueue.push(itemActor);\n                }\n            }\n        });\n\n        this.addChild(this.intakeActor);\n        this.addChild(this.tooltip);\n    }\n\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (!this.isProcessing) {\n            if (this.itemQueue.length != 0) {\n                this.isProcessing = true;\n                this.remainingProcessingTime = this.maxProcessingTime;\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\n\n            }\n        } else {\n            if (this.remainingProcessingTime <= 0) {\n                const itemActor = this.itemQueue.shift()!;\n\n                itemActor.kill();\n                this.isProcessing = false;\n\n                this.remainingProcessingTime = 0;\n                this.tooltip.text = '';\n\n                const newItem = this.processItem(itemActor.item);\n\n                if (newItem) {\n                    const newActor = new ItemActor(newItem);\n                    newActor.pos = this.getOutlet().add(this.pos);\n                    this.blacklistedItemQueue.push(newActor);\n                    this.scene?.add(newActor);\n                }\n            } else {\n                if (!this.manual) {\n                    this.remainingProcessingTime = Math.max(this.remainingProcessingTime - delta / 1000, 0);\n                }\n\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\n            }\n        }\n    }\n\n    /** Position of intake [start, end] in relative coordinates */\n    protected abstract getIntake(): [Vector, Vector];\n\n    /** Position of the outlet */\n    protected abstract getOutlet(): Vector;\n\n    protected abstract processItem(item: Item): Item | null;\n}\n","import { Item } from '@/actors/items/items';\nimport { Machine } from './machine';\nimport { CompositeCollider, Rectangle, Resource, Shape, vec, Vector } from 'excalibur';\nimport { Resources } from '@/resources';\nimport { Paddle } from '../paddle';\n\nexport class Brewer extends Machine {\n    constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n        });\n        this.graphics.use(Resources.Machines().getSprite(2, 0));\n\n\n        this.collider.set(new CompositeCollider([\n            Shape.Box(45, 16, undefined, vec(0, -6)),\n            // in tile coordinates\n            Shape.Polygon([vec(10, 1), vec(14, 21), vec(15, 21), vec(11, 0)], vec(-24, -35)),\n            Shape.Polygon([vec(43, 1), vec(42, 0), vec(39, 21), vec(40, 21)], vec(-24, -35)),\n        ]));\n    }\n\n    processItem(item: Item): Item | null {\n        return item.brew ? item.brew() : null;\n    }\n\n    protected getIntake(): [Vector, Vector] {\n        return [\n            vec(-8, -16),\n            vec(8, -4),\n        ];\n    }\n    protected getOutlet(): Vector {\n        return vec(0, 10);\n    }\n}\n","import { Actor, CollisionType, Color, vec, Vector } from \"excalibur\";\n\n\n/** Small box collider with rotation used for details of machine colliders */\nexport class Paddle extends Actor {\n\n    constructor(pos: Vector, size: Vector, degrees: number = 0) {\n        super({\n            pos,\n            rotation: degrees / 180 * Math.PI,\n            width: size.x,\n            height: size.y,\n            collisionType: CollisionType.Fixed,\n        })\n    }\n}","import { Machine } from './machine';\nimport { ItemActor } from '../items/itemActor';\nimport { Item } from '@/actors/items/items';\nimport { Actor, CircleCollider, Color, CompositeCollider, EdgeCollider, Engine, vec, Vector } from 'excalibur';\nimport { Resources } from '@/resources';\nimport { Paddle } from '../paddle';\n\n\nexport class Grinder extends Machine {\n\n    crank: Actor;\n\n    constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 1,\n        }, true);\n\n        this.graphics.add(Resources.Machines().getSprite(0, 0));\n        this.collider.set(new CircleCollider({ radius: 16, offset: vec(0, 6) }));\n\n        this.crank = new Actor({\n            pos: vec(0.5, 5),\n            z: this.z + 1,\n        });\n        const crankSprite = Resources.Machines().getSprite(1, 0)\n        this.crank.graphics.add(crankSprite);\n        this.addChild(this.crank);\n\n        this.addChild(new Paddle(vec(-11, -18), vec(27, 2), 75));\n        this.addChild(new Paddle(vec(12, -18), vec(27, 2), -75));\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        super.onPostUpdate(engine, delta);\n\n        if (this.isOn) {\n            this.crank.rotation = -(this.remainingProcessingTime / this.maxProcessingTime)  * Math.PI * 2;\n        }\n    }\n\n    protected processItem(item: Item): Item | null {\n        return item.grind ? item.grind() : null;\n    }\n    protected getIntake(): [Vector, Vector] {\n        return [\n            vec(-5, -10),\n            vec(5, -5)\n        ];\n    }\n    protected getOutlet(): Vector {\n        return vec(.5, 10);\n    }\n}\n","import {\n    Actor,\n    BaseAlign,\n    BodyComponent,\n    Collider,\n    CollisionContact,\n    CollisionType,\n    Color,\n    Engine,\n    Font,\n    FontUnit,\n    Keys,\n    Label,\n    Side,\n    TextAlign,\n    vec\n} from 'excalibur';\nimport {Player} from \"@/actors/player\";\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport {Item} from \"@/actors/items/items\";\nimport {Resources} from \"@/resources\";\n\nclass ResourceStation extends Actor {\n    private tooltip: Label;\n    private cooldownTimer = 0;\n    private isOnCooldown = false;\n\n    playerReference?: Player;\n    item: Item;\n\n    COOLDOWN = 5;\n\n    constructor(x: number, y: number, size: number, item: Item) {\n        super({\n            x: x,\n            y: y,\n            width: size,\n            height: size,\n            color: Color.Gray,\n            collisionType: CollisionType.Passive,\n        });\n\n        this.item = item;\n\n        // Create tooltip (initially hidden)\n        this.tooltip = new Label({\n            text: 'Space',\n            pos: vec(0, -size / 2 - 6), // Position the label above the station\n            font: new Font({\n                textAlign: TextAlign.Center,\n                baseAlign: BaseAlign.Bottom,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n                family: 'Silkscreen',\n                size: 15,\n                unit: FontUnit.Px,\n                color: Color.White\n            })\n        });\n\n        this.tooltip.scale = vec(0, 0);\n\n        let itemActor = new ItemActor(item);\n        itemActor.body.collisionType = CollisionType.PreventCollision;\n\n        this.addChild(this.tooltip); // Attach tooltip to the ResourceStation\n        this.addChild(itemActor)\n\n        itemActor.scale = vec(0.8, 0.8)\n\n        this.graphics.use(Resources.Load.ResourceStation.toSprite())\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        const fPressed = engine.input.keyboard.wasPressed(Keys.Space);\n\n        // Cooldown logic\n        if (this.isOnCooldown) {\n            // Decrease the cooldown timer by the delta time\n            this.cooldownTimer -= delta / 1000; // Convert ms to seconds\n            if (this.cooldownTimer <= 0) {\n                this.isOnCooldown = false;\n                this.tooltip.text = 'Space'; // Reset tooltip text when cooldown ends\n            } else {\n                // Update tooltip text with remaining time\n                this.tooltip.text = `${this.cooldownTimer.toFixed(1)}`;\n                this.tooltip.graphics.opacity = 0.5;\n            }\n        } else if (this.playerReference) {\n            if (!this.playerReference.isCarryingItem()) {\n                this.tooltip.graphics.opacity = 1;\n            } else {\n                this.tooltip.graphics.opacity = 0.5;\n            }\n\n            // Allow item pickup only if not on cooldown\n            if (fPressed && !this.playerReference.isCarryingItem() && !this.isOnCooldown) {\n                this.playerReference.pickUpItem(new ItemActor(this.item));\n\n                // Start the cooldown\n                this.isOnCooldown = true;\n                this.cooldownTimer = this.COOLDOWN;\n                this.tooltip.text = `${this.COOLDOWN.toFixed(1)}`; // Display initial cooldown time\n\n                this.actions.delay(this.COOLDOWN * 1000).callMethod(() => {\n                    // hide\n                    if (this.playerReference == undefined) {\n                        this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20)).callMethod(() => {this.tooltip.text = `Space`});\n                        ;\n                    }\n                })\n\n            }\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent);\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n            this.tooltip.actions.scaleTo(vec(1, 1), vec(10, 20));\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent);\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = undefined;\n\n            // only hide if it's not on cooldown, otherwise we hide when it comes out of cooldown\n            if (!this.isOnCooldown) {\n                this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20));\n            }\n        }\n    }\n}\n\nexport default ResourceStation;\n","import { AutomaticSquirrel } from \"@/actors/automatic-squirrel\";\nimport { HamsterWheel } from \"@/actors/contols/hamster-wheel\";\nimport { Lever } from \"@/actors/contols/lever\";\nimport { CustomerControl } from \"@/actors/customers-control\";\nimport { ItemActor } from \"@/actors/items/itemActor\";\nimport { Acorn, Leaf } from \"@/actors/items/items\";\nimport { Brewer } from \"@/actors/machines/brewer\";\nimport { Grinder } from \"@/actors/machines/grinder\";\nimport { Platform, SolidPlatform } from \"@/actors/platform\";\nimport { Player } from \"@/actors/player\";\nimport ResourceStation from \"@/actors/stations/resource-station\";\nimport { Level, Recipe } from \"@/scenes/level-intro\";\nimport { CollisionType, Scene, vec, Vector } from \"excalibur\";\n\n\n\nexport class Level1 implements Level {\n    maxPoints: number = 100 // determined by playing\n    size: Vector = vec(0, 0);\n\n    getNewRecipes(): Recipe[] {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    spawnItems(scene: Scene): void {\n        const lever = new Lever(100, 200 - 10);\n        scene.add(lever)\n\n        {[\n            // resource station platforms\n            new Platform(270, 100, 60, 10),\n            new Platform(400, 120, 60, 10),\n\n            // support platforms\n            new Platform(330, 160, 30, 10),\n            new Platform(200, 150, 30, 10),\n\n            // brewer platform\n            new Platform(480 / 2, 370, 30, 10, -Math.PI / 5, CollisionType.Fixed),\n\n            // the main solid platform\n            new SolidPlatform(480 / 2, 200, 480, 20),\n\n            // the bottom solid platform\n            new SolidPlatform(480 / 2, 480, 480, 20, 0, CollisionType.Fixed),\n        ].forEach(platform => scene.add(platform));}\n\n        {[\n            new ResourceStation(270, 100 - 15 - 5, 30, new Acorn()),\n            new ResourceStation(400, 120 - 15 - 5, 30, new Leaf()),\n        ].forEach(station => scene.add(station));}\n\n        // Create AI-controlled squirrel\n        const aiSquirrel = new AutomaticSquirrel();\n        scene.add(aiSquirrel);\n\n        // Create player-controlled squirrel\n        const player = new Player(480 / 2, 180);\n        scene.add(player);\n\n        // // Create machines\n        const grinder = new Grinder(480 / 2, 300);\n        scene.add(grinder);\n\n        const brewer = new Brewer(480, 350);\n        scene.add(brewer);\n\n        const wheel = new HamsterWheel(100, 80, 50, grinder);\n        scene.add(wheel)\n\n        // TODO: Position the machines properly\n\n        const customerControl = new CustomerControl(480 / 2, 480 + 10);\n        scene.add(customerControl);\n    }\n}\n\nexport const LEVELS: Level[] = [\n    new Level1(),\n];\n","import { Engine, Loader, DisplayMode, Keys, Scene, CollisionType, Color, Actor } from 'excalibur';\nimport { GameStatistics, MainScene } from './scenes/main-scene';\nimport { Resources } from './resources';\nimport { Level, LevelIntro } from './scenes/level-intro';\nimport { GameStart } from './scenes/game-start';\nimport { LevelOutro } from './scenes/level-outro';\nimport { LEVELS } from './levels/level';\n\nconst enum Scenes {\n    Idle = 'idle',\n    Start = 'start',\n    Intro = 'intro',\n    Outro = 'outro',\n    Main = 'main',\n}\n\n/**\n * Managed game class\n */\nexport class Game extends Engine {\n    private mainScene!: MainScene;\n    private curLevelId: number = 0\n    private isShowDebug = false;\n\n    constructor() {\n        super({\n            displayMode: DisplayMode.FillScreen,\n            antialiasing: false,\n        });\n\n        this.debug.collider.boundsColor = Color.Red;\n        this.debug.collider.showAll = true;\n    }\n\n    public start() {\n        // Automatically load all default resources\n        this.debug.collider.showBounds = true;\n        const loader = new Loader(Object.values(Resources.Load));\n\n        return super.start(loader);\n    }\n\n    restart(): void {\n        this.goToScene(Scenes.Idle).then(() => {\n            this.removeScene(this.mainScene);\n            this.showCurrentLevel();\n        });\n    }\n\n    onStart(): void {\n        this.addScene(Scenes.Start, new GameStart(this));\n        this.goToScene(Scenes.Start);\n    }\n\n    public showLevelIntro(): void {\n        this.addScene(Scenes.Intro, new LevelIntro(this, LEVELS[this.curLevelId], this.curLevelId));\n        this.goToScene(Scenes.Intro);\n    }\n\n    public showLevelOutro(statics: GameStatistics) {\n        this.addScene(Scenes.Outro, new LevelOutro(this, this.curLevelId, statics));\n        this.goToScene(Scenes.Outro);\n    }\n\n    public showNextLevel(): void {\n        this.curLevelId++;\n        if (this.curLevelId >= LEVELS.length) {\n            this.restart()\n            // TODO: add and screen or restart\n        } else {\n            this.showCurrentLevel();\n        }\n    }\n    public showCurrentLevel(): void {\n        this.addScene(Scenes.Main, new MainScene(this, LEVELS[this.curLevelId]));\n        this.goToScene(Scenes.Main);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.R)) {\n            this.restart();\n        }\n        if (engine.input.keyboard.wasPressed(Keys.F4)) {\n            this.isShowDebug = !this.isShowDebug;\n            this.showDebug(this.isShowDebug);\n        }\n    }\n}\n","import {Game} from \"./game\";\n\nconst game = new Game();\ngame.start().then(() => {\n  game.onStart();\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkexcalibur_webpack\"] = self[\"webpackChunkexcalibur_webpack\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [128], () => (__webpack_require__(550)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","ItemActor","constructor","item","spawnPos","super","radius","collisionType","Active","allocatedToCustomer","this","pos","clone","graphics","use","getSprite","onPostUpdate","engine","delta","angularVelocity","vel","x","Resources","Load","Sword","Magor","VeverkaRun","VeverkaIdle","ItemsImg","Logo","Lever","PlatformSmall","PlatformMedium","PlatformWheel","ResourceStation","Wheel","Button","Machines","LevelTable","StarGold","StarGrey","Bubble","Items","lazy","fromImageSource","image","grid","columns","rows","spriteHeight","spriteWidth","provider","storage","ProductType","MachineType","Leaf","grind","GroundLeaf","Acorn","GroundAcorn","roast","RoastedAcorn","brew","Coffee","RoastedGroundAcorn","getProductType","COFFEE","Tea","TEA","SceneScaler","sizeInPixels","scene","handler","onScenePreDraw","bind","on","deactivate","off","e","camera","scale","zoom","Math","min","window","innerWidth","innerHeight","y","LEVEL_TIME","MainScene","game","level","entityCounter","text","timeLabel","timePlayed","statistics","customersServed","customerLongestWait","pointsMax","pointsGained","recipesMade","onInitialize","add","spawnItems","mouse","input","pointers","primary","console","log","acorn","lastWorldPos","physics","config","gravity","size","onPreDraw","ctx","entities","length","floor","onPreUpdate","showLevelOutro","TextLabel","message","color","GREY","align","Center","font","textAlign","baseAlign","Bottom","family","unit","Px","smoothing","_actor","actor","width","WHITE","ORANGE","LevelIntro","levelId","height","scaler","backgroundColor","logo","toSprite","keyboard","wasPressed","Space","showCurrentLevel","onDeactivate","context","GameStart","showLevelIntro","LevelOutro","ratio","starsGained","levelTable","resultMessage","i","star","Left","T","N","showNextLevel","AutomaticSquirrel","Gray","carryingItem","update","Player","z","Passive","collider","Box","GRAVITY","JUMP_GRAVITY","MAX_VELOCITY","ACCELERATION","TURN_ACCELERATION","AIR_MOVEMENT_PENALITY","JUMP_FORCE","isOnWheel","runningDirection","isOnGround","isPressingDown","isOnSolidPlatform","animations","run","fromSpriteSheet","flying","idle","onKeyPress","jumpPressed","W","isHeld","Up","jumpHeld","heldLeft","A","heldRight","D","Right","movementDirection","sign","S","Down","direction","accel","acc","flipHorizontal","updateItemPosition","abs","onCollisionStart","self","other","side","contact","otherBody","owner","get","Fixed","Platform","SolidPlatform","WheelPlatform","center","getFurthestPoint","bounds","onCollisionEnd","lastContact","evt","key","Keys","dropItem","isCarryingItem","pickUpItem","body","addChild","removeChild","offset","position","facing","frame","current","_currentFrame","uglyOffset","sin","handOffset","backOffset","undefined","rotation","DarkGray","isOnPlayform","playerReference","HamsterWheel","linkedMachine","wheel","platform","platformHeight","actions","rotateBy","remainingProcessingTime","max","Circle","getQueue","isComplete","clearActions","rotateTo","Customer","waitingX","desiredProductType","itemActor","Yellow","satisfied","assignedItem","runningTarget","bubble","PreventCollision","scaleTo","updateBubblePosition","drawHeight","PICK_UP_THRESHOLD","goTo","drawWidth","kill","goFetchItem","xPosition","productAssigned","CustomerControl","Transparent","customers","pendingProducts","scheduleCustomersRefresh","timeout","random","MAX_TIMEOUT","MIN_TIMEOUT","setTimeout","filter","c","isKilled","waitingCustomers","MAX_WAITING_CUSTOMERS","product","customer","LOL","push","pop","productType","find","includes","p","ITEM_TIMEOUT","HEIGHT","Machine","manual","isOn","itemQueue","blacklistedItemQueue","isProcessing","maxProcessingTime","tooltip","Middle","shadow","blur","Black","White","intakeStart","intakeEnd","getIntake","intakeActor","Green","shift","newItem","processItem","newActor","getOutlet","toFixed","Brewer","set","Polygon","Paddle","degrees","PI","Grinder","crank","crankSprite","cooldownTimer","isOnCooldown","COOLDOWN","fPressed","opacity","delay","callMethod","LEVELS","maxPoints","getNewRecipes","Error","lever","forEach","station","aiSquirrel","player","grinder","brewer","customerControl","Game","displayMode","FillScreen","antialiasing","curLevelId","isShowDebug","debug","boundsColor","Red","showAll","start","showBounds","loader","Object","values","restart","goToScene","then","removeScene","mainScene","onStart","addScene","statics","R","F4","showDebug","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","d","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","replace","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}