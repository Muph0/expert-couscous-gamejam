{"version":3,"file":"main.js","mappings":"uBAAIA,E,8BCIG,MAAMC,UAAkB,MAG3B,WAAAC,CAAqBC,EAAYC,GAC7BC,MAAM,CACFC,OAAQ,EACRC,cAAe,MAAcC,OAC7BC,EAAG,KAJU,KAAAN,KAAAA,EAFd,KAAAO,qBAA+B,EAQ9BN,IACAO,KAAKC,IAAMR,EAASS,SAGxBF,KAAKG,SAASC,IAAIZ,EAAKa,YAC3B,CAEA,YAAAC,CAAaC,EAAgBC,GACzBR,KAAKS,gBAAkBT,KAAKU,IAAIC,EAAI,GAEpCX,KAAKU,IAAIC,GAAK,GAClB,E,0pBCHJ,IAAIC,EAAW,EAAQ,KACnBC,EAAY,EAAQ,KACpBC,EAAO,EAAQ,KACfC,EAAS,EAAQ,KACjBC,EAAS,EAAQ,IACjBC,EAAY,EAAQ,KACpBC,EAAe,EAAQ,KACvBC,EAAc,EAAQ,KAQ1B,MAAM,EAAY,IAAI,oBACX,KAAAC,KAAO,CACVC,MAAO,IAAI,MAAY,GACvBC,MAAO,IAAI,MAAY,GACvBC,WAAY,IAAI,MAAY,GAC5BC,YAAa,IAAI,MAAY,GAC7BC,SAAU,IAAI,MAAY,GAC1BC,KAAM,IAAI,MAAY,GACtBC,MAAO,IAAI,MAAY,GACvBC,cAAe,IAAI,MAAY,GAC/BC,eAAgB,IAAI,MAAY,GAChCC,cAAe,IAAI,MAAY,GAC/BC,gBAAiB,IAAI,MAAY,GACjCC,MAAO,IAAI,MAAY,GACvBC,OAAQ,IAAI,MAAY,GACxBC,SAAU,IAAI,MAAY,GAC1BC,WAAY,IAAI,MAAY,GAC5BC,SAAU,IAAI,MAAY,GAC1BC,SAAU,IAAI,MAAY,GAC1BC,OAAQ,IAAI,MAAY,GACxBC,WAAY,IAAI,MAAY,GAC5BC,mBAAoB,IAAI,MAAY,GAEpCC,UAAW,IAAI,MAAM5B,GACrB6B,SAAU,IAAI,MAAM9B,GACpB+B,YAAa,IAAI,MAAM5B,GACvB6B,YAAa,IAAI,MAAM5B,GACvB6B,UAAW,IAAI,MAAM/B,GACrBgC,UAAW,IAAI,MAAM7B,GACrB8B,aAAc,IAAI,MAAM7B,GACxB8B,YAAa,IAAI,MAAM7B,IAGlB,KAAA8B,MAAQC,GAAK,IAClB,MAAYC,gBAAgB,CACxBC,MAAOpD,KAAKoB,KAAKK,SACjB4B,KAAM,CACFC,QAAS,EACTC,KAAM,EACNC,aAAc,GACdC,YAAa,QAKhB,KAAAvB,SAAWgB,GAAK,IACrB,MAAYC,gBAAgB,CACxBC,MAAOpD,KAAKoB,KAAKc,SACjBmB,KAAM,CACFC,QAAS,EACTC,KAAM,EACNE,YAAa,GACbD,aAAc,OAI9B,GAEA,SAASN,EAAQQ,GACb,IAAIC,EAEJ,MAAO,KAECA,EAAUD,IAEPC,EAEf,CCtFO,MAAMC,EACT,SAAAvD,GAAsB,OAAO,EAAU4C,QAAQ5C,UAAU,EAAG,EAAI,EAW7D,MAAM,EACT,SAAAA,GAAsB,OAAO,EAAU4C,QAAQ5C,UAAU,EAAG,EAAI,CAEhE,KAAAwD,GACI,OAAO,IAAIC,CACf,CACA,KAAAC,GACI,OAAO,IAAIC,CACf,EAGG,MAAMF,EACT,SAAAzD,GAAsB,OAAO,EAAU4C,QAAQ5C,UAAU,EAAG,EAAI,CAChE,IAAA4D,GACI,OAAO,IAAI,CACf,CACA,KAAAF,GACI,OAAO,IAAIG,CACf,CACA,MAAAC,GACI,OAAO,IAAIC,CACf,EAGG,MAAM,EACT,SAAA/D,GAAsB,OAAO,EAAU4C,QAAQ5C,UAAU,EAAG,EAAI,EAG7D,MAAM2D,EACT,SAAA3D,GAAsB,OAAO,EAAU4C,QAAQ5C,UAAU,EAAG,EAAI,EAG7D,MAAM6D,EACT,SAAA7D,GAAsB,OAAO,EAAU4C,QAAQ5C,UAAU,EAAG,EAAI,EAuB7D,MAAM+D,EACT,SAAA/D,GAAsB,OAAO,EAAU4C,QAAQ5C,UAAU,EAAG,EAAI,EClF7D,MAAMgE,EAIT,WAAA9E,CACa+E,EACAC,GADA,KAAAD,aAAAA,EACA,KAAAC,MAAAA,EAETvE,KAAKwE,QAAUxE,KAAKyE,eAAeC,KAAK1E,MACxCuE,EAAMI,GAAG,UAAW3E,KAAKwE,QAC7B,CAEA,UAAAI,GACI5E,KAAKuE,MAAMM,IAAI,UAAW7E,KAAKwE,QACnC,CAEQ,cAAAC,CAAeK,GACnB9E,KAAKuE,MAAMQ,OAAO9E,IAAMD,KAAKsE,aAAaU,MAAM,IAEhD,MAAMC,EAAOC,KAAKC,IACdC,OAAOC,WAAarF,KAAKsE,aAAa3D,EACtCyE,OAAOE,YAActF,KAAKsE,aAAaiB,GAE3CvF,KAAKuE,MAAMQ,OAAOE,KAAOA,CAE7B,ECtBG,MAAMO,UAAwB,MAEjC,WAAAjG,CAA6BkG,EAAcC,G,YACvChG,QADyB,KAAA+F,KAAAA,EAGzB,MAAQ9E,EAAGgF,EAAGJ,EAAGK,GAAMH,EACjBI,EAAI,GACJC,EAAc,IAEL,QAAX,EAAAJ,aAAM,EAANA,EAAQK,WAAG,WAAUD,EAAOE,KAAK,MAAMC,IAAIN,EAAI,GAAOE,GAAG,SAAI,EAAG,IAAI,SAAI,GAAIA,MAChE,QAAZ,EAAAH,aAAM,EAANA,EAAQQ,YAAI,WAAUJ,EAAOE,KAAK,MAAMC,IAAIN,EAAI,GAAOE,GAAG,SAAI,EAAG,IAAI,SAAI,EAAGD,EAAIC,MACrE,QAAX,EAAAH,aAAM,EAANA,EAAQK,WAAG,WAAUD,EAAOE,KAAK,MAAMC,IAAIJ,EAAGD,GAAG,SAAI,EAAG,IAAI,UAAKC,EAAG,MACzD,QAAX,EAAAH,aAAM,EAANA,EAAQK,WAAG,WAAUD,EAAOE,KAAK,MAAMC,IAAIJ,EAAGD,GAAG,SAAI,EAAG,IAAI,SAAID,EAAIE,EAAG,KAE3E7F,KAAKmG,SAASC,IAAI,IAAI,MAAkBN,GAE5C,ECJG,MAAMO,UAAkB,MAQ3B,WAAA9G,CACY+G,EACAC,GAER7G,QAHQ,KAAA4G,KAAAA,EACA,KAAAC,MAAAA,EATZ,KAAAC,cAAgB,IAAI,MAAM,CAAEC,KAAM,KAClC,KAAAC,UAAY,IAAI,MAAM,CAAED,KAAM,KAW1BzG,KAAK2G,WAAa,EAClB3G,KAAK4G,iBAAmB,EACxB5G,KAAK6G,WAAa,CACdC,gBAAiB,EACjBC,oBAAqB,EACrBC,UAAWT,EAAMU,UACjBC,aAAc,EACdC,YAAa,GAEjBnH,KAAKoH,cAAgB,IAAIC,GAC7B,CAEA,eAAAC,CAAgBC,GACZ,MAAM/H,EAAO+H,EAASC,YACtBxH,KAAK6G,WAAWC,kBAChB9G,KAAK6G,WAAWK,cAAgB1H,EAAKiI,MAErC,MAAMC,EAAexC,KAAKyC,OAAO3H,KAAK2G,WAAa3G,KAAK4G,kBAAoB,KACxEc,EAAe1H,KAAK6G,WAAWE,sBAC/B/G,KAAK6G,WAAWE,oBAAsBW,GAE1C1H,KAAKoH,cAAcQ,WAAWpI,EAAKA,MACnCQ,KAAK6G,WAAWM,YAAcnH,KAAKoH,cAAc3B,KACjDoC,QAAQC,IAAI9H,KAAK6G,WACrB,CAEA,YAAAkB,CAAaxH,GACTP,KAAK4H,IAAI5H,KAAKwG,eAEdxG,KAAKuG,MAAMyB,WAAWhI,MAEtBA,KAAKiI,kBAGL,IAAIC,EAAQ3H,EAAO4H,MAAMC,SAASC,QAClCH,EAAMvD,GAAG,QAAQG,IACb+C,QAAQC,IAAI,SACZ,IAAIQ,EAAQ,IAAIhJ,EAAU,IAAI,GAC9BgJ,EAAMrI,IAAMiI,EAAMK,aAAarI,QAC/BF,KAAK4H,IAAIU,EAAM,IAEnBtI,KAAKwI,QAAQ9C,OAAO+C,SAAU,SAAI,EAAG,KAErC,IAAIpE,EAAYrE,KAAKuG,MAAMd,KAAMzF,MAEjCA,KAAK4H,IAAI,IAAIpC,EAAgBxF,KAAKuG,MAAMd,MAC5C,CAEA,eAAAwC,GACIjI,KAAK0G,UAAY,IAAI,MAAM,CACvBD,KAAM,GACNxG,KAAK,SAAID,KAAKuG,MAAMd,KAAK9E,EAAI,GAAI,IACjC+H,KAAM,IAAI,MAAQ,CACdC,UAAW,MAAaC,KACxBC,UAAW,MAAaC,OACxBC,OAAQ,gBACRtD,KAAM,GACNuD,KAAM,MAAYC,GAClBC,MAAO,MAASC,MAChBC,WAAW,EACXC,OAAQ,CACJC,KAAM,EACNC,QAAQ,SAAI,EAAG,GACfL,MAAO,MAAMM,SAGrBxE,OAAO,SAAI,EAAG,GAAGA,MAAM,MAE3BhF,KAAK4H,IAAI5H,KAAK0G,WACd1G,KAAK4H,IAAI,IAAI,MAAM,CACfnB,KAAM,eACNxG,KAAK,SAAID,KAAKuG,MAAMd,KAAK9E,EAAI,GAAI,IACjC+H,KAAM,IAAI,MAAQ,CACdC,UAAW,MAAaC,KACxBC,UAAW,MAAaC,OACxBC,OAAQ,gBACRtD,KAAM,GACNuD,KAAM,MAAYC,GAClBC,MAAO,MAASC,MAChBC,WAAW,EACXC,OAAQ,CACJC,KAAM,EACNC,QAAQ,SAAI,EAAG,GACfL,MAAO,MAAMM,SAGrBxE,OAAO,SAAI,EAAG,GAAGA,MAAM,MAE/B,CAEA,SAAAyE,CAAUC,EAA+BlJ,GACrC,MAAMmJ,EAAW3J,KAAKuG,MAAMqD,YAAc5J,KAAK2G,WACzCkD,EAAU3E,KAAKyC,MAAMgC,EAAW,KAChCG,EAAU5E,KAAKyC,OAAOgC,EAAqB,GAAVE,EAAe,KAAQ,KAC9D7J,KAAK0G,UAAUD,KAAO,GAAGoD,EAAU,GAAK,IAAMA,EAAUA,KAAWC,EAAU,GAAK,IAAMA,EAAUA,GACtG,CAEA,WAAAC,CAAYxJ,EAAmBC,GAC3BR,KAAK2G,YAAcnG,EACfR,KAAK2G,YAAc3G,KAAKuG,MAAMqD,aAG9B5J,KAAKsG,KAAK0D,eAAehK,KAAK6G,YAG9BtG,EAAO4H,MAAM8B,SAASC,WAAW,MAAQC,IACzCnK,KAAKsG,KAAK8D,WAElB,EC1IG,MAAMC,EAMT,WAAA9K,CACIoB,EACA4E,EACAE,EACA6E,EACApB,EAAemB,EAAUE,KACzBC,EAAmB,MAAUC,QAE7B,MAAMhE,EAAO,IAAI,MAAK,CAClBA,KAAM6D,EACN5B,KAAM,IAAI,MAAK,CACXC,UAAW6B,EACX3B,UAAW,MAAUC,OACrBC,OAAQ,gBACRtD,OACAuD,KAAM,MAASC,GACfC,QACAE,WAAW,MAGnB3C,EAAKzB,OAAQ,SAAI,EAAE,GAAGA,MAAM,IAC5BhF,KAAK0K,OAAS,IAAI,MAClB1K,KAAK0K,OAAOvK,SAASC,IAAIqG,GACzBzG,KAAK2K,MAAM1K,KAAM,SAAIU,EAAI8F,EAAKmE,MAAQ,EAAGrF,EAC7C,CAEA,SAAWoF,GACP,OAAO3K,KAAK0K,MAChB,EAjCO,EAAAG,MAAQ,IAAI,MAAM,IAAK,IAAK,KAC5B,EAAAN,KAAO,IAAI,MAAM,GAAI,GAAI,IACzB,EAAAO,OAAS,IAAI,MAAM,IAAK,IAAK,ICejC,MAAM,EACT,WAAAvL,CACWwL,EACAC,EACAC,GAFA,KAAAF,YAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,OAAAA,CACP,CAEG,IAAAC,CAAK3G,EAAc5D,EAAW4E,GACjC,MAAM4F,EAAO,EAAUlI,QAAQ5C,UAAU,EAAG,GACtC+K,EAAS,EAAUnI,QAAQ5C,UAAU,EAAG,GAExCgL,EAAW,IAAI,MAAM,CAACpL,KAAK,SAAIU,EAAG4E,KACxC8F,EAASlL,SAASyH,IAAI5H,KAAK+K,YAAY1K,aACvCkE,EAAMqD,IAAIyD,GAEV,MAAMC,EAAU,IAAI,MAAM,CAACrL,KAAK,SAAIU,EAAI,GAAQ4E,KAChD+F,EAAQnL,SAASyH,IAAIuD,GACrB5G,EAAMqD,IAAI0D,GAEV,MAAMC,EAAW,IAAI,MAAM,CAACtL,KAAK,SAAIU,EAAI,GAAQ4E,KACjDgG,EAASpL,SAASyH,IAAI5H,KAAKgL,YAAY3K,aACvCkE,EAAMqD,IAAI2D,GAEV,MAAMC,EAAQ,IAAI,MAAM,CAACvL,KAAK,SAAIU,EAAI,GAAQ4E,KAC9CiG,EAAMrL,SAASyH,IAAIwD,GACnB7G,EAAMqD,IAAI4D,GAEV,MAAMC,EAAY,IAAInM,EAAUU,KAAKiL,QAAQ,SAAItK,EAAI,GAAQ4E,IAC7DkG,EAAUC,KAAK9L,cAAgB,MAAc+L,iBAC7CF,EAAUtL,SAASyH,IAAI5H,KAAKiL,OAAO5K,aACnCkE,EAAMqD,IAAI6D,EACd,EAGG,MAAMG,UAAmB,MAM5B,WAAArM,CACY+G,EACAC,EACAsF,EACAC,GAAkB,GAE1BpM,QALQ,KAAA4G,KAAAA,EACA,KAAAC,MAAAA,EACA,KAAAsF,QAAAA,EACA,KAAAC,OAAAA,EAGR9L,KAAK+L,OAAS,IACd/L,KAAK4K,MAAQ,IACb5K,KAAKgM,OAAS,IAAI3H,GAAY,SAAIrE,KAAK4K,MAAO5K,KAAK+L,QAAS/L,MAC5DA,KAAKiM,SAAW,IAAI,KACxB,CAEA,YAAAlE,CAAaxH,GACTP,KAAKkM,gBAAkB,IAAI,MAAM,IAAK,IAAK,KAC3C,MAAMC,EAAa,IAAI,MAAM,CACzBxL,EAAGX,KAAK4K,MAAQ,EAAGrF,EAAGvF,KAAK+L,OAAS,IAExCI,EAAWhM,SAASyH,IAAI,EAAUxG,KAAKe,WAAWiK,YAClDpM,KAAK4H,IAAIuE,GACTnM,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAI,EAAG,GAAI,GAAI,UAAU5K,KAAK6L,QAAU,IAAKxB,EAAUQ,OAAOF,OAElG3K,KAAKiM,SAAW,IAAI5B,EAAUrK,KAAK4K,MAAQ,EAAG,GAAI,GAAI,sBAAuBP,EAAUQ,OAAOF,MAC9F3K,KAAK4H,IAAI5H,KAAKiM,UACdjM,KAAKqM,WAEDrM,KAAK8L,QACL9L,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAG5K,KAAK+L,OAAS,EAAI,GAAI,GAAI,SAAU1B,EAAUE,MAAMI,OAC3F3K,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAG5K,KAAK+L,OAAS,EAAI,GAAI,GAAI,4BAA6B1B,EAAUE,MAAMI,QAG9G3K,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAG5K,KAAK+L,OAAS,EAAI,GAAI,GAAI,wBAAyB1B,EAAUE,MAAMI,MAElH,CAEA,QAAA0B,GACI,MAAMC,EAAUtM,KAAKuG,MAAMgG,gBAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACtBF,EAAQE,GAChBtB,KAAKlL,KAAMA,KAAK4K,MAAQ,EAAI,GAAc5K,KAAK+L,OAAS,EAAI,GAAU,GAAJS,EAAS,EACtF,CACJ,CAEA,WAAAzC,CAAYxJ,EAAgBC,GACpBD,EAAO4H,MAAM8B,SAASC,WAAW,MAAKwC,SAClC1M,KAAK8L,OACL9L,KAAKsG,KAAKqG,YAEV3M,KAAKsG,KAAKsG,mBAGtB,CAIA,YAAAC,CAAaC,GACT9M,KAAKgM,OAAOpH,YAChB,EC/GG,MAAMmI,UAAkB,MAI3B,WAAAxN,CACY+G,GAER5G,QAFQ,KAAA4G,KAAAA,EAGRtG,KAAK+L,OAAS,IACd/L,KAAK4K,MAAQ,IACb5K,KAAKgM,OAAS,IAAI3H,GAAY,SAAIrE,KAAK4K,MAAO5K,KAAK+L,QAAS/L,KAChE,CAEA,YAAA+H,CAAaxH,GACTP,KAAKkM,gBAAkB,IAAI,MAAM,IAAK,IAAK,KAC3C,MAAMc,EAAO,IAAI,MAAM,CACnBrM,EAAGX,KAAK4K,MAAQ,EAAGrF,EAAGvF,KAAK+L,OAAS,IAExCiB,EAAK7M,SAASyH,IAAI,EAAUxG,KAAKM,KAAK0K,YACtCpM,KAAK4H,IAAIoF,GACThN,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAG5K,KAAK+L,OAAS,EAAI,GAAI,GAAI,qDAAqDpB,OACtH3K,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAG5K,KAAK+L,OAAS,EAAI,GAAI,GAAI,yBAAyBpB,MAC9F,CAEA,WAAAZ,CAAYxJ,EAAgBC,GACpBD,EAAO4H,MAAM8B,SAASC,WAAW,MAAKwC,QACtC1M,KAAKsG,KAAK2G,gBAElB,CAEA,YAAAJ,CAAaC,GACT9M,KAAKgM,OAAOpH,YAChB,EC/BG,MAAMsI,UAAmB,MAM5B,WAAA3N,CACY+G,EACAuF,EACAhF,GAERnH,QAJQ,KAAA4G,KAAAA,EACA,KAAAuF,QAAAA,EACA,KAAAhF,WAAAA,EAGR,MAAMsG,EAAQtG,EAAWK,aAAeL,EAAWG,UACnDhH,KAAKoN,YAAcD,EAAQ,IACrB,EACCA,EAAQ,IAAO,EAAI,EAC1BnN,KAAK+L,OAAS,IACd/L,KAAK4K,MAAQ,IACb5K,KAAKgM,OAAS,IAAI3H,GAAY,SAAIrE,KAAK4K,MAAO5K,KAAK+L,QAAS/L,KAEhE,CAEA,YAAA+H,CAAaxH,GACTP,KAAKkM,gBAAkB,IAAI,MAAM,IAAK,IAAK,KAC3C,MAAMC,EAAa,IAAI,MAAM,CACzBxL,EAAGX,KAAK4K,MAAQ,EAAGrF,EAAGvF,KAAK+L,OAAS,IAExCI,EAAWhM,SAASyH,IAAI,EAAUxG,KAAKe,WAAWiK,YAClDpM,KAAK4H,IAAIuE,GACTnM,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAI,EAAG,GAAI,GAAI,UAAU5K,KAAK6L,QAAU,IAAKxB,EAAUQ,OAAOF,OAElG,MAAM0C,EAAoC,GAApBrN,KAAKoN,YAAmB,cAAqC,GAApBpN,KAAKoN,YAAmB,aAAe,oBACtGpN,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAI,EAAG,GAAI,GAAIyC,EAAehD,EAAUE,MAAMI,OAElF,IAAK,IAAI6B,EAAI,EAAGA,GAAK,EAAGA,IAAK,CACzB,MAAMpJ,EAAQoJ,GAAKxM,KAAKoN,YAAc,EAAUhM,KAAKgB,SAAW,EAAUhB,KAAKiB,SACzEiL,EAAO,IAAI,MAAM,CAAC3M,EAAGX,KAAK4K,MAAQ,EAAc,IAAT4B,EAAI,GAASjH,EAAGvF,KAAK+L,OAAS,IAC3EuB,EAAKnN,SAASyH,IAAIxE,EAAMgJ,YACxBpM,KAAK4H,IAAI0F,EACb,CAEAtN,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAI,GAAI,IAAK,GAAI,aAAa5K,KAAK6G,WAAWK,eAAgBmD,EAAUQ,MAAO,MAAUjC,MAAM+B,OACnI3K,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAI,GAAI,IAAK,GAAI,uBAAuB5K,KAAK6G,WAAWC,kBAAmBuD,EAAUQ,MAAO,MAAUjC,MAAM+B,OAChJ3K,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAI,GAAI,IAAK,GAAI,mBAAmB5K,KAAK6G,WAAWE,wBAAyBsD,EAAUQ,MAAO,MAAUjC,MAAM+B,OAIlJ3K,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAG,IAAK,GAAI,yBAA0BP,EAAUE,MAAMI,OAC1F3K,KAAK4H,IAAI,IAAIyC,EAAUrK,KAAK4K,MAAQ,EAAG,IAAK,GAAI,+BAAgCP,EAAUE,MAAMI,MACpG,CAEA,WAAAZ,CAAYxJ,EAAgBC,GACpBD,EAAO4H,MAAM8B,SAASC,WAAW,MAAKqD,IACtCvN,KAAKsG,KAAKsG,mBAEXrM,EAAO4H,MAAM8B,SAASC,WAAW,MAAKsD,IACrCxN,KAAKsG,KAAKmH,eAElB,CAEA,YAAAZ,CAAaC,GACT9M,KAAKgM,OAAOpH,YAChB,EClDG,MAAM,UAAe,MAyDxB,YAAmBjE,EAAW4E,GAC1B7F,MAAM,CACFO,KAAK,SAAIU,EAAG4E,GACZzF,EAAG,IACH8K,MAAO,GACPmB,OAAQ,GACR7C,MAAO,IAAI,MAAM,IAAK,IAAK,KAC3BtJ,cAAe,MAAc8N,QAC7BvH,SAAU,MAAMF,IAAI,GAAI,MAhEhC,KAAA0H,QAAU,IACV,KAAAC,aAA8B,GAAf5N,KAAK2N,QAEpB,KAAAE,aAAe,IACf,KAAAC,aAAe,IACf,KAAAC,kBAAwC,EAApB/N,KAAK8N,aAEzB,KAAAE,sBAAwB,IAExB,KAAAC,WAAa,IAEb,KAAAC,WAAY,EACL,KAAAC,iBAAmB,EAE1B,KAAAC,iBAAkB,EAClB,KAAAC,YAAa,EACb,KAAAC,gBAAiB,EAGV,KAAAC,mBAAoB,EAEnB,KAAAC,aAAiC,KAEzC,KAAAC,WAAa,CACTC,IAAK,MAAaC,gBACd,MAAexL,gBAAgB,CAC3BC,MAAO,EAAUhC,KAAKG,WACtB8B,KAAM,CACFC,QAAS,EACTC,KAAM,EACNE,YAAa,IACbD,aAAc,MAElB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAC/BoL,OAAQ,MAAaD,gBACjB,MAAexL,gBAAgB,CAC3BC,MAAO,EAAUhC,KAAKG,WACtB8B,KAAM,CACFC,QAAS,EACTC,KAAM,EACNE,YAAa,IACbD,aAAc,MAElB,CAAC,EAAG,GAAI,KAChBqL,KAAM,MAAaF,gBACf,MAAexL,gBAAgB,CAC3BC,MAAO,EAAUhC,KAAKI,YACtB6B,KAAM,CACFC,QAAS,EACTC,KAAM,EACNE,YAAa,GACbD,aAAc,MAElB,CAAC,EAAG,EAAG,EAAG,GAAI,MActB,EAAUpC,KAAKsB,SAASoM,OAAS,EACjC,EAAU1N,KAAKsB,SAASqM,MAAO,EAC/B,EAAU3N,KAAKsB,SAASsM,MAC5B,CAEA,YAAAjH,CAAaxH,GACTA,EAAO4H,MAAM8B,SAAStF,GAAG,QAAS3E,KAAKiP,WAAWvK,KAAK1E,MAC3D,CAEA,YAAAM,CAAaC,EAAgBC,GACzB,MAAM0O,EAAc3O,EAAO4H,MAAM8B,SAASC,WAAW,MAAKvE,IAAMpF,EAAO4H,MAAM8B,SAASC,WAAW,MAAKiF,IAChGC,EAAW7O,EAAO4H,MAAM8B,SAASoF,OAAO,MAAK1J,IAAMpF,EAAO4H,MAAM8B,SAASoF,OAAO,MAAKF,IAEvFD,GACA,EAAU9N,KAAKqB,UAAUuM,KAAK,KAElC,MAAMM,EAAW/O,EAAO4H,MAAM8B,SAASoF,OAAO,MAAKE,IAAMhP,EAAO4H,MAAM8B,SAASoF,OAAO,MAAKzG,MACrF4G,EAAYjP,EAAO4H,MAAM8B,SAASoF,OAAO,MAAKI,IAAMlP,EAAO4H,MAAM8B,SAASoF,OAAO,MAAKK,OAE5F,IAAIC,EAAoBzK,KAAK0K,KAAK5P,KAAKU,IAAIC,GAK3C,GAHAX,KAAKsO,eAAiB/N,EAAO4H,MAAM8B,SAASoF,OAAO,MAAKQ,IAAMtP,EAAO4H,MAAM8B,SAASoF,OAAO,MAAKS,MAG5FR,GAAYE,EAAW,CACvB,IAAIO,EAAY,EAEZT,IAAUS,GAAa,GACvBP,IAAWO,GAAa,GAG5B,IAAIC,GAASD,GAAaJ,EAAoB3P,KAAK+N,kBAAoB/N,KAAK8N,cACtEiC,EAGD/P,KAAKqO,aAAY2B,GAAShQ,KAAKgO,uBAEpChO,KAAKiQ,IAAItP,EAAIqP,EAEbhQ,KAAKmO,iBAAmB4B,CAC5B,MACI/P,KAAKiQ,IAAItP,EAAI,EACbX,KAAKU,IAAIC,GAAK,IAEdX,KAAKmO,iBAAmB,EA6E5B,IA1E8B,GAA1BnO,KAAKmO,iBACLnO,KAAKG,SAAS+P,gBAAiB,EACC,GAAzBlQ,KAAKmO,mBACZnO,KAAKG,SAAS+P,gBAAiB,GAGnClQ,KAAKU,IAAIC,GAAI,SAAMX,KAAKU,IAAIC,GAAIX,KAAK6N,aAAc7N,KAAK6N,cAGpDqB,GAAelP,KAAKqO,aACpBrO,KAAKU,IAAI6E,GAAKvF,KAAKiO,WACnBjO,KAAKqO,YAAa,EAClBrO,KAAKkO,WAAY,GAIjBlO,KAAKsO,iBAAmBtO,KAAKuO,oBAC7BvO,KAAKqO,YAAa,EAClBrO,KAAKkO,WAAY,GAIjBkB,GAAYlK,KAAK0K,KAAK5P,KAAKU,IAAI6E,GAAK,EACpCvF,KAAKiQ,IAAI1K,EAAIvF,KAAK4N,aAElB5N,KAAKiQ,IAAI1K,EAAIvF,KAAK2N,QAIjB3N,KAAKqO,WAMFrO,KAAKkO,UACwB,GAAzBlO,KAAKmO,kBACLnO,KAAKG,SAASC,IAAIJ,KAAKyO,WAAWI,MAClC7O,KAAKG,SAASoJ,QAAS,SAAI,EAAG,GAC9BvJ,KAAKmQ,mBAAmB,UAGxBnQ,KAAKG,SAASC,IAAIJ,KAAKyO,WAAWC,KAClC1O,KAAKG,SAASoJ,QAAS,SAAI,EAAG,GAC9BvJ,KAAKmQ,mBAAmB,SAKvBjL,KAAKkL,IAAIpQ,KAAKU,IAAIC,GAAK,IAC5BX,KAAKG,SAASC,IAAIJ,KAAKyO,WAAWI,MAClC7O,KAAKG,SAASoJ,QAAS,SAAI,EAAG,GAC9BvJ,KAAKmQ,mBAAmB,UAGxBnQ,KAAKG,SAASC,IAAIJ,KAAKyO,WAAWC,KAClC1O,KAAKG,SAASoJ,QAAS,SAAI,EAAG,GAC9BvJ,KAAKmQ,mBAAmB,UA3B5BnQ,KAAKG,SAASC,IAAIJ,KAAKyO,WAAWG,QAClC5O,KAAKG,SAASoJ,QAAS,SAAI,EAAG,GAC9BvJ,KAAKmQ,mBAAmB,SA8BxBnQ,KAAKqO,aACLrO,KAAKiQ,IAAI1K,EAAI,EACbvF,KAAKU,IAAI6E,EAAI,GAGbvF,KAAKkO,YACLlO,KAAKiQ,IAAItP,EAAI,EACbX,KAAKU,IAAIC,EAAI,GAGjBX,KAAKoO,gBAAkBpO,KAAKqO,WAEvBrO,KAAKkO,UAUuB,GAAzBlO,KAAKmO,iBACL,EAAU/M,KAAKsB,SAASoM,OAAS,EAEjC,EAAU1N,KAAKsB,SAASoM,OAAS,QAbpB,CACjB,IAAIuB,EAECA,EADDrQ,KAAKqO,WACOnJ,KAAKC,IAAID,KAAKkL,IAAIpQ,KAAKU,IAAIC,GAAKX,KAAK6N,aAAe,EAAG,GAEvD,EAGhB,EAAUzM,KAAKsB,SAASoM,OAAoB,IAAXuB,CACrC,CAQArQ,KAAKC,IAAIU,GAAI,SAAMX,KAAKC,IAAIU,EAAG,GAAI,IACvC,CAEA,gBAAA2P,CACIC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAYH,EAAMI,MAAMC,IAAI,QAE9BF,aAAS,EAATA,EAAW/Q,iBAAkB,MAAckR,QAASH,aAAS,EAATA,EAAW/Q,iBAAkB,MAAc8N,UAE1F+C,IAAS,MAAK3H,SAAW9I,KAAKsO,gBAAkBqC,EAAUC,iBAAiB,GAAaD,EAAUC,iBAAiB,KACpH5Q,KAAKqO,YAAa,EAEdsC,EAAUC,iBAAiBG,IAC3B/Q,KAAKkO,WAAY,EACjBlO,KAAKC,IAAIU,EAAI6P,EAAMQ,OAAOrQ,GAK9BX,KAAKC,IAAIsF,EAAIiL,EAAMS,kBAAiB,SAAI,GAAI,IAAI1L,EAC1CgL,EAAKzK,OAAOiG,OAAS,EAAI,GAG3C,CAEA,cAAAmF,CAAeX,EAAgBC,EAAiBC,EAAYU,GACxDzR,MAAMwR,eAAeX,EAAMC,EAAOC,EAAMU,GAExC,MAAMR,EAAYH,EAAMI,MAAMC,IAAI,QAG9BF,aAAS,EAATA,EAAWC,iBAAiB,GAAYD,EAAU1Q,IAAIsF,EAAIvF,KAAKC,IAAIsF,IACnEvF,KAAKqO,YAAa,EAE1B,CAEA,UAAAY,CAAWmC,GACHA,EAAIC,MAAQ,MAASC,KAAK5E,OAC1B1M,KAAKuR,UAEb,CAEA,cAAAC,GACI,OAA6B,MAArBxR,KAAKwO,YACjB,CAEA,UAAAiD,CAAWjS,GACPQ,KAAKwO,aAAehP,EACpBA,EAAKkM,KAAK9L,cAAgB,MAAiB8N,QAC3C1N,KAAK0R,SAAS1R,KAAKwO,aACvB,CAEA,QAAA+C,G,MACQvR,KAAKwO,eACLxO,KAAK2R,YAAY3R,KAAKwO,cAEtBxO,KAAKwO,aAAavO,IAAMD,KAAKC,IAAIC,QAAQ0H,IAAI5H,KAAKwO,aAAajF,QAC/DvJ,KAAKwO,aAAa9N,IAAM,MAAOV,KAAKU,IAAIC,EAAI,EAAGX,KAAKU,IAAI6E,EAAI,IAE5DvF,KAAKwO,aAAa9C,KAAK9L,cAAgB,MAAiBC,OAExDG,KAAKwO,aAAajF,QAAS,SAAI,EAAG,GAExB,QAAV,EAAAvJ,KAAKuE,aAAK,SAAEqD,IAAI5H,KAAKwO,cAErBxO,KAAKwO,aAAe,KAE5B,CAEQ,kBAAA2B,CAAmByB,GACvB,IAAIC,EAAS7R,KAAKG,SAAS+P,eAEvB4B,EAAS9R,KAAKG,SAAS4R,QAAgBC,cACvCC,EAAc/M,KAAKgN,IAAIJ,GAEvBK,GAAa,SAAIN,GAAU,GAAK,GAAI,EAAII,GACxCG,GAAa,SAAIP,GAAU,GAAK,GAAI,EAAII,GAEnBI,MAArBrS,KAAKwO,eACLxO,KAAKwO,aAAarO,SAAS+P,eAAiB2B,EAGxC7R,KAAKwO,aAAajF,OADN,QAAZqI,EAC2BO,EAGAC,EAGvC,ECxTG,MAAM,UAAiB,MAC1B,WAAA7S,CAAYoB,EAAW4E,EAAWqF,EAAemB,EAAgBuG,EAAmB,EAAG1S,EAA+B,MAAc8N,SAChIhO,MAAM,CACFO,IAAK,MAAOU,EAAG4E,GACfqF,MAAOA,EACPmB,OAAQA,EACR7C,MAAO,MAAMqJ,YACb3S,cAAeA,IAGnBI,KAAKsS,SAAWA,EAEH,IAAT1H,GACA5K,KAAKG,SAASC,IAAI,EAAUgB,KAAKU,cAAcsK,YACtC,IAATxB,EACA5K,KAAKG,SAASC,IAAI,EAAUgB,KAAKQ,cAAcwK,YACjC,IAATxB,GACL5K,KAAKG,SAASC,IAAI,EAAUgB,KAAKS,eAAeuK,WACxD,EAGG,MAAM,UAAsB,EAC/B,gBAAAkE,CACIC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAYH,EAAMI,MAAMC,IAAI,OAE9BF,EAAUC,iBAAiB,IAC3BD,EAAUC,MAAMrC,mBAAoB,EACpCoC,EAAUC,MAAMvC,YAAa,EAErC,CAEA,cAAA6C,CAAeX,EAAgBC,EAAiBC,EAAYU,GAExD,GAAmB,MAAfX,EAAMI,MACN,OAEJ,MAAMD,EAAYH,EAAMI,MAAMC,IAAI,OAE9BF,EAAUC,iBAAiB,IAC3BD,EAAUC,MAAMrC,mBAAoB,EAE5C,EAGG,MAAMwC,UAAsB,EAAnC,c,oBACW,KAAAyB,cAAe,EACf,KAAAzC,UAAa,CAiCxB,CA7BI,YAAAzP,CAAaC,EAAgBC,GACrBR,KAAKyS,iBAAmBzS,KAAKyS,gBAAgBpE,aAC7CrO,KAAK+P,UAAY/P,KAAKyS,gBAAgBtE,iBACtCnO,KAAKwS,aAAexS,KAAKyS,gBAAgBvE,UAEjD,CAEA,gBAAAoC,CACIC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAYH,EAAMI,MAAMC,IAAI,OAE9BF,EAAUC,iBAAiB,IAC3B5Q,KAAKyS,gBAAkB9B,EAAUC,MAEzC,CAEA,cAAAM,CAAeX,EAAgBC,EAAiBC,EAAYU,GACtCX,EAAMI,MAAMC,IAAI,OAEpBD,iBAAiB,IAC3B5Q,KAAKyS,qBAAkBJ,EACvBrS,KAAK+P,UAAY,EAEzB,ECjFG,MAAM,WAAqB,MAM9B,WAAAxQ,CAAYoB,EAAW4E,EAAW5F,EAAgB+S,GAC9ChT,MAAM,CAAEO,IAAK,MAAOU,EAAG4E,KAEvBvF,KAAK0S,cAAgBA,EAGrB1S,KAAK2S,MAAQ,IAAI,MAAS,CACtBhT,OAAQA,EACRuJ,MAAO,MAAS0J,KAChB5N,OAAO,SAAI,IAAK,OAGpBhF,KAAK2S,MAAMxS,SAASC,IAAI,EAAUgB,KAAKY,MAAMoK,YAM7CpM,KAAK6S,SAAW,IAAI9B,EAAc,EAAGpR,EAASmT,EAJxB,GACC,IAMvB9S,KAAK0R,SAAS1R,KAAK2S,OACnB3S,KAAK0R,SAAS1R,KAAK6S,SACvB,CAEA,YAAAvS,CAAaC,EAAgBC,GACM,GAA3BR,KAAK6S,SAAS9C,WAAkB/P,KAAK6S,SAASL,eAC9CxS,KAAK2S,MAAMI,QAAQC,SAAShT,KAAK6S,SAAS9C,UAAY,GAAI,KAEhCsC,MAAtBrS,KAAK0S,gBACL1S,KAAK0S,cAAcO,wBAA0B/N,KAAKgO,IAAIlT,KAAK0S,cAAcO,wBAA0BzS,EAAQ,IAAM,IAG7H,ECtCuB,MCCpB,MAAM2S,WAAiB,MA+C1B,WAAA5T,CAAY6T,EAAkBC,EAAgBC,GAC1C5T,MAAM,CACFO,IAAK,MAAOmT,EAAUC,EAAS,IAC/BzI,MAAO,GACPmB,OAAQ,GACR7C,MAAO,MAASqK,OAChB3T,cAAe,MAAiB+L,iBAChC7L,EAAG,IAjDH,KAAA2O,WAAa,CACjBC,IAAK,MAAaC,gBACd,MAAexL,gBAAgB,CAC3BC,MAAO,EAAUhC,KAAKG,WACtB8B,KAAM,CACFC,QAAS,EACTC,KAAM,EACNE,YAAa,IACbD,aAAc,MAElB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,KAC/BoL,OAAQ,MAAaD,gBACjB,MAAexL,gBAAgB,CAC3BC,MAAO,EAAUhC,KAAKG,WACtB8B,KAAM,CACFC,QAAS,EACTC,KAAM,EACNE,YAAa,IACbD,aAAc,MAElB,CAAC,EAAG,GAAI,KAChBqL,KAAM,MAAaF,gBACf,MAAexL,gBAAgB,CAC3BC,MAAO,EAAUhC,KAAKI,YACtB6B,KAAM,CACFC,QAAS,EACTC,KAAM,EACNE,YAAa,GACbD,aAAc,MAElB,CAAC,EAAG,EAAG,GAAI,MAKhB,KAAAgQ,WAAqB,EACpB,KAAAC,aAAiC,KACjC,KAAAtF,iBAAkC,KAClC,KAAAuF,cAA+B,KAE/B,KAAAlF,aAAiC,KAWrCxO,KAAKwH,YAAc8L,EAGnBtT,KAAK2T,OAAS,IAAI,MAAS,CACvB1T,IAAK,MAAO,GAAI,IAChBsJ,OAAQ,MAAO,GAAI,IACnBqB,MAAO,GACPmB,OAAQ,GACRnM,cAAe,MAAiB+L,iBAChC7L,EAAG,IAGPE,KAAK2T,OAAOxT,SAASC,IAAI,EAAUgB,KAAKkB,OAAO8J,YAC/CpM,KAAK2T,OAAO3O,OAAQ,SAAI,EAAG,GAE3B,IAAI4O,EAAY,IAAItU,EAAUgU,EAAe9T,MAC7CoU,EAAU3T,KAAM,SAAI,GAAI,IACxB2T,EAAUlI,KAAK9L,cAAgB,MAAc+L,iBAC7CiI,EAAU9T,EAAI,GACdE,KAAK2T,OAAOjC,SAASkC,GAGrB5T,KAAK0R,SAAS1R,KAAK2T,OACvB,CAEA,UAAAlC,CAAWjS,GACPQ,KAAKwO,aAAehP,EACpBA,EAAKkM,KAAK9L,cAAgB,MAAiB+L,iBAC3CnM,EAAKS,KAAM,SAAI,EAAG,GAClBT,EAAKkB,KAAM,SAAI,EAAG,GAClBlB,EAAKiB,gBAAkB,EAEvBjB,EAAK8S,SAAW,EAChBtS,KAAK0R,SAAS1R,KAAKwO,cAEnBxO,KAAK2T,OAAOZ,QAAQc,SAAQ,SAAI,EAAG,IAAI,SAAI,EAAG,IAClD,CAEQ,oBAAAC,GACJ,IAAIhC,EAAS9R,KAAKG,SAAS4R,QAAgBC,cACvCC,EAAc/M,KAAKgN,IAAIJ,GAE3B9R,KAAK2T,OAAO1T,IAAM,MAAO,GAAI,GAAKgS,EACtC,CAEQ,kBAAA9B,CAAmByB,GACvB,IAAIC,EAAS7R,KAAKG,SAAS+P,eAEvB4B,EAAS9R,KAAKG,SAAS4R,QAAgBC,cACvCC,EAAa/M,KAAKgN,IAAIJ,GAEtBK,GAAa,SAAIN,GAAU,GAAK,GAAI,EAAII,GACxCG,GAAa,SAAIP,GAAU,GAAK,GAAI,EAAII,GAEnBI,MAArBrS,KAAKwO,eACLxO,KAAKwO,aAAarO,SAAS+P,eAAiB2B,EAGxC7R,KAAKwO,aAAajF,OADN,QAAZqI,EAC2BO,EAGAC,EAGvC,CAEA,YAAA9R,CAAaC,EAAgBC,GACE,OAAvBR,KAAK0T,eACL1T,KAAKmO,iBAAmBjJ,KAAK0K,KAAK5P,KAAK0T,cAAgB1T,KAAKC,IAAIU,GAE5DuE,KAAKkL,IAAIpQ,KAAK0T,cAAgB1T,KAAKC,IAAIU,GAAKwS,GAASY,oBACrD/T,KAAK0T,cAAgB,KAEjB1T,KAAKyT,eACLzT,KAAKwT,WAAY,EACjBxT,KAAKyR,WAAWzR,KAAKyT,cACrBzT,KAAKgU,KAAK,QAIbhU,KAAKwT,YACNxT,KAAKmO,iBAAmB,MAI5BnO,KAAKwT,WAAaxT,KAAKC,IAAIU,EAAIJ,EAAO0T,UAAYjU,KAAK4K,QACvD/C,QAAQC,IAAI,oBACZ9H,KAAKkU,QAGqB,OAA1BlU,KAAKmO,iBACLnO,KAAKiQ,IAAItP,EAAIwS,GAASrF,aAAe9N,KAAKmO,kBAE1CnO,KAAKiQ,IAAItP,EAAI,EACbX,KAAKU,IAAIC,GAAK,MAGY,GAA1BX,KAAKmO,kBACLnO,KAAKG,SAAS+P,gBAAiB,EAC/BlQ,KAAKG,SAASC,IAAIJ,KAAKyO,WAAWC,KAClC1O,KAAKG,SAASoJ,QAAS,SAAI,EAAG,GAC9BvJ,KAAKmQ,mBAAmB,SACQ,GAAzBnQ,KAAKmO,kBACZnO,KAAKG,SAAS+P,gBAAiB,EAC/BlQ,KAAKG,SAASC,IAAIJ,KAAKyO,WAAWC,KAClC1O,KAAKG,SAASoJ,QAAS,SAAI,EAAG,GAC9BvJ,KAAKmQ,mBAAmB,UAExBnQ,KAAKG,SAASC,IAAIJ,KAAKyO,WAAWI,MAClC7O,KAAKG,SAASoJ,QAAS,SAAI,EAAG,GAC9BvJ,KAAKmQ,mBAAmB,SAE5BnQ,KAAKU,IAAIC,GAAI,SAAMX,KAAKU,IAAIC,GAAIwS,GAAStF,aAAcsF,GAAStF,cAEhE7N,KAAK8T,sBACT,CAEA,WAAAK,CAAY3U,GACRQ,KAAK0T,cAAgBlU,EAAKS,IAAIU,EAC9BX,KAAKyT,aAAejU,EACpBA,EAAKO,qBAAsB,CAC/B,CAEA,IAAAiU,CAAKI,GACDpU,KAAK0T,cAAgBU,CACzB,CAEA,eAAAC,GACI,OAA4B,MAArBrU,KAAKyT,YAChB,EAxLwB,GAAA5F,aAAe,IACf,GAAAC,aAAe,IACf,GAAAiG,kBAAoB,GCJzC,MAAM,WAAwB,MAcjC,WAAAxU,CAAYgF,EAAkB5D,EAAW4E,EAAWqF,EAAe0J,EAA6BvI,EAAiB,IAC7GrM,MAAM,CACFO,KAAK,SAAIU,EAAG4E,GACZwG,OAAQA,EACRnB,MAAOA,EACP1B,MAAO,MAAMqJ,YACb3S,cAAe,MAAc8N,UAX7B,KAAA6G,UAAwB,GACxB,KAAAC,gBAA+B,GAanCxU,KAAKyU,UAAYlQ,EACjBvE,KAAKsU,aAAeA,CACxB,CAEA,UAAAI,GACI,MAAMC,EAA8B,GACpC3U,KAAKsU,aAAaM,QAAO,CAAC3E,EAAKzQ,EAAMgN,KACjCmI,EAAkBnI,GAAKyD,EAAMzQ,EAAKqV,aAC3BF,EAAkBnI,KAC1B,GAEH,MAAMsI,EAAS5P,KAAK4P,SAAWH,EAAkBA,EAAkBlI,OAAS,GAE5E,OAAOzM,KAAKsU,aAAaK,EAAkBI,WAAUC,GAAoBF,EAASE,IACtF,CAEA,YAAAjN,CAAaxH,GACTP,KAAKiV,yBAAyB1U,EAClC,CAEQ,wBAAA0U,CAAyB1U,GAC7B,MAAM2U,EAAUhQ,KAAK4P,UAAY,GAAgBK,YAAc,GAAgBC,aAAe,GAAgBA,YACxG7Q,EAAQvE,KAAKyU,UACL,OAAVlQ,GAEJ8Q,YAAW,KACPrV,KAAKuU,UAAYvU,KAAKuU,UAAUe,QAAOC,IAAMA,EAAEC,aAC/C,IAAIC,EAAmBzV,KAAKuU,UAAUe,QAAOC,IAAMA,EAAElB,oBACrD,GAAIoB,EAAiBhJ,OAAS,GAAgBiJ,sBAAuB,CACjE7N,QAAQC,IAAI,oBAEZ,MAAM6N,EAAU3V,KAAK0U,aACftB,EAAWpT,KAAK4K,MAAQ,GAAgBgL,gBACxCrO,EAAW,IAAI4L,GAASC,EAAUpT,KAAKC,IAAIsF,EAAI,GAAIoQ,GAErDzQ,KAAK4P,SAAW,GAChB,EAAU1T,KAAKuB,YAAYqM,KAAK,IAEhC,EAAU5N,KAAKwB,YAAYoM,KAAK,IAGpChP,KAAKuU,UAAUvO,KAAKuB,GACpBkO,EAAmBzV,KAAKuU,UAAUe,QAAOC,IAAMA,EAAElB,oBAEjD,IAAK,IAAI7H,EAAI,EAAGA,EAAIiJ,EAAiBhJ,OAAQD,IACzCiJ,EAAiBjJ,GAAGwH,KAAKhU,KAAK4K,MAAQ,GAAgBgL,iBAAmBH,EAAiBhJ,OAASD,IAGvGjI,EAAMqD,IAAIL,EACd,CAEAvH,KAAKiV,yBAAyB1U,EAAO,GACtC2U,EACP,CAEA,gBAAA5E,CAAiBC,EAAgBC,EAAiBC,EAAYC,GAC1D,MAAMkD,EAAYpD,EAAMI,MACxB,KAAMgD,aAAqBtU,GAAY,OACvC,GAAIsU,EAAU7T,oBAAqB,OAEnC,IAAIP,EAAOoU,EAAUpU,KAErB,MAAM+H,EAAWvH,KAAKuU,UAAUsB,MAAKN,IAChCA,EAAE/B,YAAc+B,EAAElB,mBAAqByB,OAAOC,eAAeR,EAAE/N,YAAYhI,OAASsW,OAAOC,eAAevW,KAG3G+H,GACAA,EAAS4M,YAAYP,GACrB/L,QAAQC,IAAI,gBACZ9H,KAAKyU,UAAUnN,gBAAgBC,KAG/BvH,KAAKwU,gBAAgBxO,KAAK4N,GAK1ByB,YAAW,KAEHrV,KAAKwU,gBAAgBwB,SAASpC,KAAeA,EAAU7T,sBAEvDC,KAAKwU,gBAAkBxU,KAAKwU,gBAAgBc,QAAOzP,GAAKA,IAAM+N,IAE9DA,EAAUb,QAAQkD,KAAK,EAAG,KAAMC,YAAW,KACvCtC,EAAUM,MAAM,IAExB,GACD,GAAgBiC,cAE3B,EA/GwB,GAAAC,OAAS,IACT,GAAAhB,YAAc,IACd,GAAAD,YAAc,IACd,GAAAO,sBAAwB,EACxB,GAAAS,aAAe,IACf,GAAAP,gBAAkB,GCEvC,MAAeS,WAAgB,MAkBlC,WAAA9W,CAAYmG,EAAoB4Q,GAAkB,EAAOC,GACrD7W,MAAM,CACFwJ,MAAO,MAAM0J,KACbhT,cAAe,MAAckR,SAC1BpL,IArBJ,KAAA8Q,MAAgB,EAIf,KAAAC,UAA8B,GAC9B,KAAAC,qBAAyC,GAEzC,KAAAC,cAAwB,EAGzB,KAAA1D,wBAA0B,EAC1B,KAAA2D,kBAAoB,IAavB5W,KAAKsW,OAASA,EAEdtW,KAAKuW,MAAQA,EAGbvW,KAAK6W,QAAU,IAAI,MAAM,CACrBpQ,KAAM,GACNxG,KAAK,SAAI,EAAG,GACZyI,KAAM,IAAI,MAAK,CACXC,UAAW,MAAU8B,OACrB5B,UAAW,MAAUiO,OACrBzN,OAAQ,CACJC,KAAM,EACNC,QAAQ,SAAI,EAAG,GACfL,MAAO,MAAMC,OAEjBJ,OAAQ,aACRtD,KAAM,GACNuD,KAAM,MAASC,GACfC,MAAO,MAAMM,MACbJ,WAAW,MAInBpJ,KAAK6W,QAAQ/W,EAAI,IAEjB,IAAKiX,EAAaC,GAAahX,KAAKiX,YACpCjX,KAAKkX,YAAc,IAAI,MAAM,CACzBjX,IAAK8W,EAAYnP,IAAIoP,GAAWhS,MAAM,IACtC4F,MAAOoM,EAAUrW,EAAIoW,EAAYpW,EACjCoL,OAAQiL,EAAUzR,EAAIwR,EAAYxR,EAClC3F,cAAe,MAAckR,MAC7B5H,MAAO,MAAMqJ,cAEjBvS,KAAKkX,YAAYvS,GAAG,kBAAkBG,IAClC,GAAI9E,KAAKwW,MAAQ1R,EAAE0L,iBAAiBlR,EAAW,CAC3C,MAAMsU,EAAY9O,EAAE0L,MAEfxQ,KAAKyW,UAAUT,SAASpC,IAAe5T,KAAK0W,qBAAqBV,SAASpC,IAC3E5T,KAAKyW,UAAUzQ,KAAK4N,EAE5B,KAGJ5T,KAAK0R,SAAS1R,KAAKkX,aACnBlX,KAAK0R,SAAS1R,KAAK6W,QACvB,CAKA,YAAAvW,CAAaC,EAAgBC,G,UACzB,GAAKR,KAAK2W,aASN,GAAI3W,KAAKiT,yBAA2B,EAAG,CACnC,MAAMW,EAAY5T,KAAKyW,UAAUU,QAEjCvD,EAAUM,OACVlU,KAAK2W,cAAe,EAEV,QAAV,EAAA3W,KAAKuW,aAAK,SAAEa,OAEZpX,KAAKiT,wBAA0B,EAC/BjT,KAAK6W,QAAQpQ,KAAO,GAEpB,IAAI4Q,EAAUrX,KAAKsX,YAAY1D,EAAUpU,MAEpC6X,IACDA,EAAU,IAAIzT,GAGlB,MAAM2T,EAAW,IAAIjY,EAAU+X,GAC/BE,EAAStX,IAAMD,KAAKwX,YAAY5P,IAAI5H,KAAKC,KAEzCsX,EAAS7W,KAAM,SAAIwE,KAAK4P,SAAU,IAElC9U,KAAK0W,qBAAqB1Q,KAAKuR,GACrB,QAAV,EAAAvX,KAAKuE,aAAK,SAAEqD,IAAI2P,EAEpB,MACSvX,KAAKsW,SACNtW,KAAKiT,wBAA0B/N,KAAKgO,IAAIlT,KAAKiT,wBAA0BzS,EAAQ,IAAM,IAGzFR,KAAK6W,QAAQpQ,KAAO,GAAGzG,KAAKiT,wBAAwBwE,QAAQ,UAtCnC,GAAzBzX,KAAKyW,UAAUhK,SACfzM,KAAK2W,cAAe,EACpB3W,KAAKiT,wBAA0BjT,KAAK4W,kBACpC5W,KAAK6W,QAAQpQ,KAAO,GAAGzG,KAAKiT,wBAAwBwE,QAAQ,KAElD,QAAV,EAAAzX,KAAKuW,aAAK,SAAEvH,KAAK,IAoC7B,EChIG,MAAM,WAAeqH,GACxB,SAAAhW,GACI,MAAMqX,EAAS,EAAUxV,WAAW7B,UAAU,EAAG,GAEjD,OADAqX,EAAO1S,OAAQ,SAAI,IAAM,KAClB0S,CACX,CAEA,WAAAnY,CAAYoB,EAAW4E,GACnB7F,MAAM,CACFO,KAAK,SAAIU,EAAG4E,GACZzF,EAAG,IACJ,EAAO,EAAUsB,KAAK4B,aACzBhD,KAAKG,SAASC,IAAI,EAAU8B,WAAW7B,UAAU,EAAG,IAEpDL,KAAKmG,SAASC,IAAI,IAAI,MAAkB,CACpC,MAAMH,IAAI,GAAI,QAAIoM,GAAW,SAAI,GAAI,IAErC,MAAMsF,QAAQ,EAAC,SAAI,GAAI,IAAI,SAAI,GAAI,KAAK,SAAI,GAAI,KAAK,SAAI,GAAI,KAAK,UAAK,IAAK,KAC5E,MAAMA,QAAQ,EAAC,SAAI,GAAI,IAAI,SAAI,GAAI,IAAI,SAAI,GAAI,KAAK,SAAI,GAAI,MAAM,UAAK,IAAK,OAEpF,CAEA,WAAAL,CAAY9X,GACR,OAAOA,EAAKyE,KAAOzE,EAAKyE,OAAS,IACrC,CAEU,SAAAgT,GACN,MAAO,EACH,UAAK,GAAI,KACT,SAAI,GAAI,GAEhB,CACU,SAAAO,GACN,OAAO,SAAI,EAAG,GAClB,ECpCG,MAAMI,WAAe,MAExB,WAAArY,CAAYU,EAAawF,EAAcoS,EAAkB,GACrDnY,MAAM,CACFO,MACAqS,SAAUuF,EAAU,IAAM3S,KAAK4S,GAC/BlN,MAAOnF,EAAK9E,EACZoL,OAAQtG,EAAKF,EACb3F,cAAe,MAAckR,OAErC,ECLG,MAAM,WAAgBuF,GACzB,SAAAhW,GACI,MAAMqX,EAAS,EAAUxV,WAAW7B,UAAU,EAAG,GAEjD,OADAqX,EAAO1S,OAAQ,SAAI,IAAM,KAClB0S,CACX,CAMA,WAAAnY,CAAYoB,EAAW4E,GACnB7F,MAAM,CACFO,KAAK,SAAIU,EAAG4E,GACZzF,EAAG,IACJ,GANP,KAAAiY,iBAA2B,EAQvB/X,KAAKG,SAASyH,IAAI,EAAU1F,WAAW7B,UAAU,EAAG,IACpDL,KAAKmG,SAASC,IAAI,IAAI,MAAe,CAAEzG,OAAQ,GAAI4J,QAAQ,SAAI,EAAG,MAElEvJ,KAAKgY,MAAQ,IAAI,MAAM,CACnB/X,KAAK,SAAI,GAAK,GACdH,EAAGE,KAAKF,EAAI,IAEhB,MAAMmY,EAAc,EAAU/V,WAAW7B,UAAU,EAAG,GACtDL,KAAKgY,MAAM7X,SAASyH,IAAIqQ,GACxBjY,KAAK0R,SAAS1R,KAAKgY,OAEnBhY,KAAK0R,SAAS,IAAIkG,IAAO,UAAK,IAAK,KAAK,SAAI,GAAI,GAAI,KACpD5X,KAAK0R,SAAS,IAAIkG,IAAO,SAAI,IAAK,KAAK,SAAI,GAAI,IAAK,IACxD,CAEA,YAAAtX,CAAaC,EAAgBC,GACzBd,MAAMY,aAAaC,EAAQC,GAE3B,IAAI0X,GAAW,EACf,GAAIlY,KAAKwW,KAAM,CACX,IAAI2B,EAAcnY,KAAKgY,MAAM1F,SAE7BtS,KAAKgY,MAAM1F,UAAatS,KAAKiT,wBAA0BjT,KAAK4W,kBAAsB1R,KAAK4S,GAAK,EAExFK,GAAenY,KAAKgY,MAAM1F,SAC1B4F,GAAW,EAEXlY,KAAK+X,iBAAkB,CAE/B,CAEIG,EACMlY,KAAK+X,kBACN,EAAU3W,KAAK2B,aAAaqV,KAAKpY,KAAK4W,kBAAoB5W,KAAKiT,yBAC/D,EAAU7R,KAAK2B,aAAaiM,KAAK,KAGtC,EAAU5N,KAAK2B,aAAaqU,OAGhCpX,KAAK+X,gBAAkBG,CAC3B,CAEU,WAAAZ,CAAY9X,GAClB,OAAOA,EAAKqE,MAAQrE,EAAKqE,QAAU,IACvC,CACU,SAAAoT,GACN,MAAO,EACH,UAAK,GAAI,KACT,SAAI,GAAI,GAEhB,CACU,SAAAO,GACN,OAAO,SAAI,GAAI,GACnB,EC1DJ,MAAM,WAAwB,MAU1B,WAAAjY,CAAYoB,EAAW4E,EAAWE,EAAcjG,GAC5CE,MAAM,CACFiB,EAAGA,EACH4E,EAAGA,EACHqF,MAAOnF,EACPsG,OAAQtG,EACRyD,MAAO,MAAM0J,KACbhT,cAAe,MAAc8N,UAf7B,KAAA2K,cAAgB,EAChB,KAAAC,cAAe,EAKvB,KAAAC,SAAW,EAYPvY,KAAKR,KAAOA,EAGZQ,KAAK6W,QAAU,IAAI,MAAM,CACrBpQ,KAAM,QACNxG,KAAK,SAAI,GAAIwF,EAAO,EAAI,GACxBiD,KAAM,IAAI,MAAK,CACXC,UAAW,MAAU8B,OACrB5B,UAAW,MAAUC,OACrBO,OAAQ,CACJC,KAAM,EACNC,QAAQ,SAAI,EAAG,GACfL,MAAO,MAAMC,OAEjBJ,OAAQ,aACRtD,KAAM,GACNuD,KAAM,MAASC,GACfC,MAAO,MAAMM,MACbJ,WAAW,MAInBpJ,KAAK6W,QAAQ7R,OAAQ,SAAI,EAAG,GAE5B,IAAI4O,EAAY,IAAItU,EAAUE,GAC9BoU,EAAUlI,KAAK9L,cAAgB,MAAc+L,iBAE7C3L,KAAK0R,SAAS1R,KAAK6W,SACnB7W,KAAK0R,SAASkC,GAEdA,EAAU5O,OAAQ,SAAI,GAAK,IAE3BhF,KAAKG,SAASC,IAAI,EAAUgB,KAAKW,gBAAgBqK,WACrD,CAEA,YAAA9L,CAAaC,EAAgBC,GACzB,MAAMgY,EAAWjY,EAAO4H,MAAM8B,SAASC,WAAW,MAAKwC,OAGnD1M,KAAKsY,cAELtY,KAAKqY,eAAiB7X,EAAQ,IAC1BR,KAAKqY,eAAiB,GACtBrY,KAAKsY,cAAe,EACpBtY,KAAK6W,QAAQpQ,KAAO,UAGpBzG,KAAK6W,QAAQpQ,KAAO,GAAGzG,KAAKqY,cAAcZ,QAAQ,KAClDzX,KAAK6W,QAAQ1W,SAASsY,QAAU,KAE7BzY,KAAKyS,kBACPzS,KAAKyS,gBAAgBjB,iBAGtBxR,KAAK6W,QAAQ1W,SAASsY,QAAU,GAFhCzY,KAAK6W,QAAQ1W,SAASsY,QAAU,GAMhCD,GAAaxY,KAAKyS,gBAAgBjB,kBAAqBxR,KAAKsY,eAC5DtY,KAAKyS,gBAAgBhB,WAAW,IAAInS,EAAUU,KAAKR,OAGnDQ,KAAKsY,cAAe,EACpBtY,KAAKqY,cAAgBrY,KAAKuY,SAC1BvY,KAAK6W,QAAQpQ,KAAO,GAAGzG,KAAKuY,SAASd,QAAQ,KAE7CzX,KAAK+S,QAAQ2F,MAAsB,IAAhB1Y,KAAKuY,UAAiBrC,YAAW,KAEpB7D,MAAxBrS,KAAKyS,iBACLzS,KAAK6W,QAAQ9D,QAAQc,SAAQ,SAAI,EAAG,IAAI,SAAI,GAAI,KAAKqC,YAAW,KAAOlW,KAAK6W,QAAQpQ,KAAO,OAAO,GAEtG,KAKhB,CAEA,gBAAA6J,CACIC,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAYH,EAAMI,MAAMC,IAAI,OAE9BF,EAAUC,iBAAiB,IAC3B5Q,KAAKyS,gBAAkB9B,EAAUC,MACjC5Q,KAAK6W,QAAQ9D,QAAQc,SAAQ,SAAI,EAAG,IAAI,SAAI,GAAI,KAExD,CAEA,cAAA3C,CAAeX,EAAgBC,EAAiBC,EAAYU,GACtCX,EAAMI,MAAMC,IAAI,OAEpBD,iBAAiB,IAC3B5Q,KAAKyS,qBAAkBJ,EAGlBrS,KAAKsY,cACNtY,KAAK6W,QAAQ9D,QAAQc,SAAQ,SAAI,EAAG,IAAI,SAAI,GAAI,KAG5D,EAGJ,YC8FO,MAAM8E,GAAkB,CAC3B,IA3NG,MAAP,cACa,KAAA/O,YAAsB,IACtB,KAAA3C,UAAoB,IACpB,KAAAxB,KAAOqQ,OAAO3R,QAAO,SAAI,IAAK,MAEvC,KAAAyU,gBAAkB,IAAqB,CAEnC,CAACpZ,KAAM,IAAI,EAAaqV,aAAc,EAAKpN,MAAO,IA2D1D,CAxDI,aAAA8E,GACI,MAAO,CACH,IAAI,EAAO,IAAI,EAAS,IAAI,GAAQ,EAAG,GAAI,IAAIzI,GAC/C,IAAI,EAAO,IAAIA,EAAe,IAAI,GAAO,EAAG,GAAI,IAAI,GAE5D,CAEA,UAAAkE,CAAWzD,GACP,IAAM5D,EAAGgF,EAAGJ,EAAGK,GAAM5F,KAAKyF,KAE1B,CACI,IAAI,EAAcE,EAAI,EAAG,IAAKA,EAAG,IACjC,IAAI,EAAcA,EAAI,EAAGC,EAAGD,EAAG,GAAI,EAAG,MAAcmL,OAGpD,IAAI,EAAS,IAAK,IAAK,GAAI,IAG3B,IAAI,EAAS9Q,KAAKyF,KAAK9E,EAAI,EAAG,IAAK,GAAI,IAAI,GAAM,MAAcmQ,QAGhE+H,SAAQhG,GAAYtO,EAAMqD,IAAIiL,KAEjC,CAEI,IAAI,GAAgB,IAAK,IAAc,GAAI,IAAI,IAChDgG,SAAQC,GAAWvU,EAAMqD,IAAIkR,KAGhC,MAAMC,EAAS,IAAI,EAAO/Y,KAAKyF,KAAK9E,EAAI,EAAG,KAC3C4D,EAAMqD,IAAImR,GAGV,MAAMC,EAAU,IAAI,GAAQhZ,KAAKyF,KAAK9E,EAAI,EAAG,KAC7C4D,EAAMqD,IAAIoR,GAEV,MAAMC,EAAS,IAAI,GAAOjZ,KAAKyF,KAAK9E,EAAI,EAAI,GAAI,KAChD4D,EAAMqD,IAAIqR,GAEV,MAAMtG,EAAQ,IAAI,GAAa,GAAI,IAAK,GAAIqG,GAC5CzU,EAAMqD,IAAI+K,GAEV,MAAMuG,EAAa,IAAI,MAAM,CAAEpZ,GAAI,KACnC,IAAI4X,EAAS,EAAUtW,KAAKmB,WAAW6J,WACvCsL,EAAOyB,KAAO,MAAMvG,KACpBsG,EAAW/Y,SAASC,IAAIsX,EAAQ,CAAE0B,QAAQ,SAAI,EAAG,GAAI7P,QAAQ,UAAK,GAAI,KACtEhF,EAAMqD,IAAIsR,GAEV,MAAMG,EAAqB,IAAI,MAAM,CAAEvZ,GAAI,KAC3C4X,EAAS,EAAUtW,KAAKoB,mBAAmB4J,WAC3CiN,EAAmBlZ,SAASC,IAAIsX,EAAQ,CAAE0B,QAAQ,SAAI,EAAG,GAAI7P,QAAQ,UAAK,GAAI,KAC9EhF,EAAMqD,IAAIyR,GAEV,MAAMC,EAAkB,IAAI,GAAgB/U,EAAOvE,KAAKyF,KAAK9E,EAAI,EAAGX,KAAKyF,KAAKF,EAAGvF,KAAKyF,KAAK9E,EAAGX,KAAK4Y,mBACnGrU,EAAMqD,IAAI0R,EACd,ICrEG,MAAMC,WAAa,MAKtB,WAAAha,GACIG,MAAM,CACF8Z,YAAa,MAAYC,WACzBC,cAAc,IANd,KAAAC,WAAqB,EACrB,KAAAC,aAAc,EAQlB5Z,KAAK6Z,MAAM1T,SAAS2T,YAAc,MAAMC,IACxC/Z,KAAK6Z,MAAM1T,SAAS6T,SAAU,CAClC,CAEO,KAAAC,GAEHja,KAAK6Z,MAAM1T,SAAS+T,YAAa,EACjC,MAAMC,EAAS,IAAI,MAAOrE,OAAOsE,OAAO,EAAUhZ,OAElD,OAAO1B,MAAMua,MAAME,EACvB,CAEA,OAAAE,GACIra,KAAKsa,UAAU,QAAaC,MAAK,KAC7Bva,KAAKwa,YAAYxa,KAAKyU,WACtBzU,KAAK4M,kBAAkB,GAE/B,CAEA,OAAA6N,GACIza,KAAK0a,SAAS,QAAc,IAAI3N,EAAU/M,OAC1CA,KAAKsa,UAAU,QACnB,CAEO,cAAArN,GACHjN,KAAK0a,SAAS,QAAc,IAAI9O,EAAW5L,KAAM2Y,GAAO3Y,KAAK2Z,YAAa3Z,KAAK2Z,aAC/E3Z,KAAKsa,UAAU,QACnB,CAEO,cAAAtQ,CAAe2Q,GAClB3a,KAAK0a,SAAS,QAAc,IAAIxN,EAAWlN,KAAMA,KAAK2Z,WAAYgB,IAClE3a,KAAKsa,UAAU,QACnB,CAEO,aAAA7M,GACHzN,KAAK2Z,aACD3Z,KAAK2Z,YAAchB,GAAOlM,OAC1BzM,KAAKqa,UAGLra,KAAK4M,kBAEb,CAEO,gBAAAA,GACH5M,KAAK0a,SAAS,OAAa,IAAIrU,EAAUrG,KAAM2Y,GAAO3Y,KAAK2Z,cAEtD,EAAUvY,KAAK0B,UAAU8X,aAC1B,EAAUxZ,KAAK0B,UAAUkM,KAAK,KAElChP,KAAKsa,UAAU,OACnB,CAEO,SAAAlQ,GACHpK,KAAK0a,SAAS,QAAc,IAAI9O,EAAW5L,KAAM2Y,GAAO3Y,KAAK2Z,YAAa3Z,KAAK2Z,YAAY,IAE3F,EAAUvY,KAAK0B,UAAU+X,QAEzB7a,KAAKsa,UAAU,QACnB,CAEO,SAAA3N,GACE,EAAUvL,KAAK0B,UAAU8X,aAC1B,EAAUxZ,KAAK0B,UAAUkM,KAAK,KAElChP,KAAKsa,UAAU,OACnB,CAEA,WAAAvQ,CAAYxJ,EAAgBC,GACpBD,EAAO4H,MAAM8B,SAASC,WAAW,MAAK4Q,IACtC9a,KAAKqa,UAEL9Z,EAAO4H,MAAM8B,SAASC,WAAW,MAAK6Q,MACtC/a,KAAK4Z,aAAe5Z,KAAK4Z,YACzB5Z,KAAKgb,UAAUhb,KAAK4Z,aAE5B,ECzGJ,MAAMtT,GAAO,IAAIiT,GACjBjT,GAAK2T,QAAQM,MAAK,KAChBjU,GAAKmU,SAAS,G,kcCHZQ,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB9I,IAAjB+I,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CAGAH,EAAoBM,EAAID,EzBzBpBlc,EAAW,GACf6b,EAAoBO,EAAI,CAACxQ,EAAQyQ,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAAStP,EAAI,EAAGA,EAAInN,EAASoN,OAAQD,IAAK,CAGzC,IAFA,IAAKkP,EAAUC,EAAIC,GAAYvc,EAASmN,GACpCuP,GAAY,EACPC,EAAI,EAAGA,EAAIN,EAASjP,OAAQuP,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAa9F,OAAOmG,KAAKf,EAAoBO,GAAGS,OAAO7K,GAAS6J,EAAoBO,EAAEpK,GAAKqK,EAASM,MAC9IN,EAASS,OAAOH,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACb1c,EAAS8c,OAAO3P,IAAK,GACrB,IAAI4P,EAAIT,SACEtJ,IAAN+J,IAAiBnR,EAASmR,EAC/B,CACD,CACA,OAAOnR,CAnBP,CAJC2Q,EAAWA,GAAY,EACvB,IAAI,IAAIpP,EAAInN,EAASoN,OAAQD,EAAI,GAAKnN,EAASmN,EAAI,GAAG,GAAKoP,EAAUpP,IAAKnN,EAASmN,GAAKnN,EAASmN,EAAI,GACrGnN,EAASmN,GAAK,CAACkP,EAAUC,EAAIC,EAqBjB,E0BzBdV,EAAoBmB,EAAI,CAAChB,EAASiB,KACjC,IAAI,IAAIjL,KAAOiL,EACXpB,EAAoBqB,EAAED,EAAYjL,KAAS6J,EAAoBqB,EAAElB,EAAShK,IAC5EyE,OAAO0G,eAAenB,EAAShK,EAAK,CAAEoL,YAAY,EAAM5L,IAAKyL,EAAWjL,IAE1E,ECND6J,EAAoBwB,EAAI,WACvB,GAA0B,iBAAfC,WAAyB,OAAOA,WAC3C,IACC,OAAO3c,MAAQ,IAAI4c,SAAS,cAAb,EAChB,CAAE,MAAO9X,GACR,GAAsB,iBAAXM,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCAxB8V,EAAoBqB,EAAI,CAACM,EAAKC,IAAUhH,OAAOiH,UAAUC,eAAeC,KAAKJ,EAAKC,G,MCAlF,IAAII,EACAhC,EAAoBwB,EAAES,gBAAeD,EAAYhC,EAAoBwB,EAAEU,SAAW,IACtF,IAAIC,EAAWnC,EAAoBwB,EAAEW,SACrC,IAAKH,GAAaG,IACbA,EAASC,eAAkE,WAAjDD,EAASC,cAAcC,QAAQC,gBAC5DN,EAAYG,EAASC,cAAcG,MAC/BP,GAAW,CACf,IAAIQ,EAAUL,EAASM,qBAAqB,UAC5C,GAAGD,EAAQjR,OAEV,IADA,IAAID,EAAIkR,EAAQjR,OAAS,EAClBD,GAAK,KAAO0Q,IAAc,aAAaU,KAAKV,KAAaA,EAAYQ,EAAQlR,KAAKiR,GAE3F,CAID,IAAKP,EAAW,MAAM,IAAIW,MAAM,yDAChCX,EAAYA,EAAUY,QAAQ,OAAQ,IAAIA,QAAQ,QAAS,IAAIA,QAAQ,YAAa,KACpF5C,EAAoBrV,EAAIqX,C,WCbxB,IAAIa,EAAkB,CACrB,IAAK,GAaN7C,EAAoBO,EAAEO,EAAKgC,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BC,KACvD,IAGIhD,EAAU6C,GAHTtC,EAAU0C,EAAaC,GAAWF,EAGhB3R,EAAI,EAC3B,GAAGkP,EAAS4C,MAAMC,GAAgC,IAAxBR,EAAgBQ,KAAa,CACtD,IAAIpD,KAAYiD,EACZlD,EAAoBqB,EAAE6B,EAAajD,KACrCD,EAAoBM,EAAEL,GAAYiD,EAAYjD,IAGhD,GAAGkD,EAAS,IAAIpT,EAASoT,EAAQnD,EAClC,CAEA,IADGgD,GAA4BA,EAA2BC,GACrD3R,EAAIkP,EAASjP,OAAQD,IACzBwR,EAAUtC,EAASlP,GAChB0O,EAAoBqB,EAAEwB,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAO9C,EAAoBO,EAAExQ,EAAO,EAGjCuT,EAAqBjO,KAAoC,8BAAIA,KAAoC,+BAAK,GAC1GiO,EAAmB3F,QAAQoF,EAAqBvZ,KAAK,KAAM,IAC3D8Z,EAAmBxY,KAAOiY,EAAqBvZ,KAAK,KAAM8Z,EAAmBxY,KAAKtB,KAAK8Z,G,KC7CvF,IAAIC,EAAsBvD,EAAoBO,OAAEpJ,EAAW,CAAC,MAAM,IAAO6I,EAAoB,OAC7FuD,EAAsBvD,EAAoBO,EAAEgD,E","sources":["webpack://excalibur-webpack/webpack/runtime/chunk loaded","webpack://excalibur-webpack/./src/actors/items/itemActor.ts","webpack://excalibur-webpack/./src/resources.ts","webpack://excalibur-webpack/./src/actors/items/items.ts","webpack://excalibur-webpack/./src/scenes/scene-scaler.ts","webpack://excalibur-webpack/./src/actors/level-boundary.ts","webpack://excalibur-webpack/./src/scenes/main-scene.ts","webpack://excalibur-webpack/./src/ui/text-label.ts","webpack://excalibur-webpack/./src/scenes/level-intro.ts","webpack://excalibur-webpack/./src/scenes/game-start.ts","webpack://excalibur-webpack/./src/scenes/level-outro.ts","webpack://excalibur-webpack/./src/actors/player.ts","webpack://excalibur-webpack/./src/actors/platform.ts","webpack://excalibur-webpack/./src/actors/contols/hamster-wheel.ts","webpack://excalibur-webpack/./src/actors/contols/lever.ts","webpack://excalibur-webpack/./src/actors/customer.ts","webpack://excalibur-webpack/./src/actors/customers-control.ts","webpack://excalibur-webpack/./src/actors/machines/machine.ts","webpack://excalibur-webpack/./src/actors/machines/brewer.ts","webpack://excalibur-webpack/./src/actors/paddle.ts","webpack://excalibur-webpack/./src/actors/machines/grinder.ts","webpack://excalibur-webpack/./src/actors/stations/resource-station.ts","webpack://excalibur-webpack/./src/levels/level.ts","webpack://excalibur-webpack/./src/game.ts","webpack://excalibur-webpack/./src/index.ts","webpack://excalibur-webpack/webpack/bootstrap","webpack://excalibur-webpack/webpack/runtime/define property getters","webpack://excalibur-webpack/webpack/runtime/global","webpack://excalibur-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://excalibur-webpack/webpack/runtime/publicPath","webpack://excalibur-webpack/webpack/runtime/jsonp chunk loading","webpack://excalibur-webpack/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import { Item } from '@/actors/items/items';\nimport { Resources } from '@/resources';\nimport {Actor, CollisionType, Color, Engine, Vector} from 'excalibur';\n\nexport class ItemActor extends Actor {\n    public allocatedToCustomer: boolean = false;\n\n    constructor(readonly item: Item, spawnPos?: Vector) {\n        super({\n            radius: 6,\n            collisionType: CollisionType.Active,\n            z: 10,\n        });\n        if (spawnPos) {\n            this.pos = spawnPos.clone();\n        }\n\n        this.graphics.use(item.getSprite());\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        this.angularVelocity = this.vel.x / 10;\n\n        this.vel.x *= 0.99;\n    }\n}\n","import {ImageSource, Sound, Sprite, SpriteSheet} from 'excalibur';\nimport sword from './images/sword.png';\nimport magor from './images/magor.png';\nimport button from './images/button.png';\nimport veverkaRun from './images/veverka-run.png';\nimport veverkaIdle from './images/veverka-idle.png';\nimport logo from './images/acorn_logo.png';\nimport lever from './images/lever.png';\nimport platformSmall from './images/platform-small.png';\nimport platformMedium from './images/platform-medium.png';\nimport platformWheel from './images/platform-wheel.png';\nimport wheel from './images/wheel.png';\nimport items from './images/items.png';\nimport machines from './images/machines.png';\nimport levelTable from './images/level_table.png';\nimport starGold from './images/star_gold.png';\nimport starGrey from './images/star_grey.png';\nimport bubble from './images/bubble.png';\nimport background from './images/background.png';\nimport backgroundBranches from './images/backgroundBranches.png';\n\nvar runSound = require('./music/running.mp3')\nvar jumpSound = require('./music/jump.mp3')\nvar drop = require('./music/drop.mp3')\nvar chirp1 = require('./music/chirp1.mp3')\nvar chirp2 = require('./music/chirp2.mp3')\nvar mainMusic = require('./music/main.mp3')\nvar grinderSound = require('./music/grinder.mp3')\nvar brewerSound = require('./music/brewing.mp3')\n\nimport resourceStation from './images/resource-station.png';\n\n/**\n * Default global resource dictionary. This gets loaded immediately\n * and holds available assets for the game.\n */\nconst Resources = new class Resources {\n    public Load = {\n        Sword: new ImageSource(sword),\n        Magor: new ImageSource(magor),\n        VeverkaRun: new ImageSource(veverkaRun),\n        VeverkaIdle: new ImageSource(veverkaIdle),\n        ItemsImg: new ImageSource(items),\n        Logo: new ImageSource(logo),\n        Lever: new ImageSource(lever),\n        PlatformSmall: new ImageSource(platformSmall),\n        PlatformMedium: new ImageSource(platformMedium),\n        PlatformWheel: new ImageSource(platformWheel),\n        ResourceStation: new ImageSource(resourceStation),\n        Wheel: new ImageSource(wheel),\n        Button: new ImageSource(button),\n        Machines: new ImageSource(machines),\n        LevelTable: new ImageSource(levelTable),\n        StarGold: new ImageSource(starGold),\n        StarGrey: new ImageSource(starGrey),\n        Bubble: new ImageSource(bubble),\n        Background: new ImageSource(background),\n        BackgroundBranches: new ImageSource(backgroundBranches),\n\n        JumpSound: new Sound(jumpSound),\n        RunSound: new Sound(runSound),\n        Chirp1Sound: new Sound(chirp1),\n        Chirp2Sound: new Sound(chirp2),\n        DropSound: new Sound(drop),\n        MainMusic: new Sound(mainMusic),\n        GrinderSound: new Sound(grinderSound),\n        BrewerSound: new Sound(brewerSound),\n    }\n\n    readonly Items = lazy(() =>\n        SpriteSheet.fromImageSource({\n            image: this.Load.ItemsImg,\n            grid: {\n                columns: 8,\n                rows: 8,\n                spriteHeight: 16,\n                spriteWidth: 16,\n            }\n        })\n    );\n\n    readonly Machines = lazy(() =>\n        SpriteSheet.fromImageSource({\n            image: this.Load.Machines,\n            grid: {\n                columns: 8,\n                rows: 5,\n                spriteWidth: 48,\n                spriteHeight: 70,\n            }\n        })\n    );\n}\n\nfunction lazy<T>(provider: () => T): () => T {\n    let storage: T | undefined = undefined;\n    let computed = false;\n    return () => {\n        if (!computed) {\n            storage = provider();\n        }\n        return storage!;\n    }\n}\n\nexport { Resources }\n","import { Resources } from \"@/resources\";\nimport { Sprite } from \"excalibur\";\n\n\nexport interface Drawable {\n    getSprite(): Sprite;\n}\n\nexport interface Item extends Drawable {\n    grind?(): Item;\n    brew?(): Item;\n    roast?(): Item;\n    freeze?(): Item;\n\n    getSprite(): Sprite;\n}\n\nexport class Garbage implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(3, 1); }\n}\n\nexport class Leaf implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(3, 0); }\n\n    grind(): Item {\n        return new GroundLeaf();\n    }\n}\n\nexport class Acorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 0); }\n\n    grind(): Item {\n        return new GroundAcorn();\n    }\n    roast(): Item {\n        return new RoastedAcorn();\n    }\n}\n\nexport class GroundAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(1, 0); }\n    brew(): Item {\n        return new Coffee();\n    }\n    roast(): Item {\n        return new RoastedGroundAcorn();\n    }\n    freeze(): Item {\n        return new IceCream();\n    }\n}\n\nexport class Coffee implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(2, 0); }\n}\n\nexport class RoastedAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 1); }\n}\n\nexport class RoastedGroundAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 2); }\n}\n\n\nexport class GroundLeaf implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(4, 0); }\n\n    brew(): Item {\n        return new Tea();\n    }\n    freeze(): Item {\n        return new IcedTea();\n    }\n}\n\nexport class Tea implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(5, 0); }\n}\n\nexport class IcedTea implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(5, 1); }\n}\n\nexport class IceCream implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(4, 1); }\n}","import { ExcaliburGraphicsContext, PreDrawEvent, Scene, vec, Vector } from \"excalibur\";\n\n\n/** Updates the scene camera pos and zoom so that the entire scene is visible */\nexport class SceneScaler {\n\n    private handler: typeof this.onScenePreDraw;\n\n    constructor(\n        readonly sizeInPixels: Vector,\n        readonly scene: Scene,\n    ) {\n        this.handler = this.onScenePreDraw.bind(this);\n        scene.on('predraw', this.handler);\n    }\n\n    deactivate() {\n        this.scene.off('predraw', this.handler);\n    }\n\n    private onScenePreDraw(e: PreDrawEvent): void {\n        this.scene.camera.pos = this.sizeInPixels.scale(1 / 2);\n\n        const zoom = Math.min(\n            window.innerWidth / this.sizeInPixels.x,\n            window.innerHeight / this.sizeInPixels.y);\n\n        this.scene.camera.zoom = zoom;\n        //console.log('ctx: ', e.ctx.width, e.ctx.height, 'window: ', window.innerWidth, window.innerHeight);\n    }\n}\n","import { Action, Actor, CompositeCollider, Shape, vec, Vector } from \"excalibur\";\n\n\nexport interface BoundariesConfig {\n    top?: boolean, down?: boolean, left?: boolean, right?: boolean,\n}\n\nexport class LevelBoundaries extends Actor {\n\n    constructor(private readonly size: Vector, config?: BoundariesConfig) {\n        super();\n\n        const { x: W, y: H } = size;\n        const p = 10;\n        const bounds: any = [];\n\n        if (config?.top ?? true) bounds.push(Shape.Box(W + 2 * p, p, vec(0, 0), vec(0, -p)));\n        if (config?.down ?? true) bounds.push(Shape.Box(W + 2 * p, p, vec(0, 0), vec(0, H + p)));\n        if (config?.top ?? true) bounds.push(Shape.Box(p, H, vec(0, 0), vec(-p, 0)));\n        if (config?.top ?? true) bounds.push(Shape.Box(p, H, vec(0, 0), vec(W + p, 0)));\n\n        this.collider.set(new CompositeCollider(bounds));\n        // TODO set type to FIXED\n    }\n}","import * as ex from 'excalibur';\nimport {Color, ExcaliburGraphicsContext, Label, vec} from 'excalibur';\nimport { ItemActor } from '@/actors/items/itemActor';\nimport { Coffee } from '@/actors/items/items';\nimport { SceneScaler } from \"@/scenes/scene-scaler\";\nimport { Level } from './level-intro';\nimport { Game } from '@/game';\nimport { LevelBoundaries } from '@/actors/level-boundary';\nimport { Customer } from '@/actors/customer';\n\n\nexport interface GameStatistics {\n    customersServed: number\n    customerLongestWait: number\n    pointsMax: number\n    pointsGained: number\n    recipesMade: number\n}\n\nexport class MainScene extends ex.Scene {\n    entityCounter = new Label({ text: '' });\n    timeLabel = new Label({ text: '' });\n    private timePlayed: number\n    private timeLastCustomer: number\n    private recipesCooked: Set<string>;\n    private statistics: GameStatistics\n\n    constructor(\n        private game: Game,\n        private level: Level,\n    ) {\n        super();\n        this.timePlayed = 0;\n        this.timeLastCustomer = 0;\n        this.statistics = {\n            customersServed: 0,\n            customerLongestWait: 0,\n            pointsMax: level.maxPoints,\n            pointsGained: 0,\n            recipesMade: 0,\n        }\n        this.recipesCooked = new Set<string>();\n    }\n\n    resolveCustomer(customer: Customer) {\n        const item = customer.desiredItem;\n        this.statistics.customersServed++;\n        this.statistics.pointsGained += item.price;\n        // simplification\n        const customerWait = Math.floor((this.timePlayed - this.timeLastCustomer) / 1000);\n        if (customerWait > this.statistics.customerLongestWait) {\n            this.statistics.customerLongestWait = customerWait;\n        }\n        this.recipesCooked.add(typeof item.item);\n        this.statistics.recipesMade = this.recipesCooked.size;\n        console.log(this.statistics);\n    }\n\n    onInitialize(engine: ex.Engine) {\n        this.add(this.entityCounter);\n\n        this.level.spawnItems(this);\n\n        this.initializeClock();\n\n        // TODO: remove!\n        let mouse = engine.input.pointers.primary;\n        mouse.on('down', e => {\n            console.log('spawn');\n            let acorn = new ItemActor(new Coffee());\n            acorn.pos = mouse.lastWorldPos.clone();\n            this.add(acorn);\n        });\n        this.physics.config.gravity = vec(0, 250);\n\n        new SceneScaler(this.level.size, this);\n\n        this.add(new LevelBoundaries(this.level.size));\n    }\n\n    initializeClock() {\n        this.timeLabel = new Label({\n            text: '',\n            pos: vec(this.level.size.x - 50, 20),\n            font: new ex.Font({\n                textAlign: ex.TextAlign.Left,\n                baseAlign: ex.BaseAlign.Bottom,\n                family: 'Pixelify Sans',\n                size: 80,\n                unit: ex.FontUnit.Px,\n                color: ex.Color.Black,\n                smoothing: false,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.White,\n                },\n            }),\n            scale: vec(1, 1).scale(0.2),\n        })\n        this.add(this.timeLabel);\n        this.add(new Label({\n            text: '[P] to PAUSE',\n            pos: vec(this.level.size.x - 50, 30),\n            font: new ex.Font({\n                textAlign: ex.TextAlign.Left,\n                baseAlign: ex.BaseAlign.Bottom,\n                family: 'Pixelify Sans',\n                size: 35,\n                unit: ex.FontUnit.Px,\n                color: ex.Color.Black,\n                smoothing: false,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.White,\n                },\n            }),\n            scale: vec(1, 1).scale(0.2),\n        }))\n    }\n\n    onPreDraw(ctx: ExcaliburGraphicsContext, delta: number): void {\n        const timeLeft = this.level.timeLimitMs - this.timePlayed;\n        const minutes = Math.floor(timeLeft / (1000 * 60));\n        const seconds = Math.floor((timeLeft - minutes * 60 * 1000) / 1000)\n        this.timeLabel.text = `${minutes < 10 ? '0' + minutes : minutes}:${seconds < 10 ? '0' + seconds : seconds}`;\n    }\n\n    onPreUpdate(engine: ex.Engine, delta: number): void {\n        this.timePlayed += delta;\n        if (this.timePlayed >= this.level.timeLimitMs) {\n            // this.statistics.pointsMax = 200;\n            // this.statistics.pointsGained = 130;\n            this.game.showLevelOutro(this.statistics);\n        }\n\n        if (engine.input.keyboard.wasPressed(ex.Keys.P)) {\n            this.game.showPause();\n        }\n    }\n}\n","import { Actor, Vector, Text, Font, BaseAlign, Color, FontUnit, TextAlign, vec } from \"excalibur\";\n\nexport class TextLabel {\n    static WHITE = new Color(255, 255, 255);\n    static GREY = new Color(46, 46, 46);\n    static ORANGE = new Color(242, 157, 79);\n\n    private _actor: Actor;\n    constructor(\n        x: number,\n        y: number,\n        size: number,\n        message: string,\n        color: Color = TextLabel.GREY,\n        align: TextAlign = TextAlign.Center,\n    ) {\n        const text = new Text({ \n            text: message,\n            font: new Font({\n                textAlign: align,\n                baseAlign: BaseAlign.Bottom,\n                family: 'Pixelify Sans',\n                size,\n                unit: FontUnit.Px,\n                color,\n                smoothing: false,\n            })\n        });\n        text.scale = vec(1,1).scale(0.1);\n        this._actor = new Actor();\n        this._actor.graphics.use(text);\n        this.actor.pos = vec(x + text.width / 2, y)\n    }\n\n    public get actor() {\n        return this._actor;\n    }\n}","import {Drawable, Item} from '@/actors/items/items';\nimport {Actor, CollisionType, Color, Engine, Keys, Scene, SceneActivationContext, vec, Vector} from 'excalibur';\nimport {Game} from '@/game';\nimport {Resources} from '@/resources';\nimport {TextLabel} from '@/ui/text-label';\nimport {SceneScaler} from './scene-scaler';\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport { DesiredItem } from '@/levels/level';\nimport { MainScene } from './main-scene';\n\nexport interface Level {\n    timeLimitMs: number;\n    maxPoints: number;\n    size: Vector;\n    spawnItems(scene: MainScene): void;\n    getNewRecipes(): Recipe[];\n\n    getDesiredItems(): DesiredItem[];\n}\n\nexport class Recipe {\n    constructor(\n        public ingredient1: Drawable,\n        public ingredient2: Drawable,\n        public result: Item,\n    ) { }\n\n    public show(scene: Scene, x: number, y: number) {\n        const plus = Resources.Items().getSprite(0, 2);\n        const equals = Resources.Items().getSprite(1, 2);\n\n        const ingr1Act = new Actor({pos: vec(x, y)});\n        ingr1Act.graphics.add(this.ingredient1.getSprite());\n        scene.add(ingr1Act);\n\n        const plusAct = new Actor({pos: vec(x + 1 * 16, y)});\n        plusAct.graphics.add(plus);\n        scene.add(plusAct);\n\n        const ingr2Act = new Actor({pos: vec(x + 2 * 16, y)});\n        ingr2Act.graphics.add(this.ingredient2.getSprite());\n        scene.add(ingr2Act);\n\n        const eqAct = new Actor({pos: vec(x + 3 * 16, y)});\n        eqAct.graphics.add(equals);\n        scene.add(eqAct);\n\n        const resultAct = new ItemActor(this.result, vec(x + 4 * 16, y));\n        resultAct.body.collisionType = CollisionType.PreventCollision;\n        resultAct.graphics.add(this.result.getSprite());\n        scene.add(resultAct);\n    }\n}\n\nexport class LevelIntro extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n\n    private hintText: Actor;\n    constructor(\n        private game: Game,\n        private level: Level,\n        private levelId: number,\n        private paused: boolean = false,\n    ) {\n        super();\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n        this.hintText = new Actor;\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const levelTable = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        levelTable.graphics.add(Resources.Load.LevelTable.toSprite());\n        this.add(levelTable);\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\n\n        this.hintText = new TextLabel(this.width / 2, 75, 40, \"Want a little hint?\", TextLabel.WHITE).actor\n        this.add(this.hintText);\n        this.showHint();\n\n        if (this.paused) {\n            this.add(new TextLabel(this.width / 2, this.height / 2 + 50, 70, \"PAUSED\", TextLabel.GREY).actor);\n            this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to continue\", TextLabel.GREY).actor);\n\n        } else {\n            this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\", TextLabel.GREY).actor);\n        }\n    }\n\n    showHint() {\n        const recipes = this.level.getNewRecipes();\n        for (let i = 0; i < recipes.length; i++) {\n            const recipe = recipes[i];\n            recipe.show(this, this.width / 2 - (4 * 16) / 2,(this.height / 2 - 10) + i * 16 + 5);\n        }\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\n            if (this.paused) {\n                this.game.exitPause();\n            } else {\n                this.game.showCurrentLevel();\n            }\n        }\n    }\n\n\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import { Game } from \"@/game\";\nimport { Resources } from \"@/resources\";\nimport { Actor, Color, Engine, Keys, Scene, SceneActivationContext, vec } from \"excalibur\";\nimport { SceneScaler } from \"./scene-scaler\";\nimport { TextLabel } from \"@/ui/text-label\";\n\nexport class GameStart extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n    constructor(\n        private game: Game,\n    ) {\n        super();\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const logo = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        logo.graphics.add(Resources.Load.Logo.toSprite());\n        this.add(logo);\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 20, 56, \"Your forest cafe awaits...\\n Brew, Bake, Delight!\").actor);\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\").actor);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\n            this.game.showLevelIntro();\n        }\n    }\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import { Actor, Color, Engine, Keys, Scene, SceneActivationContext, TextAlign, vec } from \"excalibur\";\nimport { Game } from \"@/game\";\nimport { Resources } from \"@/resources\";\nimport { TextLabel } from \"@/ui/text-label\";\nimport { SceneScaler } from \"./scene-scaler\";\nimport { GameStatistics } from \"./main-scene\";\n\nexport class LevelOutro extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n    starsGained: number\n\n    constructor(\n        private game: Game,\n        private levelId: number,\n        private statistics: GameStatistics,\n    ) {\n        super();\n        const ratio = statistics.pointsGained / statistics.pointsMax;\n        this.starsGained = ratio < 0.33\n            ? 1\n            : (ratio < 0.66 ? 2 : 3);\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const levelTable = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        levelTable.graphics.add(Resources.Load.LevelTable.toSprite());\n        this.add(levelTable);\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\n\n        const resultMessage = this.starsGained == 1 ? \"Good start!\" : (this.starsGained == 2 ? \"Well done!\" : \"Barista Master <3\")\n        this.add(new TextLabel(this.width / 2 + 2, 78, 56, resultMessage, TextLabel.GREY).actor)\n\n        for (let i = 1; i <= 3; i++) {\n            const image = i <= this.starsGained ? Resources.Load.StarGold : Resources.Load.StarGrey;\n            const star = new Actor({x: this.width / 2 + (i - 2) * 25, y: this.height / 2});\n            star.graphics.add(image.toSprite());\n            this.add(star);\n        }\n\n        this.add(new TextLabel(this.width / 2 - 17, 115, 35, `- Points: ${this.statistics.pointsGained}`, TextLabel.WHITE, TextAlign.Left).actor)\n        this.add(new TextLabel(this.width / 2 - 17, 120, 35, `- Customers served: ${this.statistics.customersServed}`, TextLabel.WHITE, TextAlign.Left).actor)\n        this.add(new TextLabel(this.width / 2 - 17, 125, 35, `- Longest wait: ${this.statistics.customerLongestWait} s`, TextLabel.WHITE, TextAlign.Left).actor)\n        // this.add(new TextLabel(this.width / 2 - 17, 130, 35, `- Unique recipes cooked: ${this.statistics.recipesMade}`, TextLabel.WHITE, TextAlign.Left).actor)\n\n\n        this.add(new TextLabel(this.width / 2, 150, 40, \"Press [T] to TRY AGAIN\", TextLabel.GREY).actor);\n        this.add(new TextLabel(this.width / 2, 160, 40, \"Press [N] to play NEXT LEVEL\", TextLabel.GREY).actor);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.T)) {\n            this.game.showCurrentLevel();\n        }\n        if(engine.input.keyboard.wasPressed(Keys.N)) {\n            this.game.showNextLevel();\n        }\n    }\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import {\n    Actor,\n    BodyComponent,\n    CircleCollider,\n    clamp,\n    Collider, CollisionContact, CollisionGroup,\n    CollisionType,\n    Color,\n    Engine,\n    Keys, Shape,\n    Side,\n    vec\n} from 'excalibur';\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport * as ex from \"excalibur\";\nimport {Resources} from \"@/resources\";\nimport {Platform, SolidPlatform, WheelPlatform} from \"@/actors/platform\";\n\n\nexport class Player extends Actor {\n    GRAVITY = 3000;\n    JUMP_GRAVITY = this.GRAVITY * 0.5\n\n    MAX_VELOCITY = 300\n    ACCELERATION = 700\n    TURN_ACCELERATION = this.ACCELERATION * 4\n\n    AIR_MOVEMENT_PENALITY = 0.75;\n\n    JUMP_FORCE = 430\n\n    isOnWheel = false;\n    public runningDirection = 0;\n\n    lastGroundState = false;\n    isOnGround = false;\n    isPressingDown = false;\n\n    // set by the solid platform\n    public isOnSolidPlatform = false;\n\n    private carryingItem: ItemActor | null = null;\n\n    animations = {\n        run: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [0, 1, 2, 3, 4, 5, 6], 50),\n        flying: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [2, 3], 100),\n        idle: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaIdle,\n                grid: {\n                    columns: 3,\n                    rows: 1,\n                    spriteWidth: 32,\n                    spriteHeight: 32,\n                },\n            }), [0, 1, 2, 1], 200),\n    }\n\n    public constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 100,\n            width: 25,\n            height: 25,\n            color: new Color(255, 255, 255),\n            collisionType: CollisionType.Passive,\n            collider: Shape.Box(32, 32),\n        });\n\n        Resources.Load.RunSound.volume = 0;\n        Resources.Load.RunSound.loop = true;\n        Resources.Load.RunSound.play();\n    }\n\n    onInitialize(engine: ex.Engine) {\n        engine.input.keyboard.on('press', this.onKeyPress.bind(this));\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        const jumpPressed = engine.input.keyboard.wasPressed(Keys.W) || engine.input.keyboard.wasPressed(Keys.Up)\n        const jumpHeld = engine.input.keyboard.isHeld(Keys.W) || engine.input.keyboard.isHeld(Keys.Up)\n\n        if (jumpPressed)\n            Resources.Load.JumpSound.play(0.35);\n\n        const heldLeft = engine.input.keyboard.isHeld(Keys.A) || engine.input.keyboard.isHeld(Keys.Left)\n        const heldRight = engine.input.keyboard.isHeld(Keys.D) || engine.input.keyboard.isHeld(Keys.Right)\n\n        let movementDirection = Math.sign(this.vel.x);\n\n        this.isPressingDown = engine.input.keyboard.isHeld(Keys.S) || engine.input.keyboard.isHeld(Keys.Down);\n\n        // move left or right\n        if (heldLeft || heldRight) {\n            let direction = 0;\n\n            if (heldLeft) direction -= 1;\n            if (heldRight) direction += 1;\n\n            // turning the other way is faster\n            let accel = (direction != movementDirection ? this.TURN_ACCELERATION : this.ACCELERATION)\n                * direction;\n\n            // turning in air is slower\n            if (!this.isOnGround) accel *= this.AIR_MOVEMENT_PENALITY;\n\n            this.acc.x = accel;\n\n            this.runningDirection = direction;\n        } else {\n            this.acc.x = 0;\n            this.vel.x *= 0.75;\n\n            this.runningDirection = 0;\n        }\n\n        if (this.runningDirection == -1) {\n            this.graphics.flipHorizontal = true;\n        } else if (this.runningDirection == 1) {\n            this.graphics.flipHorizontal = false;\n        }\n\n        this.vel.x = clamp(this.vel.x, -this.MAX_VELOCITY, this.MAX_VELOCITY)\n\n        // just jumping\n        if (jumpPressed && this.isOnGround) {\n            this.vel.y = -this.JUMP_FORCE;\n            this.isOnGround = false;\n            this.isOnWheel = false;\n        }\n\n        // fall through the platform\n        if (this.isPressingDown && !this.isOnSolidPlatform) {\n            this.isOnGround = false;\n            this.isOnWheel = false;\n        }\n\n        // if space is held and we're going up, apply jump gravity\n        if (jumpHeld && Math.sign(this.vel.y) < 0) {\n            this.acc.y = this.JUMP_GRAVITY\n        } else {\n            this.acc.y = this.GRAVITY\n        }\n\n        // not on the ground always means flying\n        if (!this.isOnGround) {\n            this.graphics.use(this.animations.flying);\n            this.graphics.offset = vec(0, 4);\n            this.updateItemPosition('back');\n        } else {\n            // when on the ground, we are either running on the wheel\n            if (this.isOnWheel) {\n                if (this.runningDirection == 0) {\n                    this.graphics.use(this.animations.idle);\n                    this.graphics.offset = vec(0, 0);\n                    this.updateItemPosition('hand');\n                }\n                else {\n                    this.graphics.use(this.animations.run);\n                    this.graphics.offset = vec(0, 4);\n                    this.updateItemPosition('back');\n                }\n            }\n\n            // else we're idling\n            else if (Math.abs(this.vel.x) < 50) {\n                this.graphics.use(this.animations.idle);\n                this.graphics.offset = vec(0, 0);\n                this.updateItemPosition('hand');\n            }\n            else {\n                this.graphics.use(this.animations.run);\n                this.graphics.offset = vec(0, 4);\n                this.updateItemPosition('back');\n            }\n        }\n\n        // ground cancels all Y movement\n        if (this.isOnGround) {\n            this.acc.y = 0;\n            this.vel.y = 0;\n        }\n\n        if (this.isOnWheel) {\n            this.acc.x = 0;\n            this.vel.x = 0;\n        }\n\n        this.lastGroundState = this.isOnGround;\n\n        if (!this.isOnWheel) {\n            let loudness;\n            if (this.isOnGround) {\n                 loudness = Math.min(Math.abs(this.vel.x) / this.MAX_VELOCITY * 2, 1)\n            } else {\n                loudness=   0\n            }\n\n            Resources.Load.RunSound.volume = loudness * 0.25;\n        } else {\n            if (this.runningDirection == 0)\n                Resources.Load.RunSound.volume = 0.0;\n            else {\n                Resources.Load.RunSound.volume = 0.25;\n            }\n        }\n\n        this.pos.x = clamp(this.pos.x, 20, 380)\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody?.collisionType === CollisionType.Fixed || otherBody?.collisionType === CollisionType.Passive) {\n            // player landed on the ground\n            if ((side === Side.Bottom && !this.isPressingDown && otherBody.owner instanceof Platform) || otherBody.owner instanceof SolidPlatform) {\n                this.isOnGround = true;\n\n                if (otherBody.owner instanceof WheelPlatform) {\n                    this.isOnWheel = true;\n                    this.pos.x = other.center.x;\n                }\n\n                // push out of the platform\n                // minuses because y axis is negative upwards\n                this.pos.y = other.getFurthestPoint(vec(0, -1)).y\n                    - self.bounds.height / 2 + 0.1;\n            }\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        super.onCollisionEnd(self, other, side, lastContact);\n\n        const otherBody = other.owner.get(BodyComponent)\n\n        // Tom is fucking going to jail\n        if (otherBody?.owner instanceof Platform && otherBody.pos.y > this.pos.y) {\n            this.isOnGround = false;\n        }\n    }\n\n    onKeyPress(evt: ex.Input.KeyEvent) {\n        if (evt.key === ex.Input.Keys.Space) {\n            this.dropItem();\n        }\n    }\n\n    isCarryingItem() {\n        return (this.carryingItem != null);\n    }\n\n    pickUpItem(item: ItemActor) {\n        this.carryingItem = item;\n        item.body.collisionType = ex.CollisionType.Passive;\n        this.addChild(this.carryingItem);\n    }\n\n    dropItem() {\n        if (this.carryingItem) {\n            this.removeChild(this.carryingItem)\n\n            this.carryingItem.pos = this.pos.clone().add(this.carryingItem.offset);\n            this.carryingItem.vel = ex.vec(this.vel.x / 5, this.vel.y / 10);\n\n            this.carryingItem.body.collisionType = ex.CollisionType.Active;\n\n            this.carryingItem.offset = vec(0, 0);\n\n            this.scene?.add(this.carryingItem);\n\n            this.carryingItem = null;\n        }\n    }\n\n    private updateItemPosition(position: string) {\n        let facing = this.graphics.flipHorizontal;\n\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset  = Math.sin(frame);\n\n        let handOffset = vec(facing ? -10 : 10, 3 + uglyOffset);\n        let backOffset = vec(facing ? -20 : 20, 6 + uglyOffset);\n\n        if (this.carryingItem != undefined) {\n            this.carryingItem.graphics.flipHorizontal = facing;\n\n            if (position == 'hand') {\n                this.carryingItem.offset = handOffset;\n            }\n            else {\n                this.carryingItem.offset = backOffset;\n            }\n        }\n    }\n}\n","import * as ex from 'excalibur';\nimport {BodyComponent, Collider, CollisionContact, CollisionType, Color, Engine, Side} from 'excalibur';\nimport {Player} from \"@/actors/player\";\nimport {Resources} from \"@/resources\";\n\nexport class Platform extends ex.Actor {\n    constructor(x: number, y: number, width: number, height: number, rotation: number = 0, collisionType: CollisionType = CollisionType.Passive) {\n        super({\n            pos: ex.vec(x, y),\n            width: width,\n            height: height,\n            color: Color.Transparent,\n            collisionType: collisionType,\n        });\n\n        this.rotation = rotation;\n\n        if (width == 25)\n            this.graphics.use(Resources.Load.PlatformWheel.toSprite());\n        if (width == 30)\n            this.graphics.use(Resources.Load.PlatformSmall.toSprite());\n        else if (width == 60)\n            this.graphics.use(Resources.Load.PlatformMedium.toSprite());\n    }\n}\n\nexport class SolidPlatform extends Platform {\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            otherBody.owner.isOnSolidPlatform = true;\n            otherBody.owner.isOnGround = true;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        // this happened. no idea why\n        if (other.owner == null)\n            return;\n\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            otherBody.owner.isOnSolidPlatform = false;\n        }\n    }\n}\n\nexport class WheelPlatform extends Platform {\n    public isOnPlayform = false;\n    public direction  = 0;\n\n    playerReference?: Player;\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.playerReference && this.playerReference.isOnGround) {\n            this.direction = this.playerReference.runningDirection;\n            this.isOnPlayform = this.playerReference.isOnWheel;\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = undefined;\n            this.direction = 0;\n        }\n    }\n\n}","import * as ex from 'excalibur';\nimport {Engine, vec} from 'excalibur';\nimport { Machine } from '../machines/machine';\nimport { WheelPlatform } from \"@/actors/platform\";\nimport {Resources} from \"@/resources\";\n\nexport class HamsterWheel extends ex.Actor {\n    public linkedMachine: Machine | undefined;\n\n    public wheel: ex.Actor;\n    public platform: WheelPlatform;\n\n    constructor(x: number, y: number, radius: number, linkedMachine?: Machine) {\n        super({ pos: ex.vec(x, y) });\n\n        this.linkedMachine = linkedMachine;\n\n        // Add wheel component\n        this.wheel = new ex.Actor({\n            radius: radius,\n            color: ex.Color.Gray,\n            scale: vec(1.1, 1.1),\n        });\n\n        this.wheel.graphics.use(Resources.Load.Wheel.toSprite())\n\n        const platformWidth = 25;\n        const platformHeight = 10;\n\n        // Add platform component on top of the wheel\n        this.platform = new WheelPlatform(0, radius + platformHeight / 2, platformWidth, platformHeight);\n\n        // Add components as children\n        this.addChild(this.wheel);\n        this.addChild(this.platform);\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.platform.direction != 0 && this.platform.isOnPlayform) {\n            this.wheel.actions.rotateBy(this.platform.direction / 20, 100);\n\n            if (this.linkedMachine != undefined) {\n                this.linkedMachine.remainingProcessingTime = Math.max(this.linkedMachine.remainingProcessingTime - delta / 1000, 0);\n            }\n        }\n    }\n}\n","import * as ex from 'excalibur';\nimport { Machine } from '../machines/machine';\nimport {BodyComponent, Collider, CollisionContact, Engine, Shape, Side, vec} from \"excalibur\";\nimport {Player} from \"@/actors/player\";\nimport {Resources} from \"@/resources\";\nimport {Platform} from \"@/actors/platform\";\n\nexport class Lever extends ex.Actor {\n    public linkedPlatform!: Platform;\n\n    playerReference!: Player | null\n\n    constructor(x: number, y: number, linkedPlatform?: Platform) {\n        super({\n            pos: ex.vec(x, y),\n            width: 8,\n            height: 32,\n            offset: vec(0, -16),\n            collisionType: ex.CollisionType.Passive,\n            collider: Shape.Circle(4)\n        });\n\n        this.rotation = -1/2;\n\n        this.graphics.use(Resources.Load.Lever.toSprite())\n\n        if (linkedPlatform) {\n            this.linkedPlatform = linkedPlatform;\n        }\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.playerReference && this.actions.getQueue().isComplete()) {\n            let direction = Math.sign(this.playerReference.vel.x)\n\n            if (direction) {\n                this.actions.clearActions()\n                this.actions.rotateTo(direction / 2, 5);\n\n                this.linkedPlatform?.actions.rotateTo(direction / 2, 5);\n\n            }\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = null;\n        }\n    }\n\n}\n","import * as ex from 'excalibur';\nimport { ItemActor } from './items/itemActor';\nimport {Item} from './items/items';\nimport { Resources } from \"@/resources\";\nimport { clamp, CollisionType, Engine, vec } from 'excalibur';\nimport { Coffee, Tea } from \"@/actors/items/items\";\nimport { DesiredItem } from '@/levels/level';\n\nexport class Customer extends ex.Actor {\n    private static readonly MAX_VELOCITY = 300;\n    private static readonly ACCELERATION = 700;\n    private static readonly PICK_UP_THRESHOLD = 25;\n\n    private animations = {\n        run: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [0, 1, 2, 3, 4, 5, 6], 100),\n        flying: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [2, 3], 100),\n        idle: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaIdle,\n                grid: {\n                    columns: 3,\n                    rows: 1,\n                    spriteWidth: 32,\n                    spriteHeight: 32,\n                },\n            }), [0, 1, 2], 200),\n    };\n\n    private bubble: ex.Actor; // New bubble actor\n    public readonly desiredItem: DesiredItem;\n    public satisfied: boolean = false;\n    private assignedItem: ItemActor | null = null;\n    private runningDirection: number | null = null;\n    private runningTarget: number | null = null;\n\n    private carryingItem: ItemActor | null = null;\n\n    constructor(waitingX: number, startY: number, desiredProduct: DesiredItem) {\n        super({\n            pos: ex.vec(waitingX, startY - 16),\n            width: 32,\n            height: 32,\n            color: ex.Color.Yellow,\n            collisionType: ex.CollisionType.PreventCollision,\n            z: 5\n        });\n        this.desiredItem = desiredProduct;\n\n        // Initialize the bubble actor\n        this.bubble = new ex.Actor({\n            pos: ex.vec(0, -16), // Position above the customer\n            offset: ex.vec(0, -16), // Position above the customer\n            width: 32,\n            height: 32,\n            collisionType: ex.CollisionType.PreventCollision,\n            z: 5,\n        });\n\n        this.bubble.graphics.use(Resources.Load.Bubble.toSprite());\n        this.bubble.scale = vec(1, 1)\n\n        let itemActor = new ItemActor(desiredProduct.item);\n        itemActor.pos = vec(0, -18)\n        itemActor.body.collisionType = CollisionType.PreventCollision;\n        itemActor.z = 10\n        this.bubble.addChild(itemActor)\n\n        // Attach the bubble to the customer as a child actor\n        this.addChild(this.bubble);\n    }\n\n    pickUpItem(item: ItemActor) {\n        this.carryingItem = item;\n        item.body.collisionType = ex.CollisionType.PreventCollision;\n        item.pos = vec(0, 0);\n        item.vel = vec(0, 0);\n        item.angularVelocity = 0;\n\n        item.rotation = 0;\n        this.addChild(this.carryingItem);\n\n        this.bubble.actions.scaleTo(vec(0, 0), vec(5, 10));\n    }\n\n    private updateBubblePosition() {\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset  = Math.sin(frame);\n\n        this.bubble.pos = ex.vec(0, -16 + uglyOffset);\n    }\n\n    private updateItemPosition(position: string) {\n        let facing = this.graphics.flipHorizontal;\n\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset = Math.sin(frame);\n\n        let handOffset = vec(facing ? -10 : 10, 3 + uglyOffset);\n        let backOffset = vec(facing ? -20 : 20, 7 + uglyOffset);\n\n        if (this.carryingItem != undefined) {\n            this.carryingItem.graphics.flipHorizontal = facing;\n\n            if (position == 'hand') {\n                this.carryingItem.offset = handOffset;\n            }\n            else {\n                this.carryingItem.offset = backOffset;\n            }\n        }\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.runningTarget !== null) {\n            this.runningDirection = Math.sign(this.runningTarget - this.pos.x);\n\n            if (Math.abs(this.runningTarget - this.pos.x) < Customer.PICK_UP_THRESHOLD) {\n                this.runningTarget = null;\n\n                if (this.assignedItem) {\n                    this.satisfied = true;\n                    this.pickUpItem(this.assignedItem)\n                    this.goTo(10000)\n                }\n            }\n        } else {\n            if (!this.satisfied) {\n                this.runningDirection = null;\n            }\n        }\n\n        if (this.satisfied && this.pos.x > engine.drawWidth + this.width) {\n            console.log(\"Killing customer\")\n            this.kill();\n        }\n\n        if (this.runningDirection !== null) {\n            this.acc.x = Customer.ACCELERATION * this.runningDirection;\n        } else {\n            this.acc.x = 0;\n            this.vel.x *= 0.75;\n        }\n\n        if (this.runningDirection == -1) {\n            this.graphics.flipHorizontal = true;\n            this.graphics.use(this.animations.run);\n            this.graphics.offset = vec(0, 4);\n            this.updateItemPosition('back');\n        } else if (this.runningDirection == 1) {\n            this.graphics.flipHorizontal = false;\n            this.graphics.use(this.animations.run);\n            this.graphics.offset = vec(0, 4);\n            this.updateItemPosition('back');\n        } else {\n            this.graphics.use(this.animations.idle);\n            this.graphics.offset = vec(0, 0);\n            this.updateItemPosition('hand');\n        }\n        this.vel.x = clamp(this.vel.x, -Customer.MAX_VELOCITY, Customer.MAX_VELOCITY)\n\n        this.updateBubblePosition()\n    }\n\n    goFetchItem(item: ItemActor) {\n        this.runningTarget = item.pos.x;\n        this.assignedItem = item;\n        item.allocatedToCustomer = true;\n    }\n\n    goTo(xPosition: number) {\n        this.runningTarget = xPosition;\n    }\n\n    productAssigned(): boolean {\n        return this.assignedItem != null;\n    }\n}\n","import {Engine, Shape, vec, Actor, Color, CollisionType, Collider, Side, CollisionContact} from \"excalibur\";\nimport {Customer} from \"@/actors/customer\";\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport { MainScene } from \"@/scenes/main-scene\";\nimport { DesiredItem } from \"@/levels/level\";\nimport {Resources} from \"@/resources\";\n\nexport class CustomerControl extends Actor {\n    private static readonly HEIGHT = 100;\n    private static readonly MIN_TIMEOUT = 1000;\n    private static readonly MAX_TIMEOUT = 3000;\n    private static readonly MAX_WAITING_CUSTOMERS = 2;\n    private static readonly ITEM_TIMEOUT = 5000;\n    private static readonly CUSTOMER_OFFSET = 40;\n\n    private mainScene: MainScene;\n    private customers: Customer[] = [];\n    private pendingProducts: ItemActor[] = [];\n\n    private desiredItems: DesiredItem[];\n\n    constructor(scene: MainScene, x: number, y: number, width: number, desiredItems: DesiredItem[], height: number = 80) {\n        super({\n            pos: vec(x, y),\n            height: height,\n            width: width,\n            color: Color.Transparent,\n            collisionType: CollisionType.Passive,\n        });\n\n        this.mainScene = scene;\n        this.desiredItems = desiredItems;\n    }\n\n    sampleItem(): DesiredItem {\n        const cumulativeWeights: number[] = [];\n        this.desiredItems.reduce((acc, item, i) => {\n            cumulativeWeights[i] = acc + item.distribution;\n            return cumulativeWeights[i];\n        }, 0);\n\n        const random = Math.random() * cumulativeWeights[cumulativeWeights.length - 1];\n\n        return this.desiredItems[cumulativeWeights.findIndex(cumulativeWeight => random < cumulativeWeight)];\n    }\n\n    onInitialize(engine: Engine) {\n        this.scheduleCustomersRefresh(engine);\n    }\n\n    private scheduleCustomersRefresh(engine: Engine) {\n        const timeout = Math.random() * (CustomerControl.MAX_TIMEOUT - CustomerControl.MIN_TIMEOUT) + CustomerControl.MIN_TIMEOUT;\n        const scene = this.mainScene;\n        if (scene === null)\n            return;\n        setTimeout(() => {\n            this.customers = this.customers.filter(c => !c.isKilled());\n            let waitingCustomers = this.customers.filter(c => !c.productAssigned());\n            if (waitingCustomers.length < CustomerControl.MAX_WAITING_CUSTOMERS) {\n                console.log(\"Adding customer.\")\n\n                const product = this.sampleItem()\n                const waitingX = this.width + CustomerControl.CUSTOMER_OFFSET;\n                const customer = new Customer(waitingX, this.pos.y - 10, product);\n\n                if (Math.random() < 0.5) {\n                    Resources.Load.Chirp1Sound.play(0.5)\n                } else {\n                    Resources.Load.Chirp2Sound.play(0.5)\n                }\n\n                this.customers.push(customer);\n                waitingCustomers = this.customers.filter(c => !c.productAssigned());\n\n                for (let i = 0; i < waitingCustomers.length; i++) {\n                    waitingCustomers[i].goTo(this.width - CustomerControl.CUSTOMER_OFFSET * (waitingCustomers.length - i));\n                }\n\n                scene.add(customer);\n            }\n\n            this.scheduleCustomersRefresh(engine);\n        }, timeout);\n    }\n\n    onCollisionStart(self: Collider, other: Collider, side: Side, contact: CollisionContact) {\n        const itemActor = other.owner;\n        if (!(itemActor instanceof ItemActor)) return;\n        if (itemActor.allocatedToCustomer) return;\n\n        let item = itemActor.item;\n\n        const customer = this.customers.find(c =>\n            !c.satisfied && !c.productAssigned() && Object.getPrototypeOf(c.desiredItem.item) == Object.getPrototypeOf(item)\n        );\n\n        if (customer) {\n            customer.goFetchItem(itemActor);\n            console.log('Fetched item')\n            this.mainScene.resolveCustomer(customer);\n        } else {\n            // Add item to pendingProducts\n            this.pendingProducts.push(itemActor);\n\n            // console.log(itemActor)\n\n            // Set a timeout to remove the item if it’s not assigned to a customer\n            setTimeout(() => {\n                // Check if item is still in pendingProducts and not assigned\n                if (this.pendingProducts.includes(itemActor) && !itemActor.allocatedToCustomer) {\n                    // Remove from pendingProducts\n                    this.pendingProducts = this.pendingProducts.filter(p => p !== itemActor);\n\n                    itemActor.actions.fade(0, 1000).callMethod(() => {\n                        itemActor.kill();\n                    });\n                }\n            }, CustomerControl.ITEM_TIMEOUT);\n        }\n    }\n}","import { ItemActor } from '../items/itemActor';\nimport {Drawable, Garbage, Item} from '@/actors/items/items';\nimport {\n    Actor,\n    ActorArgs, BaseAlign,\n    Collider,\n    CollisionContact,\n    CollisionType,\n    Color,\n    Engine, Font, FontUnit,\n    Label,\n    Side, Sound, Sprite, TextAlign, vec,\n    Vector\n} from 'excalibur';\n\nexport abstract class Machine extends Actor implements Drawable {\n    public isOn: boolean = true;\n\n    intakeActor: Actor;\n\n    private itemQueue: Array<ItemActor> = [];\n    private blacklistedItemQueue: Array<ItemActor> = [];\n\n    private isProcessing: boolean = false;\n    private manual: boolean;\n\n    public remainingProcessingTime = 0;\n    public maxProcessingTime = 1.5;\n\n    private tooltip: Label;\n\n    private sound: Sound | undefined;\n\n    constructor(config?: ActorArgs, manual: boolean = false, sound?: Sound) {\n        super({\n            color: Color.Gray,\n            collisionType: CollisionType.Fixed,\n            ...config,\n        });\n\n        this.manual = manual;\n\n        this.sound = sound;\n\n        // Create tooltip (initially hidden)\n        this.tooltip = new Label({\n            text: '',\n            pos: vec(0, 5), // Position the label above the station\n            font: new Font({\n                textAlign: TextAlign.Center,\n                baseAlign: BaseAlign.Middle,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n                family: 'Silkscreen',\n                size: 15,\n                unit: FontUnit.Px,\n                color: Color.White,\n                smoothing: false,\n            })\n        });\n\n        this.tooltip.z = 1000;\n\n        let [intakeStart, intakeEnd] = this.getIntake();\n        this.intakeActor = new Actor({\n            pos: intakeStart.add(intakeEnd).scale(1 / 2),\n            width: intakeEnd.x - intakeStart.x,\n            height: intakeEnd.y - intakeStart.y,\n            collisionType: CollisionType.Fixed,\n            color: Color.Transparent,\n        });\n        this.intakeActor.on('collisionstart', e => {\n            if (this.isOn && e.other instanceof ItemActor) {\n                const itemActor = e.other as ItemActor;\n\n                if (!this.itemQueue.includes(itemActor) && !this.blacklistedItemQueue.includes(itemActor)) {\n                    this.itemQueue.push(itemActor);\n                }\n            }\n        });\n\n        this.addChild(this.intakeActor);\n        this.addChild(this.tooltip);\n    }\n\n    abstract getSprite(): Sprite;\n\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (!this.isProcessing) {\n            if (this.itemQueue.length != 0) {\n                this.isProcessing = true;\n                this.remainingProcessingTime = this.maxProcessingTime;\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\n\n                this.sound?.play(0.5);\n            }\n        } else {\n            if (this.remainingProcessingTime <= 0) {\n                const itemActor = this.itemQueue.shift()!;\n\n                itemActor.kill();\n                this.isProcessing = false;\n\n                this.sound?.stop();\n\n                this.remainingProcessingTime = 0;\n                this.tooltip.text = '';\n\n                let newItem = this.processItem(itemActor.item);\n\n                if (!newItem) {\n                    newItem = new Garbage();\n                }\n\n                const newActor = new ItemActor(newItem);\n                newActor.pos = this.getOutlet().add(this.pos);\n\n                newActor.vel = vec(Math.random(), 10)\n\n                this.blacklistedItemQueue.push(newActor);\n                this.scene?.add(newActor);\n\n            } else {\n                if (!this.manual) {\n                    this.remainingProcessingTime = Math.max(this.remainingProcessingTime - delta / 1000, 0);\n                }\n\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\n            }\n        }\n    }\n\n    /** Position of intake [start, end] in relative coordinates */\n    protected abstract getIntake(): [Vector, Vector];\n\n    /** Position of the outlet */\n    protected abstract getOutlet(): Vector;\n\n    protected abstract processItem(item: Item): Item | null;\n}\n","import { Item } from '@/actors/items/items';\nimport { Machine } from './machine';\nimport {CompositeCollider, Loader, Rectangle, Resource, Shape, Sprite, vec, Vector} from 'excalibur';\nimport { Resources } from '@/resources';\nimport { Paddle } from '../paddle';\n\nexport class Brewer extends Machine {\n    getSprite(): Sprite {\n        const sprite = Resources.Machines().getSprite(2, 0)\n        sprite.scale = vec(0.22, 0.22);\n        return sprite;\n    }\n\n    constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 1,\n        }, false, Resources.Load.BrewerSound);\n        this.graphics.use(Resources.Machines().getSprite(2, 0));\n\n        this.collider.set(new CompositeCollider([\n            Shape.Box(45, 16, undefined, vec(0, -6)),\n            // in tile coordinates\n            Shape.Polygon([vec(10, 1), vec(14, 21), vec(15, 21), vec(11, 0)], vec(-24, -35)),\n            Shape.Polygon([vec(43, 1), vec(42, 0), vec(39, 21), vec(40, 21)], vec(-24, -35)),\n        ]));\n    }\n\n    processItem(item: Item): Item | null {\n        return item.brew ? item.brew() : null;\n    }\n\n    protected getIntake(): [Vector, Vector] {\n        return [\n            vec(-8, -16),\n            vec(8, -4),\n        ];\n    }\n    protected getOutlet(): Vector {\n        return vec(0, 10);\n    }\n}\n","import { Actor, CollisionType, Color, vec, Vector } from \"excalibur\";\n\n\n/** Small box collider with rotation used for details of machine colliders */\nexport class Paddle extends Actor {\n\n    constructor(pos: Vector, size: Vector, degrees: number = 0) {\n        super({\n            pos,\n            rotation: degrees / 180 * Math.PI,\n            width: size.x,\n            height: size.y,\n            collisionType: CollisionType.Fixed,\n        })\n    }\n}","import { Machine } from './machine';\nimport { ItemActor } from '../items/itemActor';\nimport { Item } from '@/actors/items/items';\nimport { Actor, CircleCollider, Color, CompositeCollider, EdgeCollider, Engine, Sprite, vec, Vector } from 'excalibur';\nimport { Resources } from '@/resources';\nimport { Paddle } from '../paddle';\nimport {Recipe} from \"@/scenes/level-intro\";\n\n\nexport class Grinder extends Machine {\n    getSprite(): Sprite {\n        const sprite = Resources.Machines().getSprite(0, 0)\n        sprite.scale = vec(0.22, 0.22);\n        return sprite;\n    }\n\n    crank: Actor;\n\n    grindedLastTick: boolean = true\n\n    constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 1,\n        }, true);\n\n        this.graphics.add(Resources.Machines().getSprite(0, 0));\n        this.collider.set(new CircleCollider({ radius: 16, offset: vec(0, 6) }));\n\n        this.crank = new Actor({\n            pos: vec(0.5, 5),\n            z: this.z + 1,\n        });\n        const crankSprite = Resources.Machines().getSprite(1, 0)\n        this.crank.graphics.add(crankSprite);\n        this.addChild(this.crank);\n\n        this.addChild(new Paddle(vec(-11, -18), vec(27, 2), 75));\n        this.addChild(new Paddle(vec(12, -18), vec(27, 2), -75));\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        super.onPostUpdate(engine, delta);\n\n        let grinding = false;\n        if (this.isOn) {\n            let oldRotation = this.crank.rotation;\n\n            this.crank.rotation = -(this.remainingProcessingTime / this.maxProcessingTime)  * Math.PI * 2;\n\n            if (oldRotation != this.crank.rotation) {\n                grinding = true;\n            } else {\n                this.grindedLastTick = false;\n            }\n        }\n\n        if (grinding) {\n             if (!this.grindedLastTick) {\n                 Resources.Load.GrinderSound.seek(this.maxProcessingTime - this.remainingProcessingTime);\n                 Resources.Load.GrinderSound.play(0.5);\n             }\n        } else {\n            Resources.Load.GrinderSound.stop();\n        }\n\n        this.grindedLastTick = grinding;\n    }\n\n    protected processItem(item: Item): Item | null {\n        return item.grind ? item.grind() : null;\n    }\n    protected getIntake(): [Vector, Vector] {\n        return [\n            vec(-5, -10),\n            vec(5, -5)\n        ];\n    }\n    protected getOutlet(): Vector {\n        return vec(.5, 10);\n    }\n}\n","import {\n    Actor,\n    BaseAlign,\n    BodyComponent,\n    Collider,\n    CollisionContact,\n    CollisionType,\n    Color,\n    Engine,\n    Font,\n    FontUnit,\n    Keys,\n    Label,\n    Side,\n    TextAlign,\n    vec\n} from 'excalibur';\nimport {Player} from \"@/actors/player\";\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport {Item} from \"@/actors/items/items\";\nimport {Resources} from \"@/resources\";\n\nclass ResourceStation extends Actor {\n    private tooltip: Label;\n    private cooldownTimer = 0;\n    private isOnCooldown = false;\n\n    playerReference?: Player;\n    item: Item;\n\n    COOLDOWN = 3;\n\n    constructor(x: number, y: number, size: number, item: Item) {\n        super({\n            x: x,\n            y: y,\n            width: size,\n            height: size,\n            color: Color.Gray,\n            collisionType: CollisionType.Passive,\n        });\n\n        this.item = item;\n\n        // Create tooltip (initially hidden)\n        this.tooltip = new Label({\n            text: 'Space',\n            pos: vec(0, -size / 2 - 6), // Position the label above the station\n            font: new Font({\n                textAlign: TextAlign.Center,\n                baseAlign: BaseAlign.Bottom,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n                family: 'Silkscreen',\n                size: 15,\n                unit: FontUnit.Px,\n                color: Color.White,\n                smoothing: false,\n            })\n        });\n\n        this.tooltip.scale = vec(0, 0);\n\n        let itemActor = new ItemActor(item);\n        itemActor.body.collisionType = CollisionType.PreventCollision;\n\n        this.addChild(this.tooltip); // Attach tooltip to the ResourceStation\n        this.addChild(itemActor)\n\n        itemActor.scale = vec(0.8, 0.8)\n\n        this.graphics.use(Resources.Load.ResourceStation.toSprite())\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        const fPressed = engine.input.keyboard.wasPressed(Keys.Space);\n\n        // Cooldown logic\n        if (this.isOnCooldown) {\n            // Decrease the cooldown timer by the delta time\n            this.cooldownTimer -= delta / 1000; // Convert ms to seconds\n            if (this.cooldownTimer <= 0) {\n                this.isOnCooldown = false;\n                this.tooltip.text = 'Space'; // Reset tooltip text when cooldown ends\n            } else {\n                // Update tooltip text with remaining time\n                this.tooltip.text = `${this.cooldownTimer.toFixed(1)}`;\n                this.tooltip.graphics.opacity = 0.5;\n            }\n        } else if (this.playerReference) {\n            if (!this.playerReference.isCarryingItem()) {\n                this.tooltip.graphics.opacity = 1;\n            } else {\n                this.tooltip.graphics.opacity = 0.5;\n            }\n\n            // Allow item pickup only if not on cooldown\n            if (fPressed && !this.playerReference.isCarryingItem() && !this.isOnCooldown) {\n                this.playerReference.pickUpItem(new ItemActor(this.item));\n\n                // Start the cooldown\n                this.isOnCooldown = true;\n                this.cooldownTimer = this.COOLDOWN;\n                this.tooltip.text = `${this.COOLDOWN.toFixed(1)}`; // Display initial cooldown time\n\n                this.actions.delay(this.COOLDOWN * 1000).callMethod(() => {\n                    // hide\n                    if (this.playerReference == undefined) {\n                        this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20)).callMethod(() => {this.tooltip.text = `Space`});\n                        ;\n                    }\n                })\n\n            }\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent);\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n            this.tooltip.actions.scaleTo(vec(1, 1), vec(10, 20));\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent);\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = undefined;\n\n            // only hide if it's not on cooldown, otherwise we hide when it comes out of cooldown\n            if (!this.isOnCooldown) {\n                this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20));\n            }\n        }\n    }\n}\n\nexport default ResourceStation;\n","import { AutomaticSquirrel } from \"@/actors/automatic-squirrel\";\nimport { HamsterWheel } from \"@/actors/contols/hamster-wheel\";\nimport { Lever } from \"@/actors/contols/lever\";\nimport { CustomerControl } from \"@/actors/customers-control\";\nimport { ItemActor } from \"@/actors/items/itemActor\";\nimport {Acorn, Coffee, GroundAcorn, GroundLeaf, Item, Leaf, Tea} from \"@/actors/items/items\";\nimport { Brewer } from \"@/actors/machines/brewer\";\nimport { Grinder } from \"@/actors/machines/grinder\";\nimport { Platform, SolidPlatform } from \"@/actors/platform\";\nimport { Player } from \"@/actors/player\";\nimport ResourceStation from \"@/actors/stations/resource-station\";\nimport { Resources } from \"@/resources\";\nimport { Level, Recipe } from \"@/scenes/level-intro\";\nimport { MainScene } from \"@/scenes/main-scene\";\nimport {Actor, CollisionType, Color, Scene, vec, Vector} from \"excalibur\";\nimport {Freezer} from \"@/actors/machines/freezer\";\n\n\nexport interface DesiredItem {\n    item: Item;\n    distribution: number;\n    price: number;\n}\n\nexport class Level1 implements Level {\n    readonly timeLimitMs: number = 0.5 * 60 * 1000;\n    readonly maxPoints: number = 100 // determined by playing\n    readonly size = Object.freeze(vec(400, 400)) as Vector;\n\n    getDesiredItems = (): DesiredItem[] => [\n        // {item: new Tea(),       distribution: 0.6, price: 10},\n        {item: new Coffee(),    distribution: 1.0, price: 15},\n    ];\n\n    getNewRecipes(): Recipe[] {\n        return [\n            new Recipe(new Acorn(), new Grinder(0, 0), new GroundAcorn()),\n            new Recipe(new GroundAcorn(), new Brewer(0, 0), new Coffee()),\n        ];\n    }\n\n    spawnItems(scene: MainScene): void {\n        let { x: W, y: H } = this.size;\n\n        ([\n            new SolidPlatform(W / 2, 200, W, 20), // the main solid platform\n            new SolidPlatform(W / 2, H, W, 20, 0, CollisionType.Fixed), // the bottom\n\n            // resource station platforms\n            new Platform(320, 150, 60, 10),\n\n            // brewer platform\n            new Platform(this.size.x / 2, 310, 30, 10, -1/2, CollisionType.Fixed),\n\n\n        ]).forEach(platform => scene.add(platform));\n\n        ([\n            //new ResourceStation(210, 150 - 15 - 5, 30, new Acorn()),\n            new ResourceStation(320, 150 - 15 - 5, 30, new Acorn()),\n        ]).forEach(station => scene.add(station));\n\n        // Create player-controlled squirrel\n        const player = new Player(this.size.x / 2, 180);\n        scene.add(player);\n\n        // // Create machines\n        const grinder = new Grinder(this.size.x / 2, 260);\n        scene.add(grinder);\n\n        const brewer = new Brewer(this.size.x / 2 - 30, 360);\n        scene.add(brewer);\n\n        const wheel = new HamsterWheel(90, 110, 50, grinder);\n        scene.add(wheel)\n\n        const background = new Actor({ z: -10 });\n        let sprite = Resources.Load.Background.toSprite()\n        sprite.tint = Color.Gray;\n        background.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(background);\n\n        const backgroundBranches = new Actor({ z: -10 });\n        sprite = Resources.Load.BackgroundBranches.toSprite()\n        backgroundBranches.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(backgroundBranches);\n\n        const customerControl = new CustomerControl(scene, this.size.x / 2, this.size.y, this.size.x, this.getDesiredItems());\n        scene.add(customerControl);\n    }\n}\n\n\nexport class Level2 implements Level {\n\n    timeLimitMs: number = 5 * 60 * 1000;\n    getDesiredItems(): DesiredItem[] {\n        return [\n            { item: new Tea(), distribution: 0.6, price: 10 },\n            { item: new Coffee(), distribution: 0.4, price: 15 },\n        ];\n    }\n    readonly maxPoints: number = 100 // determined by playing\n    readonly size = Object.freeze(vec(400, 400)) as Vector;\n\n    getNewRecipes(): Recipe[] {\n        return [\n            new Recipe(new Leaf(), new Grinder(0, 0), new GroundLeaf()),\n            new Recipe(new GroundLeaf(), new Brewer(0, 0), new Tea()),\n        ];\n    }\n\n    spawnItems(scene: MainScene): void {\n        let { x: W, y: H } = this.size;\n\n        ([\n            new SolidPlatform(W / 2, 200, W, 20), // the main solid platform\n            new SolidPlatform(W / 2, H, W, 20, 0, CollisionType.Fixed), // the bottom\n\n            // resource station platforms\n            new Platform(210, 120, 60, 10),\n            new Platform(320, 150, 60, 10),\n\n            // brewer platform\n            new Platform(this.size.x / 2, 310, 30, 10, -1/2, CollisionType.Fixed),\n\n\n        ]).forEach(platform => scene.add(platform));\n\n        ([\n            new ResourceStation(210, 120 - 15 - 5, 30, new Leaf()),\n            new ResourceStation(320, 150 - 15 - 5, 30, new Acorn()),\n        ]).forEach(station => scene.add(station));\n\n        // Create player-controlled squirrel\n        const player = new Player(this.size.x / 2, 180);\n        scene.add(player);\n\n        // // Create machines\n        const grinder = new Grinder(this.size.x / 2, 260);\n        scene.add(grinder);\n\n        const brewer = new Brewer(this.size.x / 2 - 30, 360);\n        scene.add(brewer);\n\n        const wheel = new HamsterWheel(90, 110, 50, grinder);\n        scene.add(wheel)\n\n        const background = new Actor({ z: -10 });\n        let sprite = Resources.Load.Background.toSprite()\n        sprite.tint = Color.Gray;\n        background.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(background);\n\n        const backgroundBranches = new Actor({ z: -10 });\n        sprite = Resources.Load.BackgroundBranches.toSprite()\n        backgroundBranches.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(backgroundBranches);\n\n        const customerControl = new CustomerControl(scene, this.size.x / 2, this.size.y, this.size.x, this.getDesiredItems());\n        scene.add(customerControl);\n    }\n}\n\nexport class Level3 implements Level {\n\n    timeLimitMs: number = 5 * 60 * 1000;\n    getDesiredItems(): DesiredItem[] {\n        return [\n            { item: new Tea(), distribution: 0.6, price: 10 },\n            { item: new Coffee(), distribution: 0.4, price: 15 },\n        ];\n    }\n    readonly maxPoints: number = 100 // determined by playing\n    readonly size = Object.freeze(vec(400, 400)) as Vector;\n\n    getNewRecipes(): Recipe[] {\n        return [\n            new Recipe(new Leaf(), new Grinder(0, 0), new GroundLeaf()),\n            new Recipe(new GroundLeaf(), new Brewer(0, 0), new Tea()),\n        ];\n    }\n\n    spawnItems(scene: MainScene): void {\n        let { x: W, y: H } = this.size;\n\n        let brewerPlatform = new Platform(this.size.x / 2, 310, 30, 10, -1/2, CollisionType.Fixed);\n\n        ([\n            new SolidPlatform(W / 2, 200, W, 20), // the main solid platform\n            new SolidPlatform(W / 2, H, W, 20, 0, CollisionType.Fixed), // the bottom\n\n            // resource station platforms\n            new Platform(210, 120, 60, 10),\n            new Platform(320, 150, 60, 10),\n\n            // brewer platform\n            brewerPlatform,\n\n        ]).forEach(platform => scene.add(platform));\n\n        ([\n            new ResourceStation(210, 120 - 15 - 5, 30, new Leaf()),\n            new ResourceStation(320, 150 - 15 - 5, 30, new Acorn()),\n        ]).forEach(station => scene.add(station));\n\n        // Create player-controlled squirrel\n        const player = new Player(this.size.x / 2, 180);\n        scene.add(player);\n\n        // // Create machines\n        const grinder = new Grinder(this.size.x / 2, 260);\n        scene.add(grinder);\n\n        const brewer = new Brewer(this.size.x / 2 - 30, 360);\n        scene.add(brewer);\n\n        const freezer = new Freezer(this.size.x / 2 + 30, 360);\n        scene.add(freezer);\n\n        const wheel = new HamsterWheel(90, 110, 50, grinder);\n        scene.add(wheel)\n\n        const lever = new Lever(240, 190, brewerPlatform);\n        scene.add(lever);\n\n        const background = new Actor({ z: -10 });\n        let sprite = Resources.Load.Background.toSprite()\n        sprite.tint = Color.Gray;\n        background.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(background);\n\n        const backgroundBranches = new Actor({ z: -10 });\n        sprite = Resources.Load.BackgroundBranches.toSprite()\n        backgroundBranches.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(backgroundBranches);\n\n        const customerControl = new CustomerControl(scene, this.size.x / 2, this.size.y, this.size.x, this.getDesiredItems());\n        scene.add(customerControl);\n    }\n}\n\nexport const LEVELS: Level[] = [\n    new Level1(),\n];\n","import { Engine, Loader, DisplayMode, Keys, Scene, CollisionType, Color, Actor } from 'excalibur';\nimport { GameStatistics, MainScene } from './scenes/main-scene';\nimport { Resources } from './resources';\nimport { Level, LevelIntro } from './scenes/level-intro';\nimport { GameStart } from './scenes/game-start';\nimport { LevelOutro } from './scenes/level-outro';\nimport { LEVELS } from './levels/level';\n\nconst enum Scenes {\n    Idle = 'idle',\n    Start = 'start',\n    Intro = 'intro',\n    Outro = 'outro',\n    Main = 'main',\n    Pause = 'pause',\n}\n\n/**\n * Managed game class\n */\nexport class Game extends Engine {\n    private mainScene!: MainScene;\n    private curLevelId: number = 0\n    private isShowDebug = false;\n\n    constructor() {\n        super({\n            displayMode: DisplayMode.FillScreen,\n            antialiasing: false,\n        });\n\n        this.debug.collider.boundsColor = Color.Red;\n        this.debug.collider.showAll = true;\n    }\n\n    public start() {\n        // Automatically load all default resources\n        this.debug.collider.showBounds = true;\n        const loader = new Loader(Object.values(Resources.Load));\n\n        return super.start(loader);\n    }\n\n    restart(): void {\n        this.goToScene(Scenes.Idle).then(() => {\n            this.removeScene(this.mainScene);\n            this.showCurrentLevel();\n        });\n    }\n\n    onStart(): void {\n        this.addScene(Scenes.Start, new GameStart(this));\n        this.goToScene(Scenes.Start);\n    }\n\n    public showLevelIntro(): void {\n        this.addScene(Scenes.Intro, new LevelIntro(this, LEVELS[this.curLevelId], this.curLevelId));\n        this.goToScene(Scenes.Intro);\n    }\n\n    public showLevelOutro(statics: GameStatistics) {\n        this.addScene(Scenes.Outro, new LevelOutro(this, this.curLevelId, statics));\n        this.goToScene(Scenes.Outro);\n    }\n\n    public showNextLevel(): void {\n        this.curLevelId++;\n        if (this.curLevelId >= LEVELS.length) {\n            this.restart()\n            // TODO: add and screen or restart\n        } else {\n            this.showCurrentLevel();\n        }\n    }\n\n    public showCurrentLevel(): void {\n        this.addScene(Scenes.Main, new MainScene(this, LEVELS[this.curLevelId]));\n\n        if (!Resources.Load.MainMusic.isPlaying())\n            Resources.Load.MainMusic.play(0.15)\n\n        this.goToScene(Scenes.Main);\n    }\n\n    public showPause(): void {\n        this.addScene(Scenes.Pause, new LevelIntro(this, LEVELS[this.curLevelId], this.curLevelId, true))\n\n        Resources.Load.MainMusic.pause();\n\n        this.goToScene(Scenes.Pause);\n    }\n\n    public exitPause(): void {\n        if (!Resources.Load.MainMusic.isPlaying())\n            Resources.Load.MainMusic.play(0.15)\n\n        this.goToScene(Scenes.Main);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.R)) {\n            this.restart();\n        }\n        if (engine.input.keyboard.wasPressed(Keys.F4)) {\n            this.isShowDebug = !this.isShowDebug;\n            this.showDebug(this.isShowDebug);\n        }\n    }\n}\n","import {Game} from \"./game\";\n\nconst game = new Game();\ngame.start().then(() => {\n  game.onStart();\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkexcalibur_webpack\"] = self[\"webpackChunkexcalibur_webpack\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [128], () => (__webpack_require__(546)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","ItemActor","constructor","item","spawnPos","super","radius","collisionType","Active","z","allocatedToCustomer","this","pos","clone","graphics","use","getSprite","onPostUpdate","engine","delta","angularVelocity","vel","x","runSound","jumpSound","drop","chirp1","chirp2","mainMusic","grinderSound","brewerSound","Load","Sword","Magor","VeverkaRun","VeverkaIdle","ItemsImg","Logo","Lever","PlatformSmall","PlatformMedium","PlatformWheel","ResourceStation","Wheel","Button","Machines","LevelTable","StarGold","StarGrey","Bubble","Background","BackgroundBranches","JumpSound","RunSound","Chirp1Sound","Chirp2Sound","DropSound","MainMusic","GrinderSound","BrewerSound","Items","lazy","fromImageSource","image","grid","columns","rows","spriteHeight","spriteWidth","provider","storage","Garbage","grind","GroundAcorn","roast","RoastedAcorn","brew","RoastedGroundAcorn","freeze","IceCream","SceneScaler","sizeInPixels","scene","handler","onScenePreDraw","bind","on","deactivate","off","e","camera","scale","zoom","Math","min","window","innerWidth","innerHeight","y","LevelBoundaries","size","config","W","H","p","bounds","top","push","Box","down","collider","set","MainScene","game","level","entityCounter","text","timeLabel","timePlayed","timeLastCustomer","statistics","customersServed","customerLongestWait","pointsMax","maxPoints","pointsGained","recipesMade","recipesCooked","Set","resolveCustomer","customer","desiredItem","price","customerWait","floor","add","console","log","onInitialize","spawnItems","initializeClock","mouse","input","pointers","primary","acorn","lastWorldPos","physics","gravity","font","textAlign","Left","baseAlign","Bottom","family","unit","Px","color","Black","smoothing","shadow","blur","offset","White","onPreDraw","ctx","timeLeft","timeLimitMs","minutes","seconds","onPreUpdate","showLevelOutro","keyboard","wasPressed","P","showPause","TextLabel","message","GREY","align","Center","_actor","actor","width","WHITE","ORANGE","ingredient1","ingredient2","result","show","plus","equals","ingr1Act","plusAct","ingr2Act","eqAct","resultAct","body","PreventCollision","LevelIntro","levelId","paused","height","scaler","hintText","backgroundColor","levelTable","toSprite","showHint","recipes","getNewRecipes","i","length","Space","exitPause","showCurrentLevel","onDeactivate","context","GameStart","logo","showLevelIntro","LevelOutro","ratio","starsGained","resultMessage","star","T","N","showNextLevel","Passive","GRAVITY","JUMP_GRAVITY","MAX_VELOCITY","ACCELERATION","TURN_ACCELERATION","AIR_MOVEMENT_PENALITY","JUMP_FORCE","isOnWheel","runningDirection","lastGroundState","isOnGround","isPressingDown","isOnSolidPlatform","carryingItem","animations","run","fromSpriteSheet","flying","idle","volume","loop","play","onKeyPress","jumpPressed","Up","jumpHeld","isHeld","heldLeft","A","heldRight","D","Right","movementDirection","sign","S","Down","direction","accel","acc","flipHorizontal","updateItemPosition","abs","loudness","onCollisionStart","self","other","side","contact","otherBody","owner","get","Fixed","WheelPlatform","center","getFurthestPoint","onCollisionEnd","lastContact","evt","key","Keys","dropItem","isCarryingItem","pickUpItem","addChild","removeChild","position","facing","frame","current","_currentFrame","uglyOffset","sin","handOffset","backOffset","undefined","rotation","Transparent","isOnPlayform","playerReference","linkedMachine","wheel","Gray","platform","platformHeight","actions","rotateBy","remainingProcessingTime","max","Customer","waitingX","startY","desiredProduct","Yellow","satisfied","assignedItem","runningTarget","bubble","itemActor","scaleTo","updateBubblePosition","PICK_UP_THRESHOLD","goTo","drawWidth","kill","goFetchItem","xPosition","productAssigned","desiredItems","customers","pendingProducts","mainScene","sampleItem","cumulativeWeights","reduce","distribution","random","findIndex","cumulativeWeight","scheduleCustomersRefresh","timeout","MAX_TIMEOUT","MIN_TIMEOUT","setTimeout","filter","c","isKilled","waitingCustomers","MAX_WAITING_CUSTOMERS","product","CUSTOMER_OFFSET","find","Object","getPrototypeOf","includes","fade","callMethod","ITEM_TIMEOUT","HEIGHT","Machine","manual","sound","isOn","itemQueue","blacklistedItemQueue","isProcessing","maxProcessingTime","tooltip","Middle","intakeStart","intakeEnd","getIntake","intakeActor","shift","stop","newItem","processItem","newActor","getOutlet","toFixed","sprite","Polygon","Paddle","degrees","PI","grindedLastTick","crank","crankSprite","grinding","oldRotation","seek","cooldownTimer","isOnCooldown","COOLDOWN","fPressed","opacity","delay","LEVELS","getDesiredItems","forEach","station","player","grinder","brewer","background","tint","anchor","backgroundBranches","customerControl","Game","displayMode","FillScreen","antialiasing","curLevelId","isShowDebug","debug","boundsColor","Red","showAll","start","showBounds","loader","values","restart","goToScene","then","removeScene","onStart","addScene","statics","isPlaying","pause","R","F4","showDebug","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","d","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","Error","replace","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}