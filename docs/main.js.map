{"version":3,"file":"main.js","mappings":"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","sources":["webpack://excalibur-webpack/webpack/runtime/chunk loaded","webpack://excalibur-webpack/./src/scenes/scene-scaler.ts","webpack://excalibur-webpack/./src/actors/level-boundary.ts","webpack://excalibur-webpack/./src/scenes/main-scene.ts","webpack://excalibur-webpack/./src/resources.ts","webpack://excalibur-webpack/./src/ui/text-label.ts","webpack://excalibur-webpack/./src/actors/items/itemActor.ts","webpack://excalibur-webpack/./src/scenes/level-intro.ts","webpack://excalibur-webpack/./src/scenes/game-start.ts","webpack://excalibur-webpack/./src/scenes/level-outro.ts","webpack://excalibur-webpack/./src/actors/player.ts","webpack://excalibur-webpack/./src/actors/platform.ts","webpack://excalibur-webpack/./src/actors/contols/hamster-wheel.ts","webpack://excalibur-webpack/./src/actors/contols/lever.ts","webpack://excalibur-webpack/./src/actors/customer.ts","webpack://excalibur-webpack/./src/actors/customers-control.ts","webpack://excalibur-webpack/./src/actors/items/items.ts","webpack://excalibur-webpack/./src/actors/machines/machine.ts","webpack://excalibur-webpack/./src/actors/machines/brewer.ts","webpack://excalibur-webpack/./src/actors/paddle.ts","webpack://excalibur-webpack/./src/actors/machines/grinder.ts","webpack://excalibur-webpack/./src/actors/stations/resource-station.ts","webpack://excalibur-webpack/./src/actors/machines/freezer.ts","webpack://excalibur-webpack/./src/levels/level.ts","webpack://excalibur-webpack/./src/game.ts","webpack://excalibur-webpack/./src/index.ts","webpack://excalibur-webpack/webpack/bootstrap","webpack://excalibur-webpack/webpack/runtime/define property getters","webpack://excalibur-webpack/webpack/runtime/global","webpack://excalibur-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://excalibur-webpack/webpack/runtime/publicPath","webpack://excalibur-webpack/webpack/runtime/jsonp chunk loading","webpack://excalibur-webpack/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import { ExcaliburGraphicsContext, PreDrawEvent, Scene, vec, Vector } from \"excalibur\";\n\n\n/** Updates the scene camera pos and zoom so that the entire scene is visible */\nexport class SceneScaler {\n\n    private handler: typeof this.onScenePreDraw;\n\n    constructor(\n        readonly sizeInPixels: Vector,\n        readonly scene: Scene,\n    ) {\n        this.handler = this.onScenePreDraw.bind(this);\n        scene.on('predraw', this.handler);\n    }\n\n    deactivate() {\n        this.scene.off('predraw', this.handler);\n    }\n\n    private onScenePreDraw(e: PreDrawEvent): void {\n        this.scene.camera.pos = this.sizeInPixels.scale(1 / 2);\n\n        const zoom = Math.min(\n            window.innerWidth / this.sizeInPixels.x,\n            window.innerHeight / this.sizeInPixels.y);\n\n        this.scene.camera.zoom = zoom;\n        //console.log('ctx: ', e.ctx.width, e.ctx.height, 'window: ', window.innerWidth, window.innerHeight);\n    }\n}\n","import { Action, Actor, CompositeCollider, Shape, vec, Vector } from \"excalibur\";\n\n\nexport interface BoundariesConfig {\n    top?: boolean, down?: boolean, left?: boolean, right?: boolean,\n}\n\nexport class LevelBoundaries extends Actor {\n\n    constructor(private readonly size: Vector, config?: BoundariesConfig) {\n        super();\n\n        const { x: W, y: H } = size;\n        const p = 10;\n        const bounds: any = [];\n\n        if (config?.top ?? true) bounds.push(Shape.Box(W + 2 * p, p, vec(0, 0), vec(0, -p)));\n        if (config?.down ?? true) bounds.push(Shape.Box(W + 2 * p, p, vec(0, 0), vec(0, H + p)));\n        if (config?.top ?? true) bounds.push(Shape.Box(p, H, vec(0, 0), vec(-p, 0)));\n        if (config?.top ?? true) bounds.push(Shape.Box(p, H, vec(0, 0), vec(W + p, 0)));\n\n        this.collider.set(new CompositeCollider(bounds));\n        // TODO set type to FIXED\n    }\n}","import * as ex from 'excalibur';\nimport {Color, ExcaliburGraphicsContext, Label, vec} from 'excalibur';\nimport { ItemActor } from '@/actors/items/itemActor';\nimport { Coffee } from '@/actors/items/items';\nimport { SceneScaler } from \"@/scenes/scene-scaler\";\nimport { Level } from './level-intro';\nimport { Game } from '@/game';\nimport { LevelBoundaries } from '@/actors/level-boundary';\nimport { Customer } from '@/actors/customer';\n\n\nexport interface GameStatistics {\n    customersServed: number\n    customerLongestWait: number\n    pointsMax: number\n    pointsGained: number\n    recipesMade: number\n}\n\nexport class MainScene extends ex.Scene {\n    entityCounter = new Label({ text: '' });\n    timeLabel = new Label({ text: '' });\n    private timePlayed: number\n    private timeLastCustomer: number\n    private recipesCooked: Set<string>;\n    private statistics: GameStatistics\n\n    constructor(\n        private game: Game,\n        private level: Level,\n    ) {\n        super();\n        this.timePlayed = 0;\n        this.timeLastCustomer = 0;\n        this.statistics = {\n            customersServed: 0,\n            customerLongestWait: 0,\n            pointsMax: level.maxPoints,\n            pointsGained: 0,\n            recipesMade: 0,\n        }\n        this.recipesCooked = new Set<string>();\n    }\n\n    resolveCustomer(customer: Customer) {\n        const item = customer.desiredItem;\n        this.statistics.customersServed++;\n        this.statistics.pointsGained += item.price;\n        // simplification\n        const customerWait = Math.floor((this.timePlayed - this.timeLastCustomer) / 1000);\n        if (customerWait > this.statistics.customerLongestWait) {\n            this.statistics.customerLongestWait = customerWait;\n        }\n        this.recipesCooked.add(typeof item.item);\n        this.statistics.recipesMade = this.recipesCooked.size;\n        console.log(this.statistics);\n    }\n\n    onInitialize(engine: ex.Engine) {\n        this.backgroundColor = new Color(216, 185, 157);\n        this.add(this.entityCounter);\n\n        this.level.spawnItems(this);\n\n        this.initializeClock();\n\n        // TODO: remove!\n        // let mouse = engine.input.pointers.primary;\n        // mouse.on('down', e => {\n        //     console.log('spawn');\n        //     let acorn = new ItemActor(new Coffee());\n        //     acorn.pos = mouse.lastWorldPos.clone();\n        //     this.add(acorn);\n        // });\n        this.physics.config.gravity = vec(0, 250);\n\n        new SceneScaler(this.level.size, this);\n\n        this.add(new LevelBoundaries(this.level.size));\n    }\n\n    initializeClock() {\n        this.timeLabel = new Label({\n            text: '',\n            pos: vec(this.level.size.x - 50, 20),\n            font: new ex.Font({\n                textAlign: ex.TextAlign.Left,\n                baseAlign: ex.BaseAlign.Bottom,\n                family: 'Pixelify Sans',\n                size: 80,\n                unit: ex.FontUnit.Px,\n                color: ex.Color.White,\n                smoothing: false,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n            }),\n            scale: vec(1, 1).scale(0.2),\n        })\n        this.add(this.timeLabel);\n        this.add(new Label({\n            text: '[P] to PAUSE',\n            pos: vec(this.level.size.x - 50, 30),\n            font: new ex.Font({\n                textAlign: ex.TextAlign.Left,\n                baseAlign: ex.BaseAlign.Bottom,\n                family: 'Pixelify Sans',\n                size: 35,\n                unit: ex.FontUnit.Px,\n                color: ex.Color.White,\n                smoothing: false,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n            }),\n            scale: vec(1, 1).scale(0.2),\n        }))\n    }\n\n    onPreDraw(ctx: ExcaliburGraphicsContext, delta: number): void {\n        const timeLeft = this.level.timeLimitMs - this.timePlayed;\n        const minutes = Math.floor(timeLeft / (1000 * 60));\n        const seconds = Math.floor((timeLeft - minutes * 60 * 1000) / 1000)\n        this.timeLabel.text = `${minutes < 10 ? '0' + minutes : minutes}:${seconds < 10 ? '0' + seconds : seconds}`;\n    }\n\n    onPreUpdate(engine: ex.Engine, delta: number): void {\n        this.timePlayed += delta;\n        if (this.timePlayed >= this.level.timeLimitMs) {\n            // this.statistics.pointsMax = 200;\n            // this.statistics.pointsGained = 130;\n            this.game.showLevelOutro(this.statistics);\n        }\n\n        if (engine.input.keyboard.wasPressed(ex.Keys.P)) {\n            this.game.showPause();\n        }\n    }\n}\n","import {ImageSource, Sound, Sprite, SpriteSheet} from 'excalibur';\nimport sword from './images/sword.png';\nimport magor from './images/magor.png';\nimport button from './images/button.png';\nimport veverkaRun from './images/veverka-run.png';\nimport veverkaIdle from './images/veverka-idle.png';\nimport logo from './images/acorn_logo.png';\nimport lever from './images/lever.png';\nimport platformSmall from './images/platform-small.png';\nimport platformMedium from './images/platform-medium.png';\nimport platformWheel from './images/platform-wheel.png';\nimport wheel from './images/wheel.png';\nimport items from './images/items.png';\nimport machines from './images/machines.png';\nimport levelTable from './images/level_table.png';\nimport starGold from './images/star_gold.png';\nimport starGrey from './images/star_grey.png';\nimport bubble from './images/bubble.png';\nimport background from './images/background.png';\nimport backgroundBranches from './images/backgroundBranches.png';\n\nvar runSound = require('./music/running.mp3')\nvar jumpSound = require('./music/jump.mp3')\nvar drop = require('./music/drop.mp3')\nvar chirp1 = require('./music/chirp1.mp3')\nvar chirp2 = require('./music/chirp2.mp3')\nvar mainMusic = require('./music/main.mp3')\nvar grinderSound = require('./music/grinder.mp3')\nvar brewerSound = require('./music/brewing.mp3')\nvar leverSound = require('./music/lever.mp3')\nvar iceSound = require('./music/ice.mp3')\n\nimport resourceStation from './images/resource-station.png';\n\n/**\n * Default global resource dictionary. This gets loaded immediately\n * and holds available assets for the game.\n */\nconst Resources = new class Resources {\n    public Load = {\n        Sword: new ImageSource(sword),\n        Magor: new ImageSource(magor),\n        VeverkaRun: new ImageSource(veverkaRun),\n        VeverkaIdle: new ImageSource(veverkaIdle),\n        ItemsImg: new ImageSource(items),\n        Logo: new ImageSource(logo),\n        Lever: new ImageSource(lever),\n        PlatformSmall: new ImageSource(platformSmall),\n        PlatformMedium: new ImageSource(platformMedium),\n        PlatformWheel: new ImageSource(platformWheel),\n        ResourceStation: new ImageSource(resourceStation),\n        Wheel: new ImageSource(wheel),\n        Button: new ImageSource(button),\n        Machines: new ImageSource(machines),\n        LevelTable: new ImageSource(levelTable),\n        StarGold: new ImageSource(starGold),\n        StarGrey: new ImageSource(starGrey),\n        Bubble: new ImageSource(bubble),\n        Background: new ImageSource(background),\n        BackgroundBranches: new ImageSource(backgroundBranches),\n\n        JumpSound: new Sound(jumpSound),\n        RunSound: new Sound(runSound),\n        Chirp1Sound: new Sound(chirp1),\n        Chirp2Sound: new Sound(chirp2),\n        DropSound: new Sound(drop),\n        MainMusic: new Sound(mainMusic),\n        GrinderSound: new Sound(grinderSound),\n        BrewerSound: new Sound(brewerSound),\n        LeverSound: new Sound(leverSound),\n        IceMachineSound: new Sound(iceSound),\n    }\n\n    readonly Items = lazy(() =>\n        SpriteSheet.fromImageSource({\n            image: this.Load.ItemsImg,\n            grid: {\n                columns: 8,\n                rows: 8,\n                spriteHeight: 16,\n                spriteWidth: 16,\n            }\n        })\n    );\n\n    readonly Machines = lazy(() =>\n        SpriteSheet.fromImageSource({\n            image: this.Load.Machines,\n            grid: {\n                columns: 8,\n                rows: 5,\n                spriteWidth: 48,\n                spriteHeight: 70,\n            }\n        })\n    );\n}\n\nfunction lazy<T>(provider: () => T): () => T {\n    let storage: T | undefined = undefined;\n    let computed = false;\n    return () => {\n        if (!computed) {\n            storage = provider();\n        }\n        return storage!;\n    }\n}\n\nexport { Resources }\n","import { Actor, Vector, Text, Font, BaseAlign, Color, FontUnit, TextAlign, vec } from \"excalibur\";\n\nexport class TextLabel {\n    static WHITE = new Color(255, 255, 255);\n    static GREY = new Color(46, 46, 46);\n    static ORANGE = new Color(242, 157, 79);\n\n    private _actor: Actor;\n    constructor(\n        x: number,\n        y: number,\n        size: number,\n        message: string,\n        color: Color = TextLabel.GREY,\n        align: TextAlign = TextAlign.Center,\n    ) {\n        const text = new Text({ \n            text: message,\n            font: new Font({\n                textAlign: align,\n                baseAlign: BaseAlign.Bottom,\n                family: 'Pixelify Sans',\n                size,\n                unit: FontUnit.Px,\n                color,\n                smoothing: false,\n            })\n        });\n        text.scale = vec(1,1).scale(0.1);\n        this._actor = new Actor();\n        this._actor.graphics.use(text);\n        this.actor.pos = vec(x + text.width / 2, y)\n    }\n\n    public get actor() {\n        return this._actor;\n    }\n}","import { Item } from '@/actors/items/items';\nimport { Resources } from '@/resources';\nimport {Actor, CollisionType, Color, Engine, Vector} from 'excalibur';\n\nexport class ItemActor extends Actor {\n    public allocatedToCustomer: boolean = false;\n\n    constructor(readonly item: Item, spawnPos?: Vector) {\n        super({\n            radius: 6,\n            collisionType: CollisionType.Active,\n            z: 10,\n        });\n        if (spawnPos) {\n            this.pos = spawnPos.clone();\n        }\n\n        this.graphics.use(item.getSprite());\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        this.angularVelocity = this.vel.x / 10;\n\n        this.vel.x *= 0.99;\n    }\n}\n","import {Drawable, Item} from '@/actors/items/items';\nimport {Actor, CollisionType, Color, Engine, Keys, Scene, SceneActivationContext, vec, Vector} from 'excalibur';\nimport {Game} from '@/game';\nimport {Resources} from '@/resources';\nimport {TextLabel} from '@/ui/text-label';\nimport {SceneScaler} from './scene-scaler';\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport { DesiredItem } from '@/levels/level';\nimport { MainScene } from './main-scene';\n\nexport interface Level {\n    timeLimitMs: number;\n    maxPoints: number;\n    size: Vector;\n    spawnItems(scene: MainScene): void;\n    getNewRecipes(): Recipe[];\n\n    getDesiredItems(): DesiredItem[];\n}\n\nexport class Recipe {\n    constructor(\n        public ingredient1: Drawable,\n        public ingredient2: Drawable,\n        public result: Item,\n    ) { }\n\n    public show(scene: Scene, x: number, y: number) {\n        const plus = Resources.Items().getSprite(0, 2);\n        const equals = Resources.Items().getSprite(1, 2);\n\n        const ingr1Act = new Actor({pos: vec(x, y)});\n        ingr1Act.graphics.add(this.ingredient1.getSprite());\n        scene.add(ingr1Act);\n\n        const plusAct = new Actor({pos: vec(x + 1 * 16, y)});\n        plusAct.graphics.add(plus);\n        scene.add(plusAct);\n\n        const ingr2Act = new Actor({pos: vec(x + 2 * 16, y)});\n        ingr2Act.graphics.add(this.ingredient2.getSprite());\n        scene.add(ingr2Act);\n\n        const eqAct = new Actor({pos: vec(x + 3 * 16, y)});\n        eqAct.graphics.add(equals);\n        scene.add(eqAct);\n\n        const resultAct = new ItemActor(this.result, vec(x + 4 * 16, y));\n        resultAct.body.collisionType = CollisionType.PreventCollision;\n        resultAct.graphics.add(this.result.getSprite());\n        scene.add(resultAct);\n    }\n}\n\nexport class LevelIntro extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n\n    private hintText: Actor;\n    constructor(\n        private game: Game,\n        private level: Level,\n        private levelId: number,\n        private paused: boolean = false,\n    ) {\n        super();\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n        this.hintText = new Actor;\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const levelTable = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        levelTable.graphics.add(Resources.Load.LevelTable.toSprite());\n        this.add(levelTable);\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\n\n        this.hintText = new TextLabel(this.width / 2, 75, 40, \"Want a little hint?\", TextLabel.WHITE).actor\n        this.add(this.hintText);\n        this.showHint();\n\n        if (this.paused) {\n            this.add(new TextLabel(this.width / 2, this.height / 2 + 50, 70, \"PAUSED\", TextLabel.GREY).actor);\n            this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to continue\", TextLabel.GREY).actor);\n\n        } else {\n            this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\", TextLabel.GREY).actor);\n        }\n    }\n\n    showHint() {\n        const recipes = this.level.getNewRecipes();\n        for (let i = 0; i < recipes.length; i++) {\n            const recipe = recipes[i];\n            recipe.show(this, this.width / 2 - (4 * 16) / 2,(this.height / 2 - 10) + i * 16 + 5);\n        }\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\n            if (this.paused) {\n                this.game.exitPause();\n            } else {\n                this.game.showCurrentLevel();\n            }\n        }\n    }\n\n\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import { Game } from \"@/game\";\nimport { Resources } from \"@/resources\";\nimport { Actor, Color, Engine, Keys, Scene, SceneActivationContext, vec } from \"excalibur\";\nimport { SceneScaler } from \"./scene-scaler\";\nimport { TextLabel } from \"@/ui/text-label\";\n\nexport class GameStart extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n    constructor(\n        private game: Game,\n    ) {\n        super();\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const logo = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        logo.graphics.add(Resources.Load.Logo.toSprite());\n        this.add(logo);\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 20, 56, \"Your forest cafe awaits...\\n Brew, Bake, Delight!\").actor);\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\").actor);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\n            this.game.showLevelIntro();\n        }\n    }\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import { Actor, Color, Engine, Keys, Scene, SceneActivationContext, TextAlign, vec } from \"excalibur\";\nimport { Game } from \"@/game\";\nimport { Resources } from \"@/resources\";\nimport { TextLabel } from \"@/ui/text-label\";\nimport { SceneScaler } from \"./scene-scaler\";\nimport { GameStatistics } from \"./main-scene\";\n\nexport class LevelOutro extends Scene {\n    private scaler: SceneScaler;\n    private height: number;\n    private width: number;\n    starsGained: number\n\n    constructor(\n        private game: Game,\n        private levelId: number,\n        private statistics: GameStatistics,\n    ) {\n        super();\n        const ratio = statistics.pointsGained / statistics.pointsMax;\n        this.starsGained = ratio < 0.15 ? 0 : (ratio < 0.33 ? 1 : (ratio < 0.66 ? 2 : 3))\n        this.height = 180;\n        this.width = 180;\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\n\n    }\n\n    onInitialize(engine: ex.Engine): void {\n        this.backgroundColor = new Color(216, 185, 157);\n        const levelTable = new Actor({\n            x: this.width / 2, y: this.height / 4,\n        })\n        levelTable.graphics.add(Resources.Load.LevelTable.toSprite());\n        this.add(levelTable);\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\n\n        const resultMessage = this.starsGained == 0 ? \"Maybe try again..\" : (this.starsGained == 1 ? \"Good start!\" : (this.starsGained == 2 ? \"Well done!\" : \"Barista Master <3\"))\n        this.add(new TextLabel(this.width / 2 + 2, 78, 56, resultMessage, TextLabel.GREY).actor)\n\n        for (let i = 1; i <= 3; i++) {\n            const image = i <= this.starsGained ? Resources.Load.StarGold : Resources.Load.StarGrey;\n            const star = new Actor({x: this.width / 2 + (i - 2) * 25, y: this.height / 2});\n            star.graphics.add(image.toSprite());\n            this.add(star);\n        }\n\n        this.add(new TextLabel(this.width / 2 - 17, 115, 35, `- Points: ${this.statistics.pointsGained}`, TextLabel.WHITE, TextAlign.Left).actor)\n        this.add(new TextLabel(this.width / 2 - 17, 120, 35, `- Customers served: ${this.statistics.customersServed}`, TextLabel.WHITE, TextAlign.Left).actor)\n        this.add(new TextLabel(this.width / 2 - 17, 125, 35, `- Longest wait: ${this.statistics.customerLongestWait} s`, TextLabel.WHITE, TextAlign.Left).actor)\n        // this.add(new TextLabel(this.width / 2 - 17, 130, 35, `- Unique recipes cooked: ${this.statistics.recipesMade}`, TextLabel.WHITE, TextAlign.Left).actor)\n\n\n        this.add(new TextLabel(this.width / 2, 150, 40, \"Press [T] to TRY AGAIN\", TextLabel.GREY).actor);\n        this.add(new TextLabel(this.width / 2, 160, 40, \"Press [N] to play NEXT LEVEL\", TextLabel.GREY).actor);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.T)) {\n            this.game.showCurrentLevel();\n        }\n        if(engine.input.keyboard.wasPressed(Keys.N)) {\n            this.game.showNextLevelIntro();\n        }\n    }\n\n    onDeactivate(context: SceneActivationContext): void {\n        this.scaler.deactivate()\n    }\n}","import {\n    Actor,\n    BodyComponent,\n    CircleCollider,\n    clamp,\n    Collider, CollisionContact, CollisionGroup,\n    CollisionType,\n    Color,\n    Engine,\n    Keys, Shape,\n    Side,\n    vec\n} from 'excalibur';\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport * as ex from \"excalibur\";\nimport {Resources} from \"@/resources\";\nimport {Platform, SolidPlatform, WheelPlatform} from \"@/actors/platform\";\n\n\nexport class Player extends Actor {\n    GRAVITY = 3000;\n    JUMP_GRAVITY = this.GRAVITY * 0.5\n\n    MAX_VELOCITY = 300\n    ACCELERATION = 700\n    TURN_ACCELERATION = this.ACCELERATION * 4\n\n    AIR_MOVEMENT_PENALITY = 0.75;\n\n    JUMP_FORCE = 430\n\n    isOnWheel = false;\n    public runningDirection = 0;\n\n    lastGroundState = false;\n    isOnGround = false;\n    isPressingDown = false;\n\n    // set by the solid platform\n    public isOnSolidPlatform = false;\n\n    private carryingItem: ItemActor | null = null;\n\n    animations = {\n        run: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [0, 1, 2, 3, 4, 5, 6], 50),\n        flying: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [2, 3], 100),\n        idle: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaIdle,\n                grid: {\n                    columns: 3,\n                    rows: 1,\n                    spriteWidth: 32,\n                    spriteHeight: 32,\n                },\n            }), [0, 1, 2, 1], 200),\n    }\n\n    public constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 100,\n            width: 25,\n            height: 25,\n            color: new Color(255, 255, 255),\n            collisionType: CollisionType.Passive,\n            collider: Shape.Box(32, 32),\n        });\n\n        Resources.Load.RunSound.volume = 0;\n        Resources.Load.RunSound.loop = true;\n        Resources.Load.RunSound.play();\n    }\n\n    onInitialize(engine: ex.Engine) {\n        engine.input.keyboard.on('press', this.onKeyPress.bind(this));\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        const jumpPressed = engine.input.keyboard.wasPressed(Keys.W) || engine.input.keyboard.wasPressed(Keys.Up)\n        const jumpHeld = engine.input.keyboard.isHeld(Keys.W) || engine.input.keyboard.isHeld(Keys.Up)\n\n        if (jumpPressed)\n            Resources.Load.JumpSound.play(0.35);\n\n        const heldLeft = engine.input.keyboard.isHeld(Keys.A) || engine.input.keyboard.isHeld(Keys.Left)\n        const heldRight = engine.input.keyboard.isHeld(Keys.D) || engine.input.keyboard.isHeld(Keys.Right)\n\n        let movementDirection = Math.sign(this.vel.x);\n\n        this.isPressingDown = engine.input.keyboard.isHeld(Keys.S) || engine.input.keyboard.isHeld(Keys.Down);\n\n        // move left or right\n        if (heldLeft || heldRight) {\n            let direction = 0;\n\n            if (heldLeft) direction -= 1;\n            if (heldRight) direction += 1;\n\n            // turning the other way is faster\n            let accel = (direction != movementDirection ? this.TURN_ACCELERATION : this.ACCELERATION)\n                * direction;\n\n            // turning in air is slower\n            if (!this.isOnGround) accel *= this.AIR_MOVEMENT_PENALITY;\n\n            this.acc.x = accel;\n\n            this.runningDirection = direction;\n        } else {\n            this.acc.x = 0;\n            this.vel.x *= 0.75;\n\n            this.runningDirection = 0;\n        }\n\n        if (this.runningDirection == -1) {\n            this.graphics.flipHorizontal = true;\n        } else if (this.runningDirection == 1) {\n            this.graphics.flipHorizontal = false;\n        }\n\n        this.vel.x = clamp(this.vel.x, -this.MAX_VELOCITY, this.MAX_VELOCITY)\n\n        // just jumping\n        if (jumpPressed && this.isOnGround) {\n            this.vel.y = -this.JUMP_FORCE;\n            this.isOnGround = false;\n            this.isOnWheel = false;\n        }\n\n        // fall through the platform\n        if (this.isPressingDown && !this.isOnSolidPlatform) {\n            this.isOnGround = false;\n            this.isOnWheel = false;\n        }\n\n        // if space is held and we're going up, apply jump gravity\n        if (jumpHeld && Math.sign(this.vel.y) < 0) {\n            this.acc.y = this.JUMP_GRAVITY\n        } else {\n            this.acc.y = this.GRAVITY\n        }\n\n        // not on the ground always means flying\n        if (!this.isOnGround) {\n            this.graphics.use(this.animations.flying);\n            this.graphics.offset = vec(0, 4);\n            this.updateItemPosition('back');\n        } else {\n            // when on the ground, we are either running on the wheel\n            if (this.isOnWheel) {\n                if (this.runningDirection == 0) {\n                    this.graphics.use(this.animations.idle);\n                    this.graphics.offset = vec(0, 0);\n                    this.updateItemPosition('hand');\n                }\n                else {\n                    this.graphics.use(this.animations.run);\n                    this.graphics.offset = vec(0, 4);\n                    this.updateItemPosition('back');\n                }\n            }\n\n            // else we're idling\n            else if (Math.abs(this.vel.x) < 50) {\n                this.graphics.use(this.animations.idle);\n                this.graphics.offset = vec(0, 0);\n                this.updateItemPosition('hand');\n            }\n            else {\n                this.graphics.use(this.animations.run);\n                this.graphics.offset = vec(0, 4);\n                this.updateItemPosition('back');\n            }\n        }\n\n        // ground cancels all Y movement\n        if (this.isOnGround) {\n            this.acc.y = 0;\n            this.vel.y = 0;\n        }\n\n        if (this.isOnWheel) {\n            this.acc.x = 0;\n            this.vel.x = 0;\n        }\n\n        this.lastGroundState = this.isOnGround;\n\n        if (!this.isOnWheel) {\n            let loudness;\n            if (this.isOnGround) {\n                 loudness = Math.min(Math.abs(this.vel.x) / this.MAX_VELOCITY * 2, 1)\n            } else {\n                loudness=   0\n            }\n\n            Resources.Load.RunSound.volume = loudness * 0.10;\n        } else {\n            if (this.runningDirection == 0)\n                Resources.Load.RunSound.volume = 0.0;\n            else {\n                Resources.Load.RunSound.volume = 0.10;\n            }\n        }\n\n        this.pos.x = clamp(this.pos.x, 20, 380)\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody?.collisionType === CollisionType.Fixed || otherBody?.collisionType === CollisionType.Passive) {\n            // player landed on the ground\n            if ((side === Side.Bottom && !this.isPressingDown && otherBody.owner instanceof Platform) || otherBody.owner instanceof SolidPlatform) {\n                this.isOnGround = true;\n\n                if (otherBody.owner instanceof WheelPlatform) {\n                    this.isOnWheel = true;\n                    this.pos.x = other.center.x;\n                }\n\n                // push out of the platform\n                // minuses because y axis is negative upwards\n                this.pos.y = other.getFurthestPoint(vec(0, -1)).y\n                    - self.bounds.height / 2 + 0.1;\n            }\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        super.onCollisionEnd(self, other, side, lastContact);\n\n        const otherBody = other.owner.get(BodyComponent)\n\n        // Tom is fucking going to jail\n        if (otherBody?.owner instanceof Platform && otherBody.pos.y > this.pos.y) {\n            this.isOnGround = false;\n        }\n    }\n\n    onKeyPress(evt: ex.Input.KeyEvent) {\n        if (evt.key === ex.Input.Keys.Space) {\n            this.dropItem();\n        }\n    }\n\n    isCarryingItem() {\n        return !!this.carryingItem;\n    }\n\n    pickUpItem(item: ItemActor) {\n        this.carryingItem = item;\n        item.body.collisionType = ex.CollisionType.Passive;\n        this.addChild(this.carryingItem);\n    }\n\n    dropItem() {\n        if (this.carryingItem) {\n            this.removeChild(this.carryingItem)\n\n            this.carryingItem.pos = this.pos.clone().add(this.carryingItem.offset);\n            this.carryingItem.vel = ex.vec(this.vel.x / 5, this.vel.y / 10);\n\n            this.carryingItem.body.collisionType = ex.CollisionType.Active;\n\n            this.carryingItem.offset = vec(0, 0);\n\n            this.scene?.add(this.carryingItem);\n\n            this.carryingItem = null;\n        }\n    }\n\n    private updateItemPosition(position: string) {\n        let facing = this.graphics.flipHorizontal;\n\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset  = Math.sin(frame);\n\n        let handOffset = vec(facing ? -10 : 10, 3 + uglyOffset);\n        let backOffset = vec(facing ? -20 : 20, 6 + uglyOffset);\n\n        if (this.carryingItem != undefined) {\n            this.carryingItem.graphics.flipHorizontal = facing;\n\n            if (position == 'hand') {\n                this.carryingItem.offset = handOffset;\n            }\n            else {\n                this.carryingItem.offset = backOffset;\n            }\n        }\n    }\n}\n","import * as ex from 'excalibur';\nimport {BodyComponent, Collider, CollisionContact, CollisionType, Color, Engine, Side} from 'excalibur';\nimport {Player} from \"@/actors/player\";\nimport {Resources} from \"@/resources\";\n\nexport class Platform extends ex.Actor {\n    constructor(x: number, y: number, width: number, height: number, rotation: number = 0, collisionType: CollisionType = CollisionType.Passive) {\n        super({\n            pos: ex.vec(x, y),\n            width: width,\n            height: height,\n            color: Color.Transparent,\n            collisionType: collisionType,\n        });\n\n        this.rotation = rotation;\n\n        if (width == 25)\n            this.graphics.use(Resources.Load.PlatformWheel.toSprite());\n        if (width == 30)\n            this.graphics.use(Resources.Load.PlatformSmall.toSprite());\n        else if (width == 60)\n            this.graphics.use(Resources.Load.PlatformMedium.toSprite());\n    }\n}\n\nexport class SolidPlatform extends Platform {\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            otherBody.owner.isOnSolidPlatform = true;\n            otherBody.owner.isOnGround = true;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        // this happened. no idea why\n        if (other.owner == null)\n            return;\n\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            otherBody.owner.isOnSolidPlatform = false;\n        }\n    }\n}\n\nexport class WheelPlatform extends Platform {\n    public isOnPlayform = false;\n    public direction  = 0;\n\n    playerReference?: Player;\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.playerReference && this.playerReference.isOnGround) {\n            this.direction = this.playerReference.runningDirection;\n            this.isOnPlayform = this.playerReference.isOnWheel;\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = undefined;\n            this.direction = 0;\n        }\n    }\n\n}","import * as ex from 'excalibur';\nimport {Engine, vec} from 'excalibur';\nimport { Machine } from '../machines/machine';\nimport { WheelPlatform } from \"@/actors/platform\";\nimport {Resources} from \"@/resources\";\n\nexport class HamsterWheel extends ex.Actor {\n    public linkedMachine: Machine | undefined;\n\n    public wheel: ex.Actor;\n    public platform: WheelPlatform;\n\n    constructor(x: number, y: number, radius: number, linkedMachine?: Machine) {\n        super({ pos: ex.vec(x, y) });\n\n        this.linkedMachine = linkedMachine;\n\n        // Add wheel component\n        this.wheel = new ex.Actor({\n            radius: radius,\n            color: ex.Color.Gray,\n            scale: vec(1.1, 1.1),\n        });\n\n        this.wheel.graphics.use(Resources.Load.Wheel.toSprite())\n\n        const platformWidth = 25;\n        const platformHeight = 10;\n\n        // Add platform component on top of the wheel\n        this.platform = new WheelPlatform(0, radius + platformHeight / 2, platformWidth, platformHeight);\n\n        // Add components as children\n        this.addChild(this.wheel);\n        this.addChild(this.platform);\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.platform.direction != 0 && this.platform.isOnPlayform) {\n            this.wheel.actions.rotateBy(this.platform.direction / 20, 100);\n\n            if (this.linkedMachine != undefined) {\n                this.linkedMachine.remainingProcessingTime = Math.max(this.linkedMachine.remainingProcessingTime - delta / 1000, 0);\n            }\n        }\n    }\n}\n","import * as ex from 'excalibur';\nimport { Machine } from '../machines/machine';\nimport {BodyComponent, Collider, CollisionContact, Engine, Shape, Side, vec} from \"excalibur\";\nimport {Player} from \"@/actors/player\";\nimport {Resources} from \"@/resources\";\nimport {Platform} from \"@/actors/platform\";\n\nexport class Lever extends ex.Actor {\n    public linkedPlatform!: Platform;\n\n    playerReference!: Player | null\n\n    constructor(x: number, y: number, linkedPlatform?: Platform) {\n        super({\n            pos: ex.vec(x, y),\n            width: 8,\n            height: 32,\n            offset: vec(0, -16),\n            collisionType: ex.CollisionType.Passive,\n            collider: Shape.Circle(4)\n        });\n\n        this.rotation = -1/2;\n\n        this.graphics.use(Resources.Load.Lever.toSprite())\n\n        if (linkedPlatform) {\n            this.linkedPlatform = linkedPlatform;\n        }\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.playerReference && this.actions.getQueue().isComplete()) {\n            let direction = Math.sign(this.playerReference.vel.x)\n\n            if (direction) {\n                this.actions.clearActions()\n                this.actions.rotateTo(direction / 2, 1);\n\n                this.linkedPlatform?.actions.rotateTo(direction / 2, 1);\n\n                if (this.rotation != direction / 2)\n                    Resources.Load.LeverSound.play(0.5)\n            }\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent)\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = null;\n        }\n    }\n\n}\n","import * as ex from 'excalibur';\nimport { ItemActor } from './items/itemActor';\nimport {Item} from './items/items';\nimport { Resources } from \"@/resources\";\nimport { clamp, CollisionType, Engine, vec } from 'excalibur';\nimport { Coffee, Tea } from \"@/actors/items/items\";\nimport { DesiredItem } from '@/levels/level';\n\nexport class Customer extends ex.Actor {\n    private static readonly MAX_VELOCITY = 300;\n    private static readonly ACCELERATION = 700;\n    private static readonly PICK_UP_THRESHOLD = 25;\n\n    private animations = {\n        run: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [0, 1, 2, 3, 4, 5, 6], 100),\n        flying: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaRun,\n                grid: {\n                    columns: 1,\n                    rows: 7,\n                    spriteWidth: 128,\n                    spriteHeight: 25,\n                },\n            }), [2, 3], 100),\n        idle: ex.Animation.fromSpriteSheet(\n            ex.SpriteSheet.fromImageSource({\n                image: Resources.Load.VeverkaIdle,\n                grid: {\n                    columns: 3,\n                    rows: 1,\n                    spriteWidth: 32,\n                    spriteHeight: 32,\n                },\n            }), [0, 1, 2], 200),\n    };\n\n    private bubble: ex.Actor; // New bubble actor\n    public readonly desiredItem: DesiredItem;\n    public satisfied: boolean = false;\n    private assignedItem: ItemActor | null = null;\n    private runningDirection: number | null = null;\n    private runningTarget: number | null = null;\n\n    private carryingItem: ItemActor | null = null;\n\n    constructor(waitingX: number, startY: number, desiredProduct: DesiredItem) {\n        super({\n            pos: ex.vec(waitingX, startY - 16),\n            width: 32,\n            height: 32,\n            color: ex.Color.Yellow,\n            collisionType: ex.CollisionType.PreventCollision,\n            z: 5\n        });\n        this.desiredItem = desiredProduct;\n\n        // Initialize the bubble actor\n        this.bubble = new ex.Actor({\n            pos: ex.vec(0, -16), // Position above the customer\n            offset: ex.vec(0, -16), // Position above the customer\n            width: 32,\n            height: 32,\n            collisionType: ex.CollisionType.PreventCollision,\n            z: 5,\n        });\n\n        this.bubble.graphics.use(Resources.Load.Bubble.toSprite());\n        this.bubble.scale = vec(1, 1)\n\n        let itemActor = new ItemActor(desiredProduct.item);\n        itemActor.pos = vec(0, -18)\n        itemActor.body.collisionType = CollisionType.PreventCollision;\n        itemActor.z = 10\n        this.bubble.addChild(itemActor)\n\n        // Attach the bubble to the customer as a child actor\n        this.addChild(this.bubble);\n    }\n\n    pickUpItem(item: ItemActor) {\n        this.carryingItem = item;\n        item.body.collisionType = ex.CollisionType.PreventCollision;\n        item.pos = vec(0, 0);\n        item.vel = vec(0, 0);\n        item.angularVelocity = 0;\n\n        item.rotation = 0;\n        this.addChild(this.carryingItem);\n\n        this.bubble.actions.scaleTo(vec(0, 0), vec(5, 10));\n    }\n\n    private updateBubblePosition() {\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset  = Math.sin(frame);\n\n        this.bubble.pos = ex.vec(0, -16 + uglyOffset);\n    }\n\n    private updateItemPosition(position: string) {\n        let facing = this.graphics.flipHorizontal;\n\n        let frame = (this.graphics.current as any)._currentFrame;\n        let uglyOffset = Math.sin(frame);\n\n        let handOffset = vec(facing ? -10 : 10, 3 + uglyOffset);\n        let backOffset = vec(facing ? -20 : 20, 7 + uglyOffset);\n\n        if (this.carryingItem != undefined) {\n            this.carryingItem.graphics.flipHorizontal = facing;\n\n            if (position == 'hand') {\n                this.carryingItem.offset = handOffset;\n            }\n            else {\n                this.carryingItem.offset = backOffset;\n            }\n        }\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (this.runningTarget !== null) {\n            this.runningDirection = Math.sign(this.runningTarget - this.pos.x);\n\n            if (Math.abs(this.runningTarget - this.pos.x) < Customer.PICK_UP_THRESHOLD) {\n                this.runningTarget = null;\n\n                if (this.assignedItem) {\n                    this.satisfied = true;\n                    this.pickUpItem(this.assignedItem)\n                    this.goTo(10000)\n                }\n            }\n        } else {\n            if (!this.satisfied) {\n                this.runningDirection = null;\n            }\n        }\n\n        if (this.satisfied && this.pos.x > engine.drawWidth + this.width) {\n            console.log(\"Killing customer\")\n            this.kill();\n        }\n\n        if (this.runningDirection !== null) {\n            this.acc.x = Customer.ACCELERATION * this.runningDirection;\n        } else {\n            this.acc.x = 0;\n            this.vel.x *= 0.75;\n        }\n\n        if (this.runningDirection == -1) {\n            this.graphics.flipHorizontal = true;\n            this.graphics.use(this.animations.run);\n            this.graphics.offset = vec(0, 4);\n            this.updateItemPosition('back');\n        } else if (this.runningDirection == 1) {\n            this.graphics.flipHorizontal = false;\n            this.graphics.use(this.animations.run);\n            this.graphics.offset = vec(0, 4);\n            this.updateItemPosition('back');\n        } else {\n            this.graphics.use(this.animations.idle);\n            this.graphics.offset = vec(0, 0);\n            this.updateItemPosition('hand');\n        }\n        this.vel.x = clamp(this.vel.x, -Customer.MAX_VELOCITY, Customer.MAX_VELOCITY)\n\n        this.updateBubblePosition()\n    }\n\n    goFetchItem(item: ItemActor) {\n        this.runningTarget = item.pos.x;\n        this.assignedItem = item;\n        item.allocatedToCustomer = true;\n    }\n\n    goTo(xPosition: number) {\n        this.runningTarget = xPosition;\n    }\n\n    productAssigned(): boolean {\n        return this.assignedItem != null;\n    }\n}\n","import {Engine, Shape, vec, Actor, Color, CollisionType, Collider, Side, CollisionContact} from \"excalibur\";\nimport {Customer} from \"@/actors/customer\";\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport { MainScene } from \"@/scenes/main-scene\";\nimport { DesiredItem } from \"@/levels/level\";\nimport {Resources} from \"@/resources\";\n\nexport class CustomerControl extends Actor {\n    private static readonly HEIGHT = 100;\n    private static readonly MIN_TIMEOUT = 1000;\n    private static readonly MAX_TIMEOUT = 3000;\n    private static readonly MAX_WAITING_CUSTOMERS = 2;\n    private static readonly ITEM_TIMEOUT = 5000;\n    private static readonly CUSTOMER_OFFSET = 40;\n\n    private mainScene: MainScene;\n    private customers: Customer[] = [];\n    private pendingProducts: ItemActor[] = [];\n\n    private desiredItems: DesiredItem[];\n\n    constructor(scene: MainScene, x: number, y: number, width: number, desiredItems: DesiredItem[], height: number = 80) {\n        super({\n            pos: vec(x, y),\n            height: height,\n            width: width,\n            color: Color.Transparent,\n            collisionType: CollisionType.Passive,\n        });\n\n        this.mainScene = scene;\n        this.desiredItems = desiredItems;\n    }\n\n    sampleItem(): DesiredItem {\n        const cumulativeWeights: number[] = [];\n        this.desiredItems.reduce((acc, item, i) => {\n            cumulativeWeights[i] = acc + item.distribution;\n            return cumulativeWeights[i];\n        }, 0);\n\n        const random = Math.random() * cumulativeWeights[cumulativeWeights.length - 1];\n\n        return this.desiredItems[cumulativeWeights.findIndex(cumulativeWeight => random < cumulativeWeight)];\n    }\n\n    onInitialize(engine: Engine) {\n        this.scheduleCustomersRefresh(engine);\n    }\n\n    private scheduleCustomersRefresh(engine: Engine) {\n        const timeout = Math.random() * (CustomerControl.MAX_TIMEOUT - CustomerControl.MIN_TIMEOUT) + CustomerControl.MIN_TIMEOUT;\n        const scene = this.mainScene;\n        if (scene === null)\n            return;\n        setTimeout(() => {\n            this.customers = this.customers.filter(c => !c.isKilled());\n            let waitingCustomers = this.customers.filter(c => !c.productAssigned());\n            if (waitingCustomers.length < CustomerControl.MAX_WAITING_CUSTOMERS) {\n                console.log(\"Adding customer.\")\n\n                const product = this.sampleItem()\n                const waitingX = this.width + CustomerControl.CUSTOMER_OFFSET;\n                const customer = new Customer(waitingX, this.pos.y - 10, product);\n\n                if (Math.random() < 0.5) {\n                    Resources.Load.Chirp1Sound.play(0.5)\n                } else {\n                    Resources.Load.Chirp2Sound.play(0.5)\n                }\n\n                this.customers.push(customer);\n                waitingCustomers = this.customers.filter(c => !c.productAssigned());\n\n                for (let i = 0; i < waitingCustomers.length; i++) {\n                    waitingCustomers[i].goTo(this.width - CustomerControl.CUSTOMER_OFFSET * (waitingCustomers.length - i));\n                }\n\n                scene.add(customer);\n            }\n\n            this.scheduleCustomersRefresh(engine);\n        }, timeout);\n    }\n\n    onCollisionStart(self: Collider, other: Collider, side: Side, contact: CollisionContact) {\n        const itemActor = other.owner;\n        if (!(itemActor instanceof ItemActor)) return;\n        if (itemActor.allocatedToCustomer) return;\n\n        let item = itemActor.item;\n\n        const customer = this.customers.find(c =>\n            !c.satisfied && !c.productAssigned() && Object.getPrototypeOf(c.desiredItem.item) == Object.getPrototypeOf(item)\n        );\n\n        if (customer) {\n            customer.goFetchItem(itemActor);\n            console.log('Fetched item')\n            this.mainScene.resolveCustomer(customer);\n        } else {\n            // Add item to pendingProducts\n            this.pendingProducts.push(itemActor);\n\n            // console.log(itemActor)\n\n            // Set a timeout to remove the item if it’s not assigned to a customer\n            setTimeout(() => {\n                // Check if item is still in pendingProducts and not assigned\n                if (this.pendingProducts.includes(itemActor) && !itemActor.allocatedToCustomer) {\n                    // Remove from pendingProducts\n                    this.pendingProducts = this.pendingProducts.filter(p => p !== itemActor);\n\n                    itemActor.actions.fade(0, 1000).callMethod(() => {\n                        itemActor.kill();\n                    });\n                }\n            }, CustomerControl.ITEM_TIMEOUT);\n        }\n    }\n}","import { Resources } from \"@/resources\";\nimport { Sprite } from \"excalibur\";\n\n\nexport interface Drawable {\n    getSprite(): Sprite;\n}\n\nexport interface Item extends Drawable {\n    grind?(): Item;\n    brew?(): Item;\n    roast?(): Item;\n    freeze?(): Item;\n\n    getSprite(): Sprite;\n}\n\nexport class Garbage implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(3, 1); }\n}\n\nexport class Leaf implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(3, 0); }\n\n    grind(): Item {\n        return new GroundLeaf();\n    }\n    freeze(): Item {\n        return new IcedTea();\n    }\n}\n\nexport class Acorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 0); }\n\n    grind(): Item {\n        return new GroundAcorn();\n    }\n    roast(): Item {\n        return new RoastedAcorn();\n    }\n}\n\nexport class GroundAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(1, 0); }\n    brew(): Item {\n        return new Coffee();\n    }\n    roast(): Item {\n        return new RoastedGroundAcorn();\n    }\n    freeze(): Item {\n        return new IceCream();\n    }\n}\n\nexport class Coffee implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(2, 0); }\n}\n\nexport class RoastedAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 1); }\n}\n\nexport class RoastedGroundAcorn implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 2); }\n}\n\n\nexport class GroundLeaf implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(4, 0); }\n\n    brew(): Item {\n        return new Tea();\n    }\n}\n\nexport class Tea implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(5, 0); }\n}\n\nexport class IcedTea implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(5, 1); }\n}\n\nexport class IceCream implements Item {\n    getSprite(): Sprite { return Resources.Items().getSprite(4, 1); }\n}","import { ItemActor } from '../items/itemActor';\nimport {Drawable, Garbage, Item} from '@/actors/items/items';\nimport {\n    Actor,\n    ActorArgs, BaseAlign,\n    Collider,\n    CollisionContact,\n    CollisionType,\n    Color,\n    Engine, Font, FontUnit,\n    Label,\n    Side, Sound, Sprite, TextAlign, vec,\n    Vector\n} from 'excalibur';\n\nexport abstract class Machine extends Actor implements Drawable {\n    public isOn: boolean = true;\n\n    intakeActor: Actor;\n\n    private itemQueue: Array<ItemActor> = [];\n    private blacklistedItemQueue: Array<ItemActor> = [];\n\n    private isProcessing: boolean = false;\n    private manual: boolean;\n\n    public remainingProcessingTime = 0;\n    public maxProcessingTime = 1.5;\n\n    private tooltip: Label;\n\n    private sound: Sound | undefined;\n\n    constructor(config?: ActorArgs, manual: boolean = false, sound?: Sound) {\n        super({\n            color: Color.Gray,\n            collisionType: CollisionType.Fixed,\n            ...config,\n        });\n\n        this.manual = manual;\n\n        this.sound = sound;\n\n        // Create tooltip (initially hidden)\n        this.tooltip = new Label({\n            text: '',\n            pos: vec(0, 5), // Position the label above the station\n            font: new Font({\n                textAlign: TextAlign.Center,\n                baseAlign: BaseAlign.Middle,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n                family: 'Silkscreen',\n                size: 15,\n                unit: FontUnit.Px,\n                color: Color.White,\n                smoothing: false,\n            })\n        });\n\n        this.tooltip.z = 1000;\n\n        let [intakeStart, intakeEnd] = this.getIntake();\n        this.intakeActor = new Actor({\n            pos: intakeStart.add(intakeEnd).scale(1 / 2),\n            width: intakeEnd.x - intakeStart.x,\n            height: intakeEnd.y - intakeStart.y,\n            collisionType: CollisionType.Fixed,\n            color: Color.Transparent,\n        });\n        this.intakeActor.on('collisionstart', e => {\n            if (this.isOn && e.other instanceof ItemActor) {\n                const itemActor = e.other as ItemActor;\n\n                if (!this.itemQueue.includes(itemActor) && !this.blacklistedItemQueue.includes(itemActor)) {\n                    this.itemQueue.push(itemActor);\n                }\n            }\n        });\n\n        this.addChild(this.intakeActor);\n        this.addChild(this.tooltip);\n    }\n\n    abstract getSprite(): Sprite;\n\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        if (!this.isProcessing) {\n            if (this.itemQueue.length != 0) {\n                this.isProcessing = true;\n                this.remainingProcessingTime = this.maxProcessingTime;\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\n\n                this.sound?.play(0.3);\n            }\n        } else {\n            if (this.remainingProcessingTime <= 0) {\n                const itemActor = this.itemQueue.shift()!;\n\n                itemActor.kill();\n                this.isProcessing = false;\n\n                this.sound?.stop();\n\n                this.remainingProcessingTime = 0;\n                this.tooltip.text = '';\n\n                let newItem = this.processItem(itemActor.item);\n\n                if (!newItem) {\n                    newItem = new Garbage();\n                }\n\n                const newActor = new ItemActor(newItem);\n                newActor.pos = this.getOutlet().add(this.pos);\n\n                newActor.vel = vec(Math.random(), 10)\n\n                this.blacklistedItemQueue.push(newActor);\n                this.scene?.add(newActor);\n\n            } else {\n                if (!this.manual) {\n                    this.remainingProcessingTime = Math.max(this.remainingProcessingTime - delta / 1000, 0);\n                }\n\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\n            }\n        }\n    }\n\n    /** Position of intake [start, end] in relative coordinates */\n    protected abstract getIntake(): [Vector, Vector];\n\n    /** Position of the outlet */\n    protected abstract getOutlet(): Vector;\n\n    protected abstract processItem(item: Item): Item | null;\n}\n","import { Item } from '@/actors/items/items';\nimport { Machine } from './machine';\nimport {Actor, CompositeCollider, Loader, Rectangle, Resource, Shape, Sprite, vec, Vector} from 'excalibur';\nimport { Resources } from '@/resources';\nimport { Paddle } from '../paddle';\n\nexport class Brewer extends Machine {\n    getSprite(): Sprite {\n        const sprite = Resources.Machines().getSprite(2, 0)\n        sprite.scale = vec(0.22, 0.22);\n        return sprite;\n    }\n\n    constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 1,\n        }, false, Resources.Load.BrewerSound);\n        this.graphics.use(Resources.Machines().getSprite(2, 0));\n\n        this.collider.set(new CompositeCollider([\n            Shape.Box(45, 16, undefined, vec(0, -6)),\n            // in tile coordinates\n            Shape.Polygon([vec(10, 1), vec(14, 21), vec(15, 21), vec(11, 0)], vec(-24, -35)),\n            Shape.Polygon([vec(43, 1), vec(42, 0), vec(39, 21), vec(40, 21)], vec(-24, -35)),\n        ]));\n\n        const funnelSprite = new Actor();\n        funnelSprite.graphics.use(Resources.Machines().getSprite(3,0))        ;\n        funnelSprite.z = 20;\n        this.addChild(funnelSprite);\n    }\n\n    processItem(item: Item): Item | null {\n        return item.brew ? item.brew() : null;\n    }\n\n    protected getIntake(): [Vector, Vector] {\n        return [\n            vec(-8, -16),\n            vec(8, -4),\n        ];\n    }\n    protected getOutlet(): Vector {\n        return vec(0, 10);\n    }\n}\n","import { Actor, CollisionType, Color, vec, Vector } from \"excalibur\";\n\n\n/** Small box collider with rotation used for details of machine colliders */\nexport class Paddle extends Actor {\n\n    constructor(pos: Vector, size: Vector, degrees: number = 0) {\n        super({\n            pos,\n            rotation: degrees / 180 * Math.PI,\n            width: size.x,\n            height: size.y,\n            collisionType: CollisionType.Fixed,\n        })\n    }\n}","import { Machine } from './machine';\nimport { ItemActor } from '../items/itemActor';\nimport { Item } from '@/actors/items/items';\nimport { Actor, CircleCollider, Color, CompositeCollider, EdgeCollider, Engine, Sprite, vec, Vector } from 'excalibur';\nimport { Resources } from '@/resources';\nimport { Paddle } from '../paddle';\nimport {Recipe} from \"@/scenes/level-intro\";\n\n\nexport class Grinder extends Machine {\n    getSprite(): Sprite {\n        const sprite = Resources.Machines().getSprite(0, 0)\n        sprite.scale = vec(0.22, 0.22);\n        return sprite;\n    }\n\n    crank: Actor;\n\n    grindedLastTick: boolean = true\n\n    constructor(x: number, y: number) {\n        super({\n            pos: vec(x, y),\n            z: 11,\n        }, true);\n\n        this.graphics.add(Resources.Machines().getSprite(0, 0));\n        this.collider.set(new CircleCollider({ radius: 16, offset: vec(0, 6) }));\n\n        this.crank = new Actor({\n            pos: vec(0.5, 5),\n            z: this.z + 1,\n        });\n        const crankSprite = Resources.Machines().getSprite(1, 0)\n        this.crank.graphics.add(crankSprite);\n        this.addChild(this.crank);\n\n        this.addChild(new Paddle(vec(-11, -18), vec(27, 2), 75));\n        this.addChild(new Paddle(vec(12, -18), vec(27, 2), -75));\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        super.onPostUpdate(engine, delta);\n\n        let grinding = false;\n        if (this.isOn) {\n            let oldRotation = this.crank.rotation;\n\n            this.crank.rotation = -(this.remainingProcessingTime / this.maxProcessingTime)  * Math.PI * 2;\n\n            if (oldRotation != this.crank.rotation) {\n                grinding = true;\n            } else {\n                this.grindedLastTick = false;\n            }\n        }\n\n        if (grinding) {\n             if (!this.grindedLastTick) {\n                 Resources.Load.GrinderSound.seek(this.maxProcessingTime - this.remainingProcessingTime);\n                 Resources.Load.GrinderSound.play(0.5);\n             }\n        } else {\n            Resources.Load.GrinderSound.stop();\n        }\n\n        this.grindedLastTick = grinding;\n    }\n\n    protected processItem(item: Item): Item | null {\n        return item.grind ? item.grind() : null;\n    }\n    protected getIntake(): [Vector, Vector] {\n        return [\n            vec(-5, -10),\n            vec(5, -5)\n        ];\n    }\n    protected getOutlet(): Vector {\n        return vec(.5, 10);\n    }\n}\n","import {\n    Actor,\n    BaseAlign,\n    BodyComponent,\n    Collider,\n    CollisionContact,\n    CollisionType,\n    Color,\n    Engine,\n    Font,\n    FontUnit,\n    Keys,\n    Label,\n    Side,\n    TextAlign,\n    vec\n} from 'excalibur';\nimport {Player} from \"@/actors/player\";\nimport {ItemActor} from \"@/actors/items/itemActor\";\nimport {Item} from \"@/actors/items/items\";\nimport {Resources} from \"@/resources\";\n\nclass ResourceStation extends Actor {\n    private tooltip: Label;\n    private cooldownTimer = 0;\n    private isOnCooldown = false;\n\n    playerReference?: Player;\n    item: Item;\n\n    COOLDOWN = 3;\n\n    constructor(x: number, y: number, size: number, item: Item) {\n        super({\n            x: x,\n            y: y,\n            width: size,\n            height: size,\n            color: Color.Gray,\n            collisionType: CollisionType.Passive,\n        });\n\n        this.item = item;\n\n        // Create tooltip (initially hidden)\n        this.tooltip = new Label({\n            text: 'Space',\n            pos: vec(0, -size / 2 - 6), // Position the label above the station\n            font: new Font({\n                textAlign: TextAlign.Center,\n                baseAlign: BaseAlign.Bottom,\n                shadow: {\n                    blur: 5,\n                    offset: vec(0, 0),\n                    color: Color.Black,\n                },\n                family: 'Silkscreen',\n                size: 15,\n                unit: FontUnit.Px,\n                color: Color.White,\n                smoothing: false,\n            })\n        });\n\n        this.tooltip.scale = vec(0, 0);\n\n        let itemActor = new ItemActor(item);\n        itemActor.body.collisionType = CollisionType.PreventCollision;\n\n        this.addChild(this.tooltip); // Attach tooltip to the ResourceStation\n        this.addChild(itemActor)\n\n        itemActor.scale = vec(0.8, 0.8)\n\n        this.graphics.use(Resources.Load.ResourceStation.toSprite())\n    }\n\n    onPostUpdate(engine: Engine, delta: number): void {\n        const fPressed = engine.input.keyboard.wasPressed(Keys.Space);\n\n        // Cooldown logic\n        if (this.isOnCooldown) {\n            // Decrease the cooldown timer by the delta time\n            this.cooldownTimer -= delta / 1000; // Convert ms to seconds\n            if (this.cooldownTimer <= 0) {\n                this.isOnCooldown = false;\n                this.tooltip.text = 'Space'; // Reset tooltip text when cooldown ends\n            } else {\n                // Update tooltip text with remaining time\n                this.tooltip.text = `${this.cooldownTimer.toFixed(1)}`;\n                this.tooltip.graphics.opacity = 0.5;\n            }\n        } else if (this.playerReference) {\n            if (!this.playerReference.isCarryingItem()) {\n                this.tooltip.graphics.opacity = 1;\n            } else {\n                this.tooltip.graphics.opacity = 0.5;\n            }\n\n            // Allow item pickup only if not on cooldown\n            if (fPressed && !this.playerReference.isCarryingItem() && !this.isOnCooldown) {\n                this.playerReference.pickUpItem(new ItemActor(this.item));\n\n                // Start the cooldown\n                this.isOnCooldown = true;\n                this.cooldownTimer = this.COOLDOWN;\n                this.tooltip.text = `${this.COOLDOWN.toFixed(1)}`; // Display initial cooldown time\n\n                this.actions.delay(this.COOLDOWN * 1000).callMethod(() => {\n                    // hide\n                    if (this.playerReference == undefined) {\n                        this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20)).callMethod(() => {this.tooltip.text = `Space`});\n                        ;\n                    }\n                })\n\n            }\n        }\n    }\n\n    onCollisionStart(\n        self: Collider,\n        other: Collider,\n        side: Side,\n        contact: CollisionContact\n    ): void {\n        const otherBody = other.owner.get(BodyComponent);\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = otherBody.owner;\n            this.tooltip.actions.scaleTo(vec(1, 1), vec(10, 20));\n        }\n    }\n\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\n        const otherBody = other.owner.get(BodyComponent);\n\n        if (otherBody.owner instanceof Player) {\n            this.playerReference = undefined;\n\n            // only hide if it's not on cooldown, otherwise we hide when it comes out of cooldown\n            if (!this.isOnCooldown) {\n                this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20));\n            }\n        }\n    }\n}\n\nexport default ResourceStation;\n","import { Actor, Color, Sprite, vec, Vector } from \"excalibur\";\nimport { Item } from \"../items/items\";\nimport { Machine } from \"./machine\";\nimport { Resources } from \"@/resources\";\nimport {Paddle} from \"@/actors/paddle\";\n\n\nexport class Freezer extends Machine {\n\n    constructor(x: number, y: number) {\n        super({pos: vec(x, y), z: 1}, false, Resources.Load.IceMachineSound);\n\n        const cover = new Actor();\n        cover.graphics.use(Resources.Machines().getSprite(3,1));\n        cover.z = 100;\n        this.addChild(cover);\n\n        this.graphics.use(Resources.Machines().getSprite(2, 1));\n\n        this.addChild(new Paddle(vec(-11, -18), vec(27, 2), 75));\n        this.addChild(new Paddle(vec(12, -18), vec(27, 2), -75));\n\n        this.addChild(new Paddle(vec(-.5, -18), vec(45, 2), 0));\n    }\n\n    getSprite(): Sprite {\n        const sprite = Resources.Machines().getSprite(2, 1)\n        sprite.scale = vec(0.22, 0.22);\n        return sprite;\n    }\n\n    protected getIntake(): [Vector, Vector] {\n        return [\n            vec(-5, -22),\n            vec(5, -15),\n        ]\n    }\n\n    protected getOutlet(): Vector {\n        return vec(0, 0);\n    }\n    protected processItem(item: Item): Item | null {\n        return item.freeze ? item.freeze() : null;\n    }\n}\n\n\n","import { AutomaticSquirrel } from \"@/actors/automatic-squirrel\";\nimport { HamsterWheel } from \"@/actors/contols/hamster-wheel\";\nimport { Lever } from \"@/actors/contols/lever\";\nimport { CustomerControl } from \"@/actors/customers-control\";\nimport { ItemActor } from \"@/actors/items/itemActor\";\nimport {Acorn, Coffee, GroundAcorn, GroundLeaf, IceCream, IcedTea, Item, Leaf, Tea} from \"@/actors/items/items\";\nimport { Brewer } from \"@/actors/machines/brewer\";\nimport { Grinder } from \"@/actors/machines/grinder\";\nimport { Platform, SolidPlatform } from \"@/actors/platform\";\nimport { Player } from \"@/actors/player\";\nimport ResourceStation from \"@/actors/stations/resource-station\";\nimport { Resources } from \"@/resources\";\nimport { Level, Recipe } from \"@/scenes/level-intro\";\nimport { MainScene } from \"@/scenes/main-scene\";\nimport {Actor, CollisionType, Color, Scene, vec, Vector} from \"excalibur\";\nimport {Freezer} from \"@/actors/machines/freezer\";\n\n\nexport interface DesiredItem {\n    item: Item;\n    distribution: number;\n    price: number;\n}\n\nlet FUCK_OFFSET = -40\n\nexport class Level1 implements Level {\n    readonly timeLimitMs: number = 1 * 60 * 1000;\n    readonly maxPoints: number = 130; // determined by playing\n    readonly size = Object.freeze(vec(400, 400)) as Vector;\n\n    getDesiredItems = (): DesiredItem[] => [\n        {item: new Acorn(),     distribution: 0.1, price: 5 },\n        {item: new Coffee(),    distribution: 0.9, price: 15 },\n    ];\n\n    getNewRecipes(): Recipe[] {\n        return [\n            new Recipe(new Acorn(), new Grinder(0, 0), new GroundAcorn()),\n            new Recipe(new GroundAcorn(), new Brewer(0, 0), new Coffee()),\n        ];\n    }\n\n    spawnItems(scene: MainScene): void {\n        let { x: W, y: H } = this.size;\n\n        ([\n            new SolidPlatform(W / 2, 200, W, 20), // the main solid platform\n            new SolidPlatform(W / 2, H, W, 20, 0, CollisionType.Fixed), // the bottom\n\n            // resource station platforms\n            new Platform(320, 150, 60, 10),\n\n            // brewer platform\n            new Platform(this.size.x / 2 + FUCK_OFFSET, 310, 30, 10, -1/2, CollisionType.Fixed),\n\n\n        ]).forEach(platform => scene.add(platform));\n\n        ([\n            //new ResourceStation(210, 150 - 15 - 5, 30, new Acorn()),\n            new ResourceStation(320, 150 - 15 - 5, 30, new Acorn()),\n        ]).forEach(station => scene.add(station));\n\n        // Create player-controlled squirrel\n        const player = new Player(this.size.x / 2, 180);\n        scene.add(player);\n\n        // // Create machines\n        const grinder = new Grinder(this.size.x / 2 + FUCK_OFFSET, 260);\n        scene.add(grinder);\n\n        const brewer = new Brewer(this.size.x / 2 - 30 + FUCK_OFFSET, 360);\n        scene.add(brewer);\n\n        const wheel = new HamsterWheel(90, 110, 50, grinder);\n        scene.add(wheel)\n\n        const background = new Actor({ z: -10 });\n        let sprite = Resources.Load.Background.toSprite()\n        sprite.tint = Color.Gray;\n        background.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(background);\n\n        const backgroundBranches = new Actor({ z: -10 });\n        sprite = Resources.Load.BackgroundBranches.toSprite()\n        backgroundBranches.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(backgroundBranches);\n\n        const customerControl = new CustomerControl(scene, this.size.x / 2, this.size.y, this.size.x, this.getDesiredItems());\n        scene.add(customerControl);\n    }\n}\n\n\nexport class Level2 implements Level {\n\n    timeLimitMs: number = 3 * 60 * 1000;\n    getDesiredItems(): DesiredItem[] {\n        return [\n            { item: new Leaf(), distribution: 0.1, price: 5 },\n            { item: new Tea(), distribution: 0.5, price: 10 },\n            { item: new Coffee(), distribution: 0.4, price: 15 },\n        ];\n    }\n    readonly maxPoints: number = 300; // determined by playing\n    readonly size = Object.freeze(vec(400, 400)) as Vector;\n\n    getNewRecipes(): Recipe[] {\n        return [\n            new Recipe(new Leaf(), new Grinder(0, 0), new GroundLeaf()),\n            new Recipe(new GroundLeaf(), new Brewer(0, 0), new Tea()),\n        ];\n    }\n\n    spawnItems(scene: MainScene): void {\n        let { x: W, y: H } = this.size;\n\n        ([\n            new SolidPlatform(W / 2, 200, W, 20), // the main solid platform\n            new SolidPlatform(W / 2, H, W, 20, 0, CollisionType.Fixed), // the bottom\n\n            // resource station platforms\n            new Platform(210, 120, 60, 10),\n            new Platform(320, 150, 60, 10),\n\n            // brewer platform\n            new Platform(this.size.x / 2 + FUCK_OFFSET, 310, 30, 10, -1/2, CollisionType.Fixed),\n\n\n        ]).forEach(platform => scene.add(platform));\n\n        ([\n            new ResourceStation(210, 120 - 15 - 5, 30, new Leaf()),\n            new ResourceStation(320, 150 - 15 - 5, 30, new Acorn()),\n        ]).forEach(station => scene.add(station));\n\n        // Create player-controlled squirrel\n        const player = new Player(this.size.x / 2, 180);\n        scene.add(player);\n\n        // // Create machines\n        const grinder = new Grinder(this.size.x / 2 + FUCK_OFFSET, 260);\n        scene.add(grinder);\n\n        const brewer = new Brewer(this.size.x / 2 - 30 + FUCK_OFFSET, 360);\n        scene.add(brewer);\n\n        const wheel = new HamsterWheel(90, 110, 50, grinder);\n        scene.add(wheel)\n\n        const background = new Actor({ z: -10 });\n        let sprite = Resources.Load.Background.toSprite()\n        sprite.tint = Color.Gray;\n        background.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(background);\n\n        const backgroundBranches = new Actor({ z: -10 });\n        sprite = Resources.Load.BackgroundBranches.toSprite()\n        backgroundBranches.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(backgroundBranches);\n\n        const customerControl = new CustomerControl(scene, this.size.x / 2, this.size.y, this.size.x, this.getDesiredItems());\n        scene.add(customerControl);\n    }\n}\n\nexport class Level3 implements Level {\n\n    timeLimitMs: number = 3 * 60 * 1000;\n    getDesiredItems(): DesiredItem[] {\n        return [\n            { item: new Acorn(), distribution: 0.1, price: 5 },\n            { item: new Tea(), distribution: 0.3, price: 10 },\n            { item: new Coffee(), distribution: 0.2, price: 15 },\n            { item: new IcedTea(), distribution: 0.2, price: 30 },\n            { item: new IceCream(), distribution: 0.2, price: 30 },\n        ];\n    }\n    readonly maxPoints: number = 400; // determined by playing\n    readonly size = Object.freeze(vec(400, 400)) as Vector;\n\n    getNewRecipes(): Recipe[] {\n        return [\n            new Recipe(new Leaf(), new Freezer(0, 0), new IcedTea()),\n            new Recipe(new GroundAcorn(), new Freezer(0, 0), new IceCream()),\n        ];\n    }\n\n    spawnItems(scene: MainScene): void {\n        let { x: W, y: H } = this.size;\n\n        let brewerPlatform = new Platform(this.size.x / 2 + FUCK_OFFSET, 310, 30, 10, -1/2, CollisionType.Fixed);\n\n        ([\n            new SolidPlatform(W / 2, 200, W, 20), // the main solid platform\n            new SolidPlatform(W / 2, H, W, 20, 0, CollisionType.Fixed), // the bottom\n\n            // resource station platforms\n            new Platform(210, 120, 60, 10),\n            new Platform(320, 150, 60, 10),\n\n            // brewer platform\n            brewerPlatform,\n\n        ]).forEach(platform => scene.add(platform));\n\n        ([\n            new ResourceStation(210, 120 - 15 - 5, 30, new Leaf()),\n            new ResourceStation(320, 150 - 15 - 5, 30, new Acorn()),\n        ]).forEach(station => scene.add(station));\n\n        // Create player-controlled squirrel\n        const player = new Player(this.size.x / 2, 180);\n        scene.add(player);\n\n        // // Create machines\n        const grinder = new Grinder(this.size.x / 2 + FUCK_OFFSET, 260);\n        scene.add(grinder);\n\n        const brewer = new Brewer(this.size.x / 2 - 30 + FUCK_OFFSET, 360);\n        scene.add(brewer);\n\n        const freezer = new Freezer(this.size.x / 2 + 30 + FUCK_OFFSET, 360);\n        scene.add(freezer);\n\n        const wheel = new HamsterWheel(90, 110, 50, grinder);\n        scene.add(wheel)\n\n        const lever = new Lever(240, 190, brewerPlatform);\n        scene.add(lever);\n\n        const background = new Actor({ z: -10 });\n        let sprite = Resources.Load.Background.toSprite()\n        sprite.tint = Color.Gray;\n        background.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(background);\n\n        const backgroundBranches = new Actor({ z: -10 });\n        sprite = Resources.Load.BackgroundBranches.toSprite()\n        backgroundBranches.graphics.use(sprite, { anchor: vec(0, 0), offset: vec(-50, 0) });\n        scene.add(backgroundBranches);\n\n        const customerControl = new CustomerControl(scene, this.size.x / 2, this.size.y, this.size.x, this.getDesiredItems());\n        scene.add(customerControl);\n    }\n}\n\nexport const LEVELS: Level[] = [\n    new Level1(),\n    new Level2(),\n    new Level3(),\n];\n","import { Engine, Loader, DisplayMode, Keys, Scene, CollisionType, Color, Actor } from 'excalibur';\nimport { GameStatistics, MainScene } from './scenes/main-scene';\nimport { Resources } from './resources';\nimport { Level, LevelIntro } from './scenes/level-intro';\nimport { GameStart } from './scenes/game-start';\nimport { LevelOutro } from './scenes/level-outro';\nimport { LEVELS } from './levels/level';\n\nconst enum Scenes {\n    Idle = 'idle',\n    Start = 'start',\n    Intro = 'intro',\n    Outro = 'outro',\n    Main = 'main',\n    Pause = 'pause',\n}\n\n/**\n * Managed game class\n */\nexport class Game extends Engine {\n    private mainScene!: MainScene;\n    private curLevelId: number = 0\n    private isShowDebug = false;\n\n    constructor() {\n        super({\n            displayMode: DisplayMode.FillScreen,\n            antialiasing: false,\n        });\n\n        this.debug.collider.boundsColor = Color.Red;\n        this.debug.collider.showAll = true;\n    }\n\n    public start() {\n        // Automatically load all default resources\n        this.debug.collider.showBounds = true;\n        const loader = new Loader(Object.values(Resources.Load));\n\n        return super.start(loader);\n    }\n\n    restart(): void {\n        this.goToScene(Scenes.Idle).then(() => {\n            this.removeScene(this.mainScene);\n            this.showCurrentLevel();\n        });\n    }\n\n    onStart(): void {\n        this.removeScene(Scenes.Start);\n        this.addScene(Scenes.Start, new GameStart(this));\n        this.goToScene(Scenes.Start);\n    }\n\n    public showLevelIntro(): void {\n        this.removeScene(Scenes.Intro);\n        this.addScene(Scenes.Intro, new LevelIntro(this, LEVELS[this.curLevelId], this.curLevelId));\n        this.goToScene(Scenes.Intro);\n    }\n\n    public showNextLevelIntro(): void {\n        this.curLevelId++;\n        if (this.curLevelId >= LEVELS.length) {\n            this.curLevelId = 0;\n            this.onStart();\n        } else {\n            this.showLevelIntro();\n        }\n    }\n\n    public showLevelOutro(statics: GameStatistics) {\n        this.removeScene(Scenes.Outro);\n        this.addScene(Scenes.Outro, new LevelOutro(this, this.curLevelId, statics));\n        this.goToScene(Scenes.Outro);\n    }\n\n    public showCurrentLevel(): void {\n        this.removeScene(Scenes.Main);\n        this.addScene(Scenes.Main, new MainScene(this, LEVELS[this.curLevelId]));\n\n        Resources.Load.MainMusic.loop = true;\n\n        if (!Resources.Load.MainMusic.isPlaying())\n            Resources.Load.MainMusic.play(0.15)\n\n        this.goToScene(Scenes.Main);\n    }\n\n    public showPause(): void {\n        this.addScene(Scenes.Pause, new LevelIntro(this, LEVELS[this.curLevelId], this.curLevelId, true))\n\n        Resources.Load.MainMusic.pause();\n\n        this.goToScene(Scenes.Pause);\n    }\n\n    public exitPause(): void {\n        if (!Resources.Load.MainMusic.isPlaying())\n            Resources.Load.MainMusic.play(0.15)\n\n        this.goToScene(Scenes.Main);\n    }\n\n    onPreUpdate(engine: Engine, delta: number): void {\n        if (engine.input.keyboard.wasPressed(Keys.F4)) {\n            this.isShowDebug = !this.isShowDebug;\n            this.showDebug(this.isShowDebug);\n        }\n    }\n}\n","import {Game} from \"./game\";\n\nconst game = new Game();\ngame.start().then(() => {\n  game.onStart();\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkexcalibur_webpack\"] = self[\"webpackChunkexcalibur_webpack\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [128], () => (__webpack_require__(546)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","SceneScaler","constructor","sizeInPixels","scene","this","handler","onScenePreDraw","bind","on","deactivate","off","e","camera","pos","scale","zoom","Math","min","window","innerWidth","x","innerHeight","y","LevelBoundaries","size","config","super","W","H","p","bounds","top","push","Box","down","collider","set","MainScene","game","level","entityCounter","text","timeLabel","timePlayed","timeLastCustomer","statistics","customersServed","customerLongestWait","pointsMax","maxPoints","pointsGained","recipesMade","recipesCooked","Set","resolveCustomer","customer","item","desiredItem","price","customerWait","floor","add","console","log","onInitialize","engine","backgroundColor","spawnItems","initializeClock","physics","gravity","font","textAlign","Left","baseAlign","Bottom","family","unit","Px","color","White","smoothing","shadow","blur","offset","Black","onPreDraw","ctx","delta","timeLeft","timeLimitMs","minutes","seconds","onPreUpdate","showLevelOutro","input","keyboard","wasPressed","P","showPause","runSound","jumpSound","drop","chirp1","chirp2","mainMusic","grinderSound","brewerSound","leverSound","iceSound","Resources","Load","Sword","Magor","VeverkaRun","VeverkaIdle","ItemsImg","Logo","Lever","PlatformSmall","PlatformMedium","PlatformWheel","ResourceStation","Wheel","Button","Machines","LevelTable","StarGold","StarGrey","Bubble","Background","BackgroundBranches","JumpSound","RunSound","Chirp1Sound","Chirp2Sound","DropSound","MainMusic","GrinderSound","BrewerSound","LeverSound","IceMachineSound","Items","lazy","fromImageSource","image","grid","columns","rows","spriteHeight","spriteWidth","provider","storage","TextLabel","message","GREY","align","Center","_actor","graphics","use","actor","width","WHITE","ORANGE","ItemActor","spawnPos","radius","collisionType","Active","z","allocatedToCustomer","clone","getSprite","onPostUpdate","angularVelocity","vel","Recipe","ingredient1","ingredient2","result","show","plus","equals","ingr1Act","plusAct","ingr2Act","eqAct","resultAct","body","PreventCollision","LevelIntro","levelId","paused","height","scaler","hintText","levelTable","toSprite","showHint","recipes","getNewRecipes","i","length","Space","exitPause","showCurrentLevel","onDeactivate","context","GameStart","logo","showLevelIntro","LevelOutro","ratio","starsGained","resultMessage","star","T","N","showNextLevelIntro","Player","Passive","GRAVITY","JUMP_GRAVITY","MAX_VELOCITY","ACCELERATION","TURN_ACCELERATION","AIR_MOVEMENT_PENALITY","JUMP_FORCE","isOnWheel","runningDirection","lastGroundState","isOnGround","isPressingDown","isOnSolidPlatform","carryingItem","animations","run","fromSpriteSheet","flying","idle","volume","loop","play","onKeyPress","jumpPressed","Up","jumpHeld","isHeld","heldLeft","A","heldRight","D","Right","movementDirection","sign","S","Down","direction","accel","acc","flipHorizontal","updateItemPosition","abs","loudness","onCollisionStart","self","other","side","contact","otherBody","owner","get","Fixed","Platform","SolidPlatform","WheelPlatform","center","getFurthestPoint","onCollisionEnd","lastContact","evt","key","Keys","dropItem","isCarryingItem","pickUpItem","addChild","removeChild","position","facing","frame","current","_currentFrame","uglyOffset","sin","handOffset","backOffset","undefined","rotation","Transparent","isOnPlayform","playerReference","HamsterWheel","linkedMachine","wheel","Gray","platform","platformHeight","actions","rotateBy","remainingProcessingTime","max","linkedPlatform","Circle","getQueue","isComplete","clearActions","rotateTo","Customer","waitingX","startY","desiredProduct","Yellow","satisfied","assignedItem","runningTarget","bubble","itemActor","scaleTo","updateBubblePosition","PICK_UP_THRESHOLD","goTo","drawWidth","kill","goFetchItem","xPosition","productAssigned","CustomerControl","desiredItems","customers","pendingProducts","mainScene","sampleItem","cumulativeWeights","reduce","distribution","random","findIndex","cumulativeWeight","scheduleCustomersRefresh","timeout","MAX_TIMEOUT","MIN_TIMEOUT","setTimeout","filter","c","isKilled","waitingCustomers","MAX_WAITING_CUSTOMERS","product","CUSTOMER_OFFSET","find","Object","getPrototypeOf","includes","fade","callMethod","ITEM_TIMEOUT","HEIGHT","Garbage","Leaf","grind","GroundLeaf","freeze","IcedTea","Acorn","GroundAcorn","roast","RoastedAcorn","brew","Coffee","RoastedGroundAcorn","IceCream","Tea","Machine","manual","sound","isOn","itemQueue","blacklistedItemQueue","isProcessing","maxProcessingTime","tooltip","Middle","intakeStart","intakeEnd","getIntake","intakeActor","shift","stop","newItem","processItem","newActor","getOutlet","toFixed","Brewer","sprite","Polygon","funnelSprite","Paddle","degrees","PI","Grinder","grindedLastTick","crank","crankSprite","grinding","oldRotation","seek","cooldownTimer","isOnCooldown","COOLDOWN","fPressed","opacity","delay","Freezer","cover","FUCK_OFFSET","LEVELS","getDesiredItems","forEach","station","player","grinder","brewer","background","tint","anchor","backgroundBranches","customerControl","brewerPlatform","freezer","lever","Game","displayMode","FillScreen","antialiasing","curLevelId","isShowDebug","debug","boundsColor","Red","showAll","start","showBounds","loader","values","restart","goToScene","then","removeScene","onStart","addScene","statics","isPlaying","pause","F4","showDebug","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","d","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","Error","replace","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}