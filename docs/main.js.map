{"version":3,"file":"main.js","mappings":"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","sources":["webpack://excalibur-webpack/webpack/runtime/chunk loaded","webpack://excalibur-webpack/./src/resources.ts","webpack://excalibur-webpack/./src/actors/platform.ts","webpack://excalibur-webpack/./src/actors/player.ts","webpack://excalibur-webpack/./src/actors/automatic-squirrel.ts","webpack://excalibur-webpack/./src/actors/contols/hamster-wheel.ts","webpack://excalibur-webpack/./src/actors/contols/lever.ts","webpack://excalibur-webpack/./src/actors/items/itemActor.ts","webpack://excalibur-webpack/./src/actors/machines/machine.ts","webpack://excalibur-webpack/./src/actors/paddle.ts","webpack://excalibur-webpack/./src/actors/machines/grinder.ts","webpack://excalibur-webpack/./src/actors/machines/brewer.ts","webpack://excalibur-webpack/./src/levels/level.ts","webpack://excalibur-webpack/./src/actors/items/items.ts","webpack://excalibur-webpack/./src/actors/stations/resource-station.ts","webpack://excalibur-webpack/./src/actors/customer.ts","webpack://excalibur-webpack/./src/actors/customers-control.ts","webpack://excalibur-webpack/./src/scenes/scene-scaler.ts","webpack://excalibur-webpack/./src/scenes/main-scene.ts","webpack://excalibur-webpack/./src/ui/text-label.ts","webpack://excalibur-webpack/./src/scenes/level-intro.ts","webpack://excalibur-webpack/./src/scenes/game-start.ts","webpack://excalibur-webpack/./src/scenes/level-outro.ts","webpack://excalibur-webpack/./src/game.ts","webpack://excalibur-webpack/./src/index.ts","webpack://excalibur-webpack/webpack/bootstrap","webpack://excalibur-webpack/webpack/runtime/define property getters","webpack://excalibur-webpack/webpack/runtime/global","webpack://excalibur-webpack/webpack/runtime/hasOwnProperty shorthand","webpack://excalibur-webpack/webpack/runtime/publicPath","webpack://excalibur-webpack/webpack/runtime/jsonp chunk loading","webpack://excalibur-webpack/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import { ImageSource, Sprite, SpriteSheet } from 'excalibur';\r\nimport sword from './images/sword.png';\r\nimport magor from './images/magor.png';\r\nimport button from './images/button.png';\r\nimport veverkaRun from './images/veverka-run.png';\r\nimport veverkaIdle from './images/veverka-idle.png';\r\nimport logo from './images/acorn_logo.png';\r\nimport lever from './images/lever.png';\r\nimport platformSmall from './images/platform-small.png';\r\nimport platformMedium from './images/platform-medium.png';\r\nimport platformWheel from './images/platform-wheel.png';\r\nimport wheel from './images/wheel.png';\r\nimport items from './images/items.png';\r\nimport machines from './images/machines.png';\r\nimport levelTable from './images/level_table.png';\r\nimport starGold from './images/star_gold.png';\r\nimport starGrey from './images/star_grey.png';\r\n\r\nimport resourceStation from './images/resource-station.png';\r\n\r\n/**\r\n * Default global resource dictionary. This gets loaded immediately\r\n * and holds available assets for the game.\r\n */\r\nconst Resources = new class Resources {\r\n    public Load = {\r\n        Sword: new ImageSource(sword),\r\n        Magor: new ImageSource(magor),\r\n        VeverkaRun: new ImageSource(veverkaRun),\r\n        VeverkaIdle: new ImageSource(veverkaIdle),\r\n        ItemsImg: new ImageSource(items),\r\n        Logo: new ImageSource(logo),\r\n        Lever: new ImageSource(lever),\r\n        PlatformSmall: new ImageSource(platformSmall),\r\n        PlatformMedium: new ImageSource(platformMedium),\r\n        PlatformWheel: new ImageSource(platformWheel),\r\n        ResourceStation: new ImageSource(resourceStation),\r\n        Wheel: new ImageSource(wheel),\r\n        Button: new ImageSource(button),\r\n        Machines: new ImageSource(machines),\r\n        LevelTable: new ImageSource(levelTable),\r\n        StarGold: new ImageSource(starGold),\r\n        StarGrey: new ImageSource(starGrey),\r\n    }\r\n\r\n    readonly Items = lazy(() =>\r\n        SpriteSheet.fromImageSource({\r\n            image: this.Load.ItemsImg,\r\n            grid: {\r\n                columns: 8,\r\n                rows: 8,\r\n                spriteHeight: 16,\r\n                spriteWidth: 16,\r\n            }\r\n        })\r\n    );\r\n\r\n    readonly Machines = lazy(() =>\r\n        SpriteSheet.fromImageSource({\r\n            image: this.Load.Machines,\r\n            grid: {\r\n                columns: 8,\r\n                rows: 5,\r\n                spriteWidth: 48,\r\n                spriteHeight: 70,\r\n            }\r\n        })\r\n    );\r\n}\r\n\r\nfunction lazy<T>(provider: () => T): () => T {\r\n    let storage: T | undefined = undefined;\r\n    let computed = false;\r\n    return () => {\r\n        if (!computed) {\r\n            storage = provider();\r\n        }\r\n        return storage!;\r\n    }\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\nimport {BodyComponent, Collider, CollisionContact, CollisionType, Color, Engine, Side} from 'excalibur';\r\nimport {Player} from \"@/actors/player\";\r\nimport {Resources} from \"@/resources\";\r\n\r\nexport class Platform extends ex.Actor {\r\n    constructor(x: number, y: number, width: number, height: number, rotation: number = 0, collisionType: CollisionType = CollisionType.Passive) {\r\n        super({\r\n            pos: ex.vec(x, y),\r\n            width: width,\r\n            height: height,\r\n            color: Color.DarkGray,\r\n            collisionType: collisionType,\r\n        });\r\n\r\n        this.rotation = rotation;\r\n\r\n        if (width == 25)\r\n            this.graphics.use(Resources.Load.PlatformWheel.toSprite());\r\n        if (width == 30)\r\n            this.graphics.use(Resources.Load.PlatformSmall.toSprite());\r\n        else if (width == 60)\r\n            this.graphics.use(Resources.Load.PlatformMedium.toSprite());\r\n    }\r\n}\r\n\r\nexport class SolidPlatform extends Platform {\r\n    onCollisionStart(\r\n        self: Collider,\r\n        other: Collider,\r\n        side: Side,\r\n        contact: CollisionContact\r\n    ): void {\r\n        const otherBody = other.owner.get(BodyComponent)\r\n\r\n        if (otherBody.owner instanceof Player) {\r\n            otherBody.owner.isOnSolidPlatform = true;\r\n            otherBody.owner.isOnGround = true;\r\n        }\r\n    }\r\n\r\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\r\n        const otherBody = other.owner.get(BodyComponent)\r\n\r\n        if (otherBody.owner instanceof Player) {\r\n            otherBody.owner.isOnSolidPlatform = false;\r\n        }\r\n    }\r\n}\r\n\r\nexport class WheelPlatform extends Platform {\r\n    public isOnPlayform = false;\r\n    public direction  = 0;\r\n\r\n    playerReference?: Player;\r\n\r\n    onPostUpdate(engine: Engine, delta: number): void {\r\n        if (this.playerReference && this.playerReference.isOnGround) {\r\n            this.direction = this.playerReference.runningDirection;\r\n        }\r\n    }\r\n\r\n    onCollisionStart(\r\n        self: Collider,\r\n        other: Collider,\r\n        side: Side,\r\n        contact: CollisionContact\r\n    ): void {\r\n        const otherBody = other.owner.get(BodyComponent)\r\n\r\n        if (otherBody.owner instanceof Player) {\r\n            this.isOnPlayform = true;\r\n            this.playerReference = otherBody.owner;\r\n        }\r\n    }\r\n\r\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\r\n        const otherBody = other.owner.get(BodyComponent)\r\n\r\n        if (otherBody.owner instanceof Player) {\r\n            this.isOnPlayform = false;\r\n            this.playerReference = undefined;\r\n            this.direction = 0;\r\n        }\r\n    }\r\n\r\n}","import {\r\n    Actor,\r\n    BodyComponent,\r\n    CircleCollider,\r\n    clamp,\r\n    Collider, CollisionContact, CollisionGroup,\r\n    CollisionType,\r\n    Color,\r\n    Engine,\r\n    Keys, Shape,\r\n    Side,\r\n    vec\r\n} from 'excalibur';\r\nimport {ItemActor} from \"@/actors/items/itemActor\";\r\nimport * as ex from \"excalibur\";\r\nimport {Resources} from \"@/resources\";\r\nimport {Platform, SolidPlatform, WheelPlatform} from \"@/actors/platform\";\r\n\r\n\r\nexport class Player extends Actor {\r\n    GRAVITY = 3000;\r\n    JUMP_GRAVITY = this.GRAVITY * 0.5\r\n\r\n    MAX_VELOCITY = 300\r\n    ACCELERATION = 700\r\n    TURN_ACCELERATION = this.ACCELERATION * 4\r\n\r\n    AIR_MOVEMENT_PENALITY = 0.75;\r\n\r\n    JUMP_FORCE = 430\r\n\r\n    isOnWheel = false;\r\n    public runningDirection = 0;\r\n\r\n    isOnGround = false;\r\n    isPressingDown = false;\r\n\r\n    // set by the solid platform\r\n    public isOnSolidPlatform = false;\r\n\r\n    private carryingItem: ItemActor | null = null;\r\n\r\n    animations = {\r\n        run: ex.Animation.fromSpriteSheet(\r\n            ex.SpriteSheet.fromImageSource({\r\n                image: Resources.Load.VeverkaRun,\r\n                grid: {\r\n                    columns: 1,\r\n                    rows: 7,\r\n                    spriteWidth: 128,\r\n                    spriteHeight: 25,\r\n                },\r\n            }), [0, 1, 2, 3, 4, 5, 6], 50),\r\n        flying: ex.Animation.fromSpriteSheet(\r\n            ex.SpriteSheet.fromImageSource({\r\n                image: Resources.Load.VeverkaRun,\r\n                grid: {\r\n                    columns: 1,\r\n                    rows: 7,\r\n                    spriteWidth: 128,\r\n                    spriteHeight: 25,\r\n                },\r\n            }), [2, 3], 100),\r\n        idle: ex.Animation.fromSpriteSheet(\r\n            ex.SpriteSheet.fromImageSource({\r\n                image: Resources.Load.VeverkaIdle,\r\n                grid: {\r\n                    columns: 3,\r\n                    rows: 1,\r\n                    spriteWidth: 32,\r\n                    spriteHeight: 32,\r\n                },\r\n            }), [0, 1, 2, 1], 200),\r\n    }\r\n\r\n    public constructor(x: number, y: number) {\r\n        super({\r\n            pos: vec(x, y),\r\n            z: 1,\r\n            width: 25,\r\n            height: 25,\r\n            color: new Color(255, 255, 255),\r\n            collisionType: CollisionType.Passive,\r\n            collider: Shape.Box(32, 32),\r\n        });\r\n    }\r\n\r\n    onInitialize(engine: ex.Engine) {\r\n        engine.input.keyboard.on('press', this.onKeyPress.bind(this));\r\n    }\r\n\r\n    onPostUpdate(engine: Engine, delta: number): void {\r\n        const jumpPressed = engine.input.keyboard.wasPressed(Keys.W) || engine.input.keyboard.isHeld(Keys.Up)\r\n        const jumpHeld = engine.input.keyboard.isHeld(Keys.W) || engine.input.keyboard.isHeld(Keys.Up)\r\n\r\n        const heldLeft = engine.input.keyboard.isHeld(Keys.A) || engine.input.keyboard.isHeld(Keys.Left)\r\n        const heldRight = engine.input.keyboard.isHeld(Keys.D) || engine.input.keyboard.isHeld(Keys.Right)\r\n\r\n        let movementDirection = Math.sign(this.vel.x);\r\n\r\n        this.isPressingDown = engine.input.keyboard.isHeld(Keys.S) || engine.input.keyboard.isHeld(Keys.Down);\r\n\r\n        // move left or right\r\n        if (heldLeft || heldRight) {\r\n            let direction = 0;\r\n\r\n            if (heldLeft) direction -= 1;\r\n            if (heldRight) direction += 1;\r\n\r\n            // turning the other way is faster\r\n            let accel = (direction != movementDirection ? this.TURN_ACCELERATION : this.ACCELERATION)\r\n                * direction;\r\n\r\n            // turning in air is slower\r\n            if (!this.isOnGround) accel *= this.AIR_MOVEMENT_PENALITY;\r\n\r\n            this.acc.x = accel;\r\n\r\n            this.runningDirection = direction;\r\n        } else {\r\n            this.acc.x = 0;\r\n            this.vel.x *= 0.75;\r\n\r\n            this.runningDirection = 0;\r\n        }\r\n\r\n        if (this.runningDirection == -1) {\r\n            this.graphics.flipHorizontal = true;\r\n        } else if (this.runningDirection == 1) {\r\n            this.graphics.flipHorizontal = false;\r\n        }\r\n\r\n        this.vel.x = clamp(this.vel.x, -this.MAX_VELOCITY, this.MAX_VELOCITY)\r\n\r\n        // just jumping\r\n        if (jumpPressed && this.isOnGround) {\r\n            this.vel.y = -this.JUMP_FORCE;\r\n            this.isOnGround = false;\r\n            this.isOnWheel = false;\r\n        }\r\n\r\n        // fall through the platform\r\n        if (this.isPressingDown && !this.isOnSolidPlatform) {\r\n            this.isOnGround = false;\r\n            this.isOnWheel = false;\r\n        }\r\n\r\n        // if space is held and we're going up, apply jump gravity\r\n        if (jumpHeld && Math.sign(this.vel.y) < 0) {\r\n            this.acc.y = this.JUMP_GRAVITY\r\n        } else {\r\n            this.acc.y = this.GRAVITY\r\n        }\r\n\r\n        // not on the ground always means flying\r\n        if (!this.isOnGround) {\r\n            this.graphics.use(this.animations.flying);\r\n            this.updateItemPosition('back');\r\n        } else {\r\n            // when on the ground, we are either running on the wheel\r\n            if (this.isOnWheel) {\r\n                if (this.runningDirection == 0) {\r\n                    this.graphics.use(this.animations.idle);\r\n                    this.updateItemPosition('hand');\r\n                }\r\n                else {\r\n                    this.graphics.use(this.animations.run);\r\n                    this.updateItemPosition('back');\r\n                }\r\n            }\r\n\r\n            // else we're idling\r\n            else if (Math.abs(this.vel.x) < 50) {\r\n                this.graphics.use(this.animations.idle);\r\n                this.updateItemPosition('hand');\r\n            }\r\n            else {\r\n                this.graphics.use(this.animations.run);\r\n                this.updateItemPosition('back');\r\n            }\r\n        }\r\n\r\n        // ground cancels all Y movement\r\n        if (this.isOnGround) {\r\n            this.acc.y = 0;\r\n            this.vel.y = 0;\r\n        }\r\n\r\n        if (this.isOnWheel) {\r\n            this.acc.x = 0;\r\n            this.vel.x = 0;\r\n        }\r\n    }\r\n\r\n    onCollisionStart(\r\n        self: Collider,\r\n        other: Collider,\r\n        side: Side,\r\n        contact: CollisionContact\r\n    ): void {\r\n        const otherBody = other.owner.get(BodyComponent)\r\n\r\n        if (otherBody?.collisionType === CollisionType.Fixed || otherBody?.collisionType === CollisionType.Passive) {\r\n            // player landed on the ground\r\n            if ((side === Side.Bottom && !this.isPressingDown && otherBody.owner instanceof Platform) || otherBody.owner instanceof SolidPlatform) {\r\n                this.isOnGround = true;\r\n\r\n                if (otherBody.owner instanceof WheelPlatform) {\r\n                    this.isOnWheel = true;\r\n                    this.pos.x = other.center.x;\r\n                }\r\n\r\n                // push out of the platform\r\n                // minuses because y axis is negative upwards\r\n                this.pos.y = other.getFurthestPoint(vec(0, -1)).y\r\n                    - self.bounds.height / 2 + 0.1;\r\n            }\r\n        }\r\n    }\r\n\r\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\r\n        super.onCollisionEnd(self, other, side, lastContact);\r\n\r\n        const otherBody = other.owner.get(BodyComponent)\r\n\r\n        // Tom is fucking going to jail\r\n        if (otherBody?.owner instanceof Platform && otherBody.pos.y > this.pos.y) {\r\n            this.isOnGround = false;\r\n        }\r\n    }\r\n\r\n    onKeyPress(evt: ex.Input.KeyEvent) {\r\n        if (evt.key === ex.Input.Keys.Space) {\r\n            this.dropItem();\r\n        }\r\n    }\r\n\r\n    isCarryingItem() {\r\n        return (this.carryingItem != null);\r\n    }\r\n\r\n    pickUpItem(item: ItemActor) {\r\n        this.carryingItem = item;\r\n        item.body.collisionType = ex.CollisionType.Passive;\r\n        this.addChild(this.carryingItem);\r\n    }\r\n\r\n    dropItem() {\r\n        if (this.carryingItem) {\r\n            this.removeChild(this.carryingItem)\r\n\r\n            this.carryingItem.pos = this.pos.clone();\r\n            this.carryingItem.vel = ex.vec(this.vel.x, this.vel.y / 10);\r\n\r\n            this.carryingItem.body.collisionType = ex.CollisionType.Active;\r\n            this.carryingItem.offset = vec(0, 0);\r\n\r\n            this.scene?.add(this.carryingItem);\r\n\r\n            this.carryingItem = null;\r\n        }\r\n    }\r\n\r\n    private updateItemPosition(position: string) {\r\n        let facing = this.graphics.flipHorizontal;\r\n\r\n        let frame = (this.graphics.current as any)._currentFrame;\r\n        let uglyOffset  = Math.sin(frame);\r\n\r\n        let handOffset = vec(facing ? -10 : 10, 3 + uglyOffset);\r\n        let backOffset = vec(facing ? -20 : 20, 2 + uglyOffset);\r\n\r\n        if (this.carryingItem != undefined) {\r\n            this.carryingItem.graphics.flipHorizontal = facing;\r\n\r\n            if (position == 'hand') {\r\n                this.carryingItem.offset = handOffset;\r\n            }\r\n            else {\r\n                this.carryingItem.offset = backOffset;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as ex from 'excalibur';\r\nimport { ItemActor } from './items/itemActor';\r\nimport {Resources} from \"@/resources\";\r\n\r\nexport class AutomaticSquirrel extends ex.Actor {\r\n    private carryingItem: ItemActor | null = null;\r\n\r\n    constructor() {\r\n        super({\r\n            pos: ex.vec(200, 500),\r\n            width: 32,\r\n            height: 32,\r\n            color: ex.Color.Gray,\r\n            collisionType: ex.CollisionType.Active,\r\n        });\r\n    }\r\n\r\n    onInitialize(engine: ex.Engine) {\r\n        // TODO: Implement AI logic to collect items and deliver to customers\r\n    }\r\n\r\n    update(engine: ex.Engine, delta: number) {\r\n        super.update(engine, delta);\r\n        // TODO: Implement AI movement and item handling\r\n    }\r\n}\r\n","import * as ex from 'excalibur';\r\nimport {Engine, vec} from 'excalibur';\r\nimport { Machine } from '../machines/machine';\r\nimport { WheelPlatform } from \"@/actors/platform\";\r\nimport {Resources} from \"@/resources\";\r\n\r\nexport class HamsterWheel extends ex.Actor {\r\n    public linkedMachine: Machine | undefined;\r\n\r\n    public wheel: ex.Actor;\r\n    public platform: WheelPlatform;\r\n\r\n    constructor(x: number, y: number, radius: number, linkedMachine?: Machine) {\r\n        super({ pos: ex.vec(x, y) });\r\n\r\n        this.linkedMachine = linkedMachine;\r\n\r\n        // Add wheel component\r\n        this.wheel = new ex.Actor({\r\n            radius: radius,\r\n            color: ex.Color.Gray,\r\n            scale: vec(1.1, 1.1),\r\n        });\r\n\r\n        this.wheel.graphics.use(Resources.Load.Wheel.toSprite())\r\n\r\n        const platformWidth = 25;\r\n        const platformHeight = 10;\r\n\r\n        // Add platform component on top of the wheel\r\n        this.platform = new WheelPlatform(0, radius + platformHeight / 2, platformWidth, platformHeight);\r\n\r\n        // Add components as children\r\n        this.addChild(this.wheel);\r\n        this.addChild(this.platform);\r\n    }\r\n\r\n    onPostUpdate(engine: Engine, delta: number): void {\r\n        if (this.platform.direction != 0) {\r\n            this.wheel.actions.rotateBy(this.platform.direction / 20, 100);\r\n\r\n            if (this.linkedMachine != undefined) {\r\n                this.linkedMachine.remainingProcessingTime = Math.max(this.linkedMachine.remainingProcessingTime - delta / 1000, 0);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as ex from 'excalibur';\r\nimport { Machine } from '../machines/machine';\r\nimport {BodyComponent, Collider, CollisionContact, Engine, Shape, Side, vec} from \"excalibur\";\r\nimport {Player} from \"@/actors/player\";\r\nimport {Resources} from \"@/resources\";\r\n\r\nexport class Lever extends ex.Actor {\r\n    public linkedMachine!: Machine;\r\n\r\n    playerReference!: Player | null\r\n\r\n    constructor(x: number, y: number, linkedMachine?: Machine) {\r\n        super({\r\n            pos: ex.vec(x, y),\r\n            width: 8,\r\n            height: 32,\r\n            offset: vec(0, -16),\r\n            collisionType: ex.CollisionType.Passive,\r\n            collider: Shape.Circle(4)\r\n        });\r\n\r\n        this.graphics.use(Resources.Load.Lever.toSprite())\r\n\r\n        if (linkedMachine) {\r\n            this.linkedMachine = linkedMachine;\r\n        }\r\n    }\r\n\r\n    onPostUpdate(engine: Engine, delta: number): void {\r\n        if (this.playerReference && this.actions.getQueue().isComplete()) {\r\n            let direction = Math.sign(this.playerReference.vel.x)\r\n\r\n            if (direction) {\r\n                this.actions.clearActions()\r\n                this.actions.rotateTo(direction / 2, 5);\r\n            }\r\n        }\r\n    }\r\n\r\n    onCollisionStart(\r\n        self: Collider,\r\n        other: Collider,\r\n        side: Side,\r\n        contact: CollisionContact\r\n    ): void {\r\n        const otherBody = other.owner.get(BodyComponent)\r\n\r\n        if (otherBody.owner instanceof Player) {\r\n            this.playerReference = otherBody.owner;\r\n        }\r\n    }\r\n\r\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\r\n        const otherBody = other.owner.get(BodyComponent)\r\n\r\n        if (otherBody.owner instanceof Player) {\r\n            this.playerReference = null;\r\n        }\r\n    }\r\n\r\n    onInitialize(engine: ex.Engine) {\r\n        // TODO: Implement lever interaction\r\n    }\r\n}\r\n","import { Item } from '@/actors/items/items';\r\nimport { Resources } from '@/resources';\r\nimport {Actor, CollisionType, Color, Engine, Vector} from 'excalibur';\r\n\r\nexport class ItemActor extends Actor {\r\n    public allocatedToCustomer: boolean = false;\r\n\r\n    constructor(readonly item: Item, spawnPos?: Vector) {\r\n        super({\r\n            radius: 6,\r\n            collisionType: CollisionType.Active,\r\n        });\r\n        if (spawnPos) {\r\n            this.pos = spawnPos.clone();\r\n        }\r\n\r\n        this.graphics.use(item.getSprite());\r\n    }\r\n\r\n    onPostUpdate(engine: Engine, delta: number): void {\r\n        this.angularVelocity = this.vel.x / 10;\r\n    }\r\n}\r\n","import { ItemActor } from '../items/itemActor';\r\nimport { Item } from '@/actors/items/items';\r\nimport {\r\n    Actor,\r\n    ActorArgs, BaseAlign,\r\n    Collider,\r\n    CollisionContact,\r\n    CollisionType,\r\n    Color,\r\n    Engine, Font, FontUnit,\r\n    Label,\r\n    Side, TextAlign, vec,\r\n    Vector\r\n} from 'excalibur';\r\n\r\nexport abstract class Machine extends Actor {\r\n    public isOn: boolean = true;\r\n\r\n    intakeActor: Actor;\r\n\r\n    private itemQueue: Array<ItemActor> = [];\r\n    private blacklistedItemQueue: Array<ItemActor> = [];\r\n\r\n    private isProcessing: boolean = false;\r\n    private manual: boolean;\r\n\r\n    public remainingProcessingTime = 0;\r\n    public maxProcessingTime = 1.5;\r\n\r\n    private tooltip: Label;\r\n\r\n    constructor(config?: ActorArgs, manual: boolean = false) {\r\n        super({\r\n            color: Color.Gray,\r\n            collisionType: CollisionType.Fixed,\r\n            ...config,\r\n        });\r\n\r\n        this.manual = manual;\r\n\r\n        // Create tooltip (initially hidden)\r\n        this.tooltip = new Label({\r\n            text: '',\r\n            pos: vec(0, 0), // Position the label above the station\r\n            font: new Font({\r\n                textAlign: TextAlign.Center,\r\n                baseAlign: BaseAlign.Middle,\r\n                shadow: {\r\n                    blur: 5,\r\n                    offset: vec(0, 0),\r\n                    color: Color.Black,\r\n                },\r\n                family: 'Silkscreen',\r\n                size: 15,\r\n                unit: FontUnit.Px,\r\n                color: Color.White\r\n            })\r\n        });\r\n\r\n        this.tooltip.z = 10;\r\n\r\n        let [intakeStart, intakeEnd] = this.getIntake();\r\n        this.intakeActor = new Actor({\r\n            pos: intakeStart.add(intakeEnd).scale(1 / 2),\r\n            width: intakeEnd.x - intakeStart.x,\r\n            height: intakeEnd.y - intakeStart.y,\r\n            collisionType: CollisionType.Fixed,\r\n            color: Color.Green,\r\n        });\r\n        this.intakeActor.on('collisionstart', e => {\r\n            if (this.isOn && e.other instanceof ItemActor) {\r\n                const itemActor = e.other as ItemActor;\r\n\r\n                if (!this.itemQueue.includes(itemActor) && !this.blacklistedItemQueue.includes(itemActor)) {\r\n                    this.itemQueue.push(itemActor);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.addChild(this.intakeActor);\r\n        this.addChild(this.tooltip);\r\n    }\r\n\r\n\r\n    onPostUpdate(engine: Engine, delta: number): void {\r\n        if (!this.isProcessing) {\r\n            if (this.itemQueue.length != 0) {\r\n                this.isProcessing = true;\r\n                this.remainingProcessingTime = this.maxProcessingTime;\r\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\r\n\r\n            }\r\n        } else {\r\n            if (this.remainingProcessingTime <= 0) {\r\n                const itemActor = this.itemQueue.shift()!;\r\n\r\n                itemActor.kill();\r\n                this.isProcessing = false;\r\n\r\n                this.remainingProcessingTime = 0;\r\n                this.tooltip.text = '';\r\n\r\n                const newItem = this.processItem(itemActor.item);\r\n\r\n                if (newItem) {\r\n                    const newActor = new ItemActor(newItem);\r\n                    newActor.pos = this.getOutlet().add(this.pos);\r\n                    this.blacklistedItemQueue.push(newActor);\r\n                    this.scene?.add(newActor);\r\n                }\r\n            } else {\r\n                if (!this.manual) {\r\n                    this.remainingProcessingTime = Math.max(this.remainingProcessingTime - delta / 1000, 0);\r\n                }\r\n\r\n                this.tooltip.text = `${this.remainingProcessingTime.toFixed(1)}`;\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Position of intake [start, end] in relative coordinates */\r\n    protected abstract getIntake(): [Vector, Vector];\r\n\r\n    /** Position of the outlet */\r\n    protected abstract getOutlet(): Vector;\r\n\r\n    protected abstract processItem(item: Item): Item | null;\r\n}\r\n","import { Actor, CollisionType, Color, vec, Vector } from \"excalibur\";\r\n\r\n\r\n/** Small box collider with rotation used for details of machine colliders */\r\nexport class Paddle extends Actor {\r\n\r\n    constructor(pos: Vector, size: Vector, degrees: number = 0) {\r\n        super({\r\n            pos,\r\n            rotation: degrees / 180 * Math.PI,\r\n            width: size.x,\r\n            height: size.y,\r\n            collisionType: CollisionType.Fixed,\r\n        })\r\n    }\r\n}","import { Machine } from './machine';\r\nimport { ItemActor } from '../items/itemActor';\r\nimport { Item } from '@/actors/items/items';\r\nimport { Actor, CircleCollider, Color, CompositeCollider, EdgeCollider, Engine, vec, Vector } from 'excalibur';\r\nimport { Resources } from '@/resources';\r\nimport { Paddle } from '../paddle';\r\n\r\n\r\nexport class Grinder extends Machine {\r\n\r\n    crank: Actor;\r\n\r\n    constructor(x: number, y: number) {\r\n        super({\r\n            pos: vec(x, y),\r\n            z: 1,\r\n        }, true);\r\n\r\n        this.graphics.add(Resources.Machines().getSprite(0, 0));\r\n        this.collider.set(new CircleCollider({ radius: 16, offset: vec(0, 6) }));\r\n\r\n        this.crank = new Actor({\r\n            pos: vec(0.5, 5),\r\n            z: this.z + 1,\r\n        });\r\n        const crankSprite = Resources.Machines().getSprite(1, 0)\r\n        this.crank.graphics.add(crankSprite);\r\n        this.addChild(this.crank);\r\n\r\n        this.addChild(new Paddle(vec(-11, -18), vec(27, 2), 75));\r\n        this.addChild(new Paddle(vec(12, -18), vec(27, 2), -75));\r\n    }\r\n\r\n    onPostUpdate(engine: Engine, delta: number): void {\r\n        super.onPostUpdate(engine, delta);\r\n\r\n        if (this.isOn) {\r\n            this.crank.rotation = -(this.remainingProcessingTime / this.maxProcessingTime)  * Math.PI * 2;\r\n        }\r\n    }\r\n\r\n    protected processItem(item: Item): Item | null {\r\n        return item.grind ? item.grind() : null;\r\n    }\r\n    protected getIntake(): [Vector, Vector] {\r\n        return [\r\n            vec(-5, -10),\r\n            vec(5, -5)\r\n        ];\r\n    }\r\n    protected getOutlet(): Vector {\r\n        return vec(.5, 10);\r\n    }\r\n}\r\n","import { Item } from '@/actors/items/items';\r\nimport { Machine } from './machine';\r\nimport { CompositeCollider, Rectangle, Resource, Shape, vec, Vector } from 'excalibur';\r\nimport { Resources } from '@/resources';\r\nimport { Paddle } from '../paddle';\r\n\r\nexport class Brewer extends Machine {\r\n    constructor(x: number, y: number) {\r\n        super({\r\n            pos: vec(x, y),\r\n        });\r\n        this.graphics.use(Resources.Machines().getSprite(2, 0));\r\n\r\n\r\n        this.collider.set(new CompositeCollider([\r\n            Shape.Box(45, 16, undefined, vec(0, -6)),\r\n            // in tile coordinates\r\n            Shape.Polygon([vec(10, 1), vec(14, 21), vec(15, 21), vec(11, 0)], vec(-24, -35)),\r\n            Shape.Polygon([vec(43, 1), vec(42, 0), vec(39, 21), vec(40, 21)], vec(-24, -35)),\r\n        ]));\r\n    }\r\n\r\n    processItem(item: Item): Item | null {\r\n        return item.brew ? item.brew() : null;\r\n    }\r\n\r\n    protected getIntake(): [Vector, Vector] {\r\n        return [\r\n            vec(-8, -16),\r\n            vec(8, -4),\r\n        ];\r\n    }\r\n    protected getOutlet(): Vector {\r\n        return vec(0, 10);\r\n    }\r\n}\r\n","export class Level {\r\n    items!: RawItemType[];\r\n    machines!: MachineType[];\r\n    products!: ProductType[];\r\n}\r\n\r\nexport enum RawItemType {\r\n    Acorn,\r\n    Leaf = 1,\r\n    Almond = 2,\r\n}\r\n\r\nexport enum MachineType {\r\n    BREWER,\r\n    GRINDER,\r\n}\r\n\r\nexport enum ProductType {\r\n    COFFEE,\r\n}\r\n\r\nexport const LEVELS: Level[] = [\r\n\r\n]","import {Resources} from \"@/resources\";\r\nimport {Sprite} from \"excalibur\";\r\nimport {ProductType} from \"@/levels/level\";\r\n\r\nexport interface Item {\r\n    grind?(): Item;\r\n    brew?(): Item;\r\n    roast?(): Item;\r\n\r\n    getSprite(): Sprite;\r\n    getProductType?(): ProductType;\r\n}\r\n\r\nexport class Acorn<T> implements Item {\r\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 0); }\r\n\r\n    grind(): Item {\r\n        return new GroundAcorn();\r\n    }\r\n    roast(): Item {\r\n        return new RoastedAcorn();\r\n    }\r\n}\r\n\r\nexport class GroundAcorn implements Item {\r\n    getSprite(): Sprite { return Resources.Items().getSprite(1, 0); }\r\n    brew(): Item {\r\n        return new Coffee();\r\n    }\r\n    roast(): Item {\r\n        return new RoastedGroundAcorn();\r\n    }\r\n}\r\n\r\nexport class Coffee implements Item {\r\n    getSprite(): Sprite { return Resources.Items().getSprite(2, 0); }\r\n    getProductType(): ProductType {\r\n        return ProductType.COFFEE;\r\n    }\r\n}\r\n\r\nexport class RoastedAcorn implements Item {\r\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 1); }\r\n}\r\n\r\nexport class RoastedGroundAcorn implements Item {\r\n    getSprite(): Sprite { return Resources.Items().getSprite(0, 2); }\r\n}\r\n","import {\r\n    Actor,\r\n    BaseAlign,\r\n    BodyComponent,\r\n    Collider,\r\n    CollisionContact,\r\n    CollisionType,\r\n    Color,\r\n    Engine,\r\n    Font,\r\n    FontUnit,\r\n    Keys,\r\n    Label,\r\n    Side,\r\n    TextAlign,\r\n    vec\r\n} from 'excalibur';\r\nimport {Player} from \"@/actors/player\";\r\nimport {ItemActor} from \"@/actors/items/itemActor\";\r\nimport {Item} from \"@/actors/items/items\";\r\nimport {Resources} from \"@/resources\";\r\n\r\nclass ResourceStation extends Actor {\r\n    private tooltip: Label;\r\n    private cooldownTimer = 0;\r\n    private isOnCooldown = false;\r\n\r\n    playerReference?: Player;\r\n    item: Item;\r\n\r\n    COOLDOWN = 5;\r\n\r\n    constructor(x: number, y: number, size: number, item: Item) {\r\n        super({\r\n            x: x,\r\n            y: y,\r\n            width: size,\r\n            height: size,\r\n            color: Color.Gray,\r\n            collisionType: CollisionType.Passive,\r\n        });\r\n\r\n        this.item = item;\r\n\r\n        // Create tooltip (initially hidden)\r\n        this.tooltip = new Label({\r\n            text: 'Space',\r\n            pos: vec(0, -size / 2 - 6), // Position the label above the station\r\n            font: new Font({\r\n                textAlign: TextAlign.Center,\r\n                baseAlign: BaseAlign.Bottom,\r\n                shadow: {\r\n                    blur: 5,\r\n                    offset: vec(0, 0),\r\n                    color: Color.Black,\r\n                },\r\n                family: 'Silkscreen',\r\n                size: 15,\r\n                unit: FontUnit.Px,\r\n                color: Color.White\r\n            })\r\n        });\r\n\r\n        this.tooltip.scale = vec(0, 0);\r\n\r\n        let itemActor = new ItemActor(item);\r\n        itemActor.body.collisionType = CollisionType.PreventCollision;\r\n\r\n        this.addChild(this.tooltip); // Attach tooltip to the ResourceStation\r\n        this.addChild(itemActor)\r\n\r\n        this.graphics.use(Resources.Load.ResourceStation.toSprite())\r\n    }\r\n\r\n    onPostUpdate(engine: Engine, delta: number): void {\r\n        const fPressed = engine.input.keyboard.wasPressed(Keys.Space);\r\n\r\n        // Cooldown logic\r\n        if (this.isOnCooldown) {\r\n            // Decrease the cooldown timer by the delta time\r\n            this.cooldownTimer -= delta / 1000; // Convert ms to seconds\r\n            if (this.cooldownTimer <= 0) {\r\n                this.isOnCooldown = false;\r\n                this.tooltip.text = 'Space'; // Reset tooltip text when cooldown ends\r\n            } else {\r\n                // Update tooltip text with remaining time\r\n                this.tooltip.text = `${this.cooldownTimer.toFixed(1)}`;\r\n                this.tooltip.graphics.opacity = 0.5;\r\n            }\r\n        } else if (this.playerReference) {\r\n            if (!this.playerReference.isCarryingItem()) {\r\n                this.tooltip.graphics.opacity = 1;\r\n            } else {\r\n                this.tooltip.graphics.opacity = 0.5;\r\n            }\r\n\r\n            // Allow item pickup only if not on cooldown\r\n            if (fPressed && !this.playerReference.isCarryingItem() && !this.isOnCooldown) {\r\n                this.playerReference.pickUpItem(new ItemActor(this.item));\r\n\r\n                // Start the cooldown\r\n                this.isOnCooldown = true;\r\n                this.cooldownTimer = this.COOLDOWN;\r\n                this.tooltip.text = `${this.COOLDOWN.toFixed(1)}`; // Display initial cooldown time\r\n\r\n                this.actions.delay(this.COOLDOWN * 1000).callMethod(() => {\r\n                    // hide\r\n                    if (this.playerReference == undefined) {\r\n                        this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20)).callMethod(() => {this.tooltip.text = `Space`});\r\n                        ;\r\n                    }\r\n                })\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    onCollisionStart(\r\n        self: Collider,\r\n        other: Collider,\r\n        side: Side,\r\n        contact: CollisionContact\r\n    ): void {\r\n        const otherBody = other.owner.get(BodyComponent);\r\n\r\n        if (otherBody.owner instanceof Player) {\r\n            this.playerReference = otherBody.owner;\r\n            this.tooltip.actions.scaleTo(vec(1, 1), vec(10, 20));\r\n        }\r\n    }\r\n\r\n    onCollisionEnd(self: Collider, other: Collider, side: Side, lastContact: CollisionContact) {\r\n        const otherBody = other.owner.get(BodyComponent);\r\n\r\n        if (otherBody.owner instanceof Player) {\r\n            this.playerReference = undefined;\r\n\r\n            // only hide if it's not on cooldown, otherwise we hide when it comes out of cooldown\r\n            if (!this.isOnCooldown) {\r\n                this.tooltip.actions.scaleTo(vec(0, 0), vec(10, 20));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default ResourceStation;\r\n","import * as ex from 'excalibur';\r\nimport { ItemActor } from './items/itemActor';\r\nimport {ProductType} from \"@/levels/level\";\r\nimport {Resources} from \"@/resources\";\r\nimport {clamp, Engine, Keys} from \"excalibur\";\r\n\r\nexport class Customer extends ex.Actor {\r\n    private static readonly MAX_VELOCITY = 300;\r\n    private static readonly ACCELERATION = 700;\r\n    private static readonly PICK_UP_THRESHOLD = 50;\r\n\r\n    private animations = {\r\n        run: ex.Animation.fromSpriteSheet(\r\n            ex.SpriteSheet.fromImageSource({\r\n                image: Resources.Load.VeverkaRun,\r\n                grid: {\r\n                    columns: 1,\r\n                    rows: 7,\r\n                    spriteWidth: 128,\r\n                    spriteHeight: 25,\r\n                },\r\n            }), [0, 1, 2, 3, 4, 5, 6], 100),\r\n        flying: ex.Animation.fromSpriteSheet(\r\n            ex.SpriteSheet.fromImageSource({\r\n                image: Resources.Load.VeverkaRun,\r\n                grid: {\r\n                    columns: 1,\r\n                    rows: 7,\r\n                    spriteWidth: 128,\r\n                    spriteHeight: 25,\r\n                },\r\n            }), [2, 3], 100),\r\n        idle: ex.Animation.fromSpriteSheet(\r\n            ex.SpriteSheet.fromImageSource({\r\n                image: Resources.Load.VeverkaIdle,\r\n                grid: {\r\n                    columns: 3,\r\n                    rows: 1,\r\n                    spriteWidth: 32,\r\n                    spriteHeight: 32,\r\n                },\r\n            }), [0, 1, 2], 200),\r\n    };\r\n    public readonly desiredProductType: ProductType;\r\n    public satisfied: boolean = false;\r\n    private assignedItem: ItemActor | null = null;\r\n    private runningDirection: number | null = null;\r\n    private runningTarget: number | null = null;\r\n\r\n    constructor(waitingX: number, desiredProductType: ProductType) {\r\n        super({\r\n            pos: ex.vec(waitingX, 0),\r\n            width: 32,\r\n            height: 32,\r\n            color: ex.Color.Yellow,\r\n            collisionType: ex.CollisionType.Passive,\r\n        });\r\n        this.desiredProductType = desiredProductType;\r\n    }\r\n\r\n    onInitialize(engine: ex.Engine) {\r\n        this.pos = ex.vec(this.pos.x, engine.drawHeight - this.height / 2);\r\n    }\r\n\r\n    onPostUpdate(engine: Engine, delta: number): void {\r\n        if (this.runningTarget !== null) {\r\n            this.runningDirection = Math.sign(this.runningTarget - this.pos.x);\r\n\r\n            if (Math.abs(this.runningTarget - this.pos.x) < Customer.PICK_UP_THRESHOLD) {\r\n                this.runningTarget = null;\r\n\r\n                if (this.assignedItem) {\r\n                    this.satisfied = true;\r\n                    this.runningDirection = 1;\r\n                    this.assignedItem.kill();\r\n                }\r\n            }\r\n        } else {\r\n            if (!this.satisfied) {\r\n                this.runningDirection = null;\r\n            }\r\n        }\r\n\r\n        if (this.satisfied && this.pos.x > engine.drawWidth + this.width) {\r\n            console.log(\"Killing customer\")\r\n            this.kill();\r\n        }\r\n\r\n        if (this.runningDirection !== null) {\r\n            this.acc.x = Customer.ACCELERATION * this.runningDirection;\r\n        } else {\r\n            this.acc.x = 0;\r\n            this.vel.x *= 0.75;\r\n        }\r\n\r\n        if (this.runningDirection == -1) {\r\n            this.graphics.flipHorizontal = true;\r\n        } else if (this.runningDirection == 1) {\r\n            this.graphics.flipHorizontal = false;\r\n        }\r\n        this.vel.x = clamp(this.vel.x, -Customer.MAX_VELOCITY, Customer.MAX_VELOCITY)\r\n    }\r\n\r\n    goFetchItem(item: ItemActor) {\r\n        console.log(\"Fetching item\");\r\n        this.runningTarget = item.pos.x;\r\n        this.assignedItem = item;\r\n        item.allocatedToCustomer = true;\r\n    }\r\n\r\n    goTo(xPosition: number) {\r\n        this.runningTarget = xPosition;\r\n    }\r\n\r\n    productAssigned(): boolean {\r\n        return this.assignedItem != null;\r\n    }\r\n}\r\n","import {Engine, Shape, vec, Actor, Color, CollisionType, Collider, Side, CollisionContact} from \"excalibur\";\r\nimport {Customer} from \"@/actors/customer\";\r\nimport {ItemActor} from \"@/actors/items/itemActor\";\r\nimport {ProductType} from \"@/levels/level\";\r\n\r\nexport class CustomerControl extends Actor {\r\n    private static readonly HEIGHT = 100;\r\n    private static readonly MAX_TIMEOUT = 3000;\r\n    private static readonly MAX_WAITING_CUSTOMERS = 3;\r\n    private static readonly ITEM_TIMEOUT = 5000;\r\n\r\n    private customers: Customer[] = [];\r\n    private pendingProducts: ItemActor[] = [];\r\n\r\n    constructor() {\r\n        super({\r\n            pos: vec(0, 0),\r\n            width: 0,\r\n            height: 0,\r\n            // color: Color.Red,\r\n            color: Color.Transparent,\r\n            collisionType: CollisionType.Passive,\r\n            // anchor: vec(0, 0),\r\n        });\r\n    }\r\n\r\n    onInitialize(engine: Engine) {\r\n        this.pos = vec(engine.halfDrawWidth, engine.drawHeight - CustomerControl.HEIGHT + this.width / 2);\r\n        this.collider.set(Shape.Box(engine.drawWidth, CustomerControl.HEIGHT));\r\n\r\n        this.scheduleCustomersRefresh(engine);\r\n    }\r\n\r\n    private scheduleCustomersRefresh(engine: Engine) {\r\n        const timeout = Math.random() * CustomerControl.MAX_TIMEOUT;\r\n        const scene = this.scene;\r\n        if (scene === null)\r\n            return;\r\n        setTimeout(() => {\r\n            this.customers = this.customers.filter(c => !c.isKilled());\r\n            const waitingCustomers = this.customers.filter(c => !c.productAssigned());\r\n            if (waitingCustomers.length < CustomerControl.MAX_WAITING_CUSTOMERS) {\r\n                console.log(\"Adding customer.\")\r\n                const product = ProductType.COFFEE; // TODO: choose at random\r\n                const waitingX = engine.drawWidth - 16;\r\n                const customer = new Customer(waitingX, product);\r\n\r\n                for (let i = 0; i < waitingCustomers.length; i++) {\r\n                    waitingCustomers[i].goTo(engine.drawWidth - 64 * (waitingCustomers.length - i));\r\n                }\r\n\r\n                this.customers.push(customer);\r\n                scene.add(customer);\r\n\r\n                if (this.pendingProducts.length > 0) {\r\n                    customer.goFetchItem(this.pendingProducts.pop()!);\r\n                }\r\n            }\r\n\r\n            this.scheduleCustomersRefresh(engine);\r\n        }, timeout);\r\n    }\r\n\r\n    onCollisionStart(self: Collider, other: Collider, side: Side, contact: CollisionContact) {\r\n        const item = other.owner;\r\n        if (!(item instanceof ItemActor))\r\n            return;\r\n        if (item.allocatedToCustomer)\r\n            return;\r\n        if (!item.item.getProductType)\r\n            return;\r\n        const productType = item.item.getProductType();\r\n        const customer = this.customers.find(c =>\r\n            !c.satisfied && !c.productAssigned() && c.desiredProductType == productType\r\n        );\r\n        if (customer) {\r\n            customer.goFetchItem(item);\r\n        } else {\r\n            this.pendingProducts.push(item);\r\n            setTimeout(() => {\r\n                if (this.pendingProducts.includes(item) && !item.allocatedToCustomer) {\r\n                    item.kill();\r\n                    this.pendingProducts = this.pendingProducts.filter(p => p != item);\r\n                }\r\n            }, CustomerControl.ITEM_TIMEOUT);\r\n        }\r\n    }\r\n}","import { ExcaliburGraphicsContext, PreDrawEvent, Scene, vec, Vector } from \"excalibur\";\r\n\r\n\r\n/** Updates the scene camera pos and zoom so that the entire scene is visible */\r\nexport class SceneScaler {\r\n\r\n    private handler: typeof this.onScenePreDraw;\r\n\r\n    constructor(\r\n        readonly sizeInPixels: Vector,\r\n        readonly scene: Scene,\r\n    ) {\r\n        this.handler = this.onScenePreDraw.bind(this);\r\n        scene.on('predraw', this.handler);\r\n    }\r\n\r\n    deactivate() {\r\n        this.scene.off('predraw', this.handler);\r\n    }\r\n\r\n    private onScenePreDraw(e: PreDrawEvent): void {\r\n        this.scene.camera.pos = this.sizeInPixels.scale(1 / 2);\r\n\r\n        const zoom = Math.min(\r\n            window.innerWidth / this.sizeInPixels.x,\r\n            window.innerHeight / this.sizeInPixels.y);\r\n\r\n        this.scene.camera.zoom = zoom;\r\n        //console.log('ctx: ', e.ctx.width, e.ctx.height, 'window: ', window.innerWidth, window.innerHeight);\r\n    }\r\n}\r\n","import * as ex from 'excalibur';\r\nimport {CollisionType, ExcaliburGraphicsContext, Label, vec} from 'excalibur';\r\nimport {Player} from \"@/actors/player\";\r\nimport {AutomaticSquirrel} from '@/actors/automatic-squirrel';\r\nimport {Platform, SolidPlatform} from '@/actors/platform';\r\nimport {HamsterWheel} from \"@/actors/contols/hamster-wheel\";\r\nimport {Lever} from \"@/actors/contols/lever\";\r\nimport {Grinder} from '@/actors/machines/grinder';\r\nimport {Brewer} from '@/actors/machines/brewer';\r\nimport {ItemActor} from '@/actors/items/itemActor';\r\nimport {Acorn} from '@/actors/items/items';\r\nimport ResourceStation from '@/actors/stations/resource-station';\r\nimport {CustomerControl} from \"@/actors/customers-control\";\r\nimport {SceneScaler} from \"@/scenes/scene-scaler\";\r\nimport {Level} from './level-intro';\r\nimport {Game} from '@/game';\r\n\r\nconst LEVEL_TIME: number = 5 * 60 * 1000;\r\n\r\nexport class MainScene extends ex.Scene {\r\n    entityCounter = new Label({ text: '' });\r\n    timeLabel = new Label({text: '', pos: vec(10, 10)})\r\n    timePlayed: number\r\n\r\n    constructor(\r\n        private game: Game,\r\n        private level: Level,\r\n    ) {\r\n        super();\r\n        this.timePlayed = 0;\r\n    }\r\n\r\n\r\n    onInitialize(engine: ex.Engine) {\r\n        this.add(this.entityCounter);\r\n        this.add(this.timeLabel);\r\n\r\n        const lever = new Lever(100, 200 - 10);\r\n        this.add(lever)\r\n\r\n        {[\r\n            // resource station platforms\r\n            new Platform(270, 100, 60, 10),\r\n            new Platform(400, 120, 60, 10),\r\n\r\n            // support platforms\r\n            new Platform(330, 160, 30, 10),\r\n            new Platform(200, 150, 30, 10),\r\n\r\n            // brewer platform\r\n            new Platform(480 / 2, 370, 30, 10, -Math.PI / 5, CollisionType.Fixed),\r\n\r\n            // the main solid platform\r\n            new SolidPlatform(480 / 2, 200, 600, 20),\r\n        ].forEach(platform => this.add(platform));}\r\n\r\n        {[\r\n            new ResourceStation(270, 100 - 15 - 5, 30, new Acorn()),\r\n            new ResourceStation(400, 120 - 15 - 5, 30, new Acorn()),\r\n        ].forEach(station => this.add(station));}\r\n\r\n        // Create AI-controlled squirrel\r\n        const aiSquirrel = new AutomaticSquirrel();\r\n        this.add(aiSquirrel);\r\n\r\n        // Create player-controlled squirrel\r\n        const player = new Player(480 / 2, 180);\r\n        this.add(player);\r\n\r\n        // // Create machines\r\n        const grinder = new Grinder(480 / 2, 300);\r\n        this.add(grinder);\r\n\r\n        const brewer = new Brewer(480, 350);\r\n        this.add(brewer);\r\n\r\n        const wheel = new HamsterWheel(100, 80, 50, grinder);\r\n        this.add(wheel)\r\n\r\n        // TODO: Position the machines properly\r\n\r\n        const customerControl = new CustomerControl();\r\n        this.add(customerControl);\r\n\r\n        // Add walls beyond the screen to prevent actors from moving outside\r\n        const screenWidth = engine.drawWidth;\r\n        const screenHeight = engine.drawHeight;\r\n\r\n        // Left wall\r\n        const leftWall = new ex.Actor({\r\n            pos: ex.vec(-10, screenHeight / 2),\r\n            width: 20,\r\n            height: screenHeight,\r\n            collisionType: ex.CollisionType.Fixed,\r\n            color: ex.Color.Transparent,\r\n        });\r\n\r\n        // Right wall\r\n        const rightWall = new ex.Actor({\r\n            pos: ex.vec(screenWidth + 10, screenHeight / 2),\r\n            width: 20,\r\n            height: screenHeight,\r\n            collisionType: ex.CollisionType.Fixed,\r\n            color: ex.Color.Transparent,\r\n        });\r\n\r\n        // Top wall\r\n        const topWall = new ex.Actor({\r\n            pos: ex.vec(screenWidth / 2, -10),\r\n            width: screenWidth,\r\n            height: 20,\r\n            collisionType: ex.CollisionType.Fixed,\r\n            color: ex.Color.Transparent,\r\n        });\r\n\r\n        // Bottom wall\r\n        const bottomWall = new ex.Actor({\r\n            pos: ex.vec(screenWidth / 2, screenHeight + 10),\r\n            width: screenWidth,\r\n            height: 20,\r\n            collisionType: ex.CollisionType.Fixed,\r\n            color: ex.Color.Transparent,\r\n        });\r\n\r\n        // Add walls to the scene\r\n        this.add(leftWall);\r\n        this.add(rightWall);\r\n        this.add(topWall);\r\n        this.add(bottomWall);\r\n\r\n        let mouse = engine.input.pointers.primary;\r\n        mouse.on('down', e => {\r\n            console.log('spawn');\r\n            let acorn = new ItemActor(new Acorn());\r\n            acorn.pos = mouse.lastWorldPos.clone();\r\n            this.add(acorn);\r\n        });\r\n        this.physics.config.gravity = vec(0,250);\r\n\r\n        new SceneScaler(vec(480,480), this)\r\n    }\r\n\r\n    onPreDraw(ctx: ExcaliburGraphicsContext, delta: number): void {\r\n        this.entityCounter.text = `Entities: ${this.entities.length}`;\r\n        this.timeLabel.text = `${Math.floor((LEVEL_TIME - this.timePlayed) / 1000)} s`\r\n    }\r\n\r\n    onPreUpdate(engine: ex.Engine, delta: number): void {\r\n        this.timePlayed += delta;\r\n        if (this.timePlayed >= LEVEL_TIME) {\r\n            this.game.endLevel(0, 0);\r\n        }\r\n    }\r\n}\r\n","import { Actor, Vector, Text, Font, BaseAlign, Color, FontUnit, TextAlign, vec } from \"excalibur\";\r\n\r\nexport class TextLabel {\r\n    static WHITE = new Color(255, 255, 255);\r\n    static GREY = new Color(46, 46, 46);\r\n    private _actor: Actor;\r\n    constructor(\r\n        x: number,\r\n        y: number,\r\n        size: number,\r\n        message: string,\r\n        color: Color = TextLabel.GREY,\r\n    ) {\r\n        const text = new Text({ \r\n            text: message,\r\n            font: new Font({\r\n                textAlign: TextAlign.Center,\r\n                baseAlign: BaseAlign.Bottom,\r\n                // shadow: {\r\n                //     blur: 5,\r\n                //     offset: vec(0, 0),\r\n                //     color: Color.Black,\r\n                // },\r\n                family: 'Pixelify Sans',\r\n                size,\r\n                unit: FontUnit.Px,\r\n                color,\r\n                smoothing: false,\r\n            })\r\n        });\r\n        text.scale = vec(1,1).scale(0.1);\r\n        this._actor = new Actor();\r\n        this._actor.graphics.use(text);\r\n        this.actor.pos = vec(x + text.width / 2, y)\r\n    }\r\n\r\n    public get actor() {\r\n        return this._actor;\r\n    }\r\n}","import { Item } from '@/actors/items/items';\r\nimport { Actor, Color, Engine, Keys, Scene, SceneActivationContext, vec } from 'excalibur';\r\nimport { Game } from '@/game';\r\nimport { Resources } from '@/resources';\r\nimport { TextLabel } from '@/ui/text-label';\r\nimport { SceneScaler } from './scene-scaler';\r\n\r\nexport interface Level {\r\n    maxPoints: number;\r\n}\r\n\r\nexport class Recipe {\r\n\r\n    constructor(\r\n        private ingredients: Item[],\r\n        private result: Item,\r\n    ) {}\r\n}\r\n\r\nexport class LevelIntro extends Scene {\r\n    private scaler: SceneScaler;\r\n    private height: number;\r\n    private width: number;\r\n    constructor(\r\n        private game: Game,\r\n        private level: Level,\r\n        private levelId: number,\r\n    ) {\r\n        super();\r\n        this.height = 180;\r\n        this.width = 180;\r\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\r\n    }\r\n\r\n    onInitialize(engine: ex.Engine): void {\r\n        this.backgroundColor = new Color(216, 185, 157);\r\n        const logo = new Actor({\r\n            x: this.width / 2, y: this.height / 4,\r\n        })\r\n        logo.graphics.add(Resources.Load.LevelTable.toSprite());\r\n        this.add(logo);\r\n\r\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\r\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\", TextLabel.GREY).actor);\r\n    }\r\n\r\n    onPreUpdate(engine: Engine, delta: number): void {\r\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\r\n            this.game.play();\r\n        }\r\n    }\r\n\r\n    onDeactivate(context: SceneActivationContext): void {\r\n        this.scaler.deactivate()\r\n    }\r\n}","import { Game } from \"@/game\";\r\nimport { Resources } from \"@/resources\";\r\nimport { Actor, Color, Engine, Keys, Scene, SceneActivationContext, vec } from \"excalibur\";\r\nimport { SceneScaler } from \"./scene-scaler\";\r\nimport { TextLabel } from \"@/ui/text-label\";\r\n\r\nexport class GameStart extends Scene {\r\n    private scaler: SceneScaler;\r\n    private height: number;\r\n    private width: number;\r\n    constructor(\r\n        private game: Game,\r\n    ) {\r\n        super();\r\n        this.height = 180;\r\n        this.width = 180;\r\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\r\n    }\r\n\r\n    onInitialize(engine: ex.Engine): void {\r\n        this.backgroundColor = new Color(216, 185, 157);\r\n        const logo = new Actor({\r\n            x: this.width / 2, y: this.height / 4,\r\n        })\r\n        logo.graphics.add(Resources.Load.Logo.toSprite());\r\n        this.add(logo);\r\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 20, 56, \"Your forest cafe awaits...\\n Brew, Bake, Delight!\").actor);\r\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [SPACE] to play\").actor);\r\n    }\r\n\r\n    onPreUpdate(engine: Engine, delta: number): void {\r\n        if (engine.input.keyboard.wasPressed(Keys.Space)) {\r\n            this.game.firstLevel();\r\n        }\r\n    }\r\n\r\n    onDeactivate(context: SceneActivationContext): void {\r\n        this.scaler.deactivate()\r\n    }\r\n}","import { Actor, Color, Engine, Keys, Scene, SceneActivationContext, vec } from \"excalibur\";\r\nimport { Level, LevelIntro } from \"./level-intro\";\r\nimport { Game } from \"@/game\";\r\nimport { Resources } from \"@/resources\";\r\nimport { TextLabel } from \"@/ui/text-label\";\r\nimport { SceneScaler } from \"./scene-scaler\";\r\n\r\nexport class LevelOutro extends Scene {\r\n    private scaler: SceneScaler;\r\n    private height: number;\r\n    private width: number;\r\n    starsGained: number\r\n\r\n    constructor(\r\n        private game: Game,\r\n        private levelId: number,\r\n        points: number,\r\n        maxPoints: number,\r\n    ) {\r\n        super();\r\n        const ratio = points / maxPoints;\r\n        this.starsGained = ratio < 0.33\r\n            ? 1\r\n            : (ratio < 0.66 ? 2 : 3);\r\n        this.height = 180;\r\n        this.width = 180;\r\n        this.scaler = new SceneScaler(vec(this.width, this.height), this);\r\n\r\n    }\r\n\r\n    onInitialize(engine: ex.Engine): void {\r\n        this.backgroundColor = new Color(216, 185, 157);\r\n        const levelTable = new Actor({\r\n            x: this.width / 2, y: this.height / 4,\r\n        })\r\n        levelTable.graphics.add(Resources.Load.LevelTable.toSprite());\r\n        this.add(levelTable);\r\n        this.add(new TextLabel(this.width / 2 + 2, 58, 56, `Level  ${this.levelId + 1}`, TextLabel.WHITE).actor);\r\n\r\n        for (let i = 1; i <= 3; i++) {\r\n            const image = i <= this.starsGained ? Resources.Load.StarGold : Resources.Load.StarGrey;\r\n            const star = new Actor({x: this.width / 2 + (i - 2) * 25, y: this.height / 2});\r\n            star.graphics.add(image.toSprite());\r\n            this.add(star);\r\n        }\r\n\r\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 60, 40, \"Press [T] to TRY AGAIN\", TextLabel.GREY).actor);\r\n        this.add(new TextLabel(this.width / 2, this.height / 2 + 70, 40, \"Press [N] to play NEXT LEVEL\", TextLabel.GREY).actor);\r\n    }\r\n\r\n    onPreUpdate(engine: Engine, delta: number): void {\r\n        if (engine.input.keyboard.wasPressed(Keys.T)) {\r\n            this.game.newLevel(false);\r\n        }\r\n        if(engine.input.keyboard.wasPressed(Keys.N)) {\r\n            this.game.newLevel(true);\r\n        }\r\n    }\r\n\r\n    onDeactivate(context: SceneActivationContext): void {\r\n        this.scaler.deactivate()\r\n    }\r\n}","import { MainScene } from './scenes/main-scene';\r\nimport {Engine, Loader, DisplayMode, Keys, Scene, CollisionType, Color, Actor} from 'excalibur';\r\nimport { Resources } from './resources';\r\nimport { Level, LevelIntro } from './scenes/level-intro';\r\nimport { GameStart } from './scenes/game-start';\r\nimport { LevelOutro } from './scenes/level-outro';\r\n\r\n/**\r\n * Managed game class\r\n */\r\nexport class Game extends Engine {\r\n    private mainScene!: MainScene;\r\n    private levels: Level[]\r\n    private curLevelId: number\r\n    private isShowDebug = false;\r\n\r\n    constructor() {\r\n        super({\r\n            displayMode: DisplayMode.FillScreen,\r\n            antialiasing: false,\r\n        });\r\n        this.levels = []\r\n        this.curLevelId = 0\r\n\r\n        this.debug.collider.boundsColor = Color.Red;\r\n        this.debug.collider.showAll = true;\r\n    }\r\n\r\n    public start() {\r\n        // Automatically load all default resources\r\n        this.debug.collider.showBounds = true;\r\n        const loader = new Loader(Object.values(Resources.Load));\r\n\r\n        return super.start(loader);\r\n    }\r\n\r\n    restart(): void {\r\n        this.goToScene('idle').then(() => {\r\n            this.removeScene(this.mainScene);\r\n            this.play();\r\n        });\r\n    }\r\n\r\n    onStart(): void {\r\n        this.addScene('start', new GameStart(this));\r\n        this.goToScene('start');\r\n    }\r\n\r\n    public firstLevel(): void {\r\n        this.curLevelId = 0;\r\n        this.addScene('intro', new LevelIntro(this, this.levels[this.curLevelId], this.curLevelId));\r\n        this.goToScene('intro');\r\n    }\r\n\r\n    public newLevel(next: boolean): void {\r\n        if (next) {\r\n            this.curLevelId++;\r\n        }\r\n        if (this.curLevelId >= this.levels.length) {\r\n            // TODO: add and screen or restart\r\n            this.restart()\r\n        }\r\n        this.removeScene('intro');\r\n        this.addScene('intro', new LevelIntro(this, this.levels[this.curLevelId], this.curLevelId));\r\n        this.goToScene('intro');\r\n\r\n    }\r\n\r\n    public endLevel(points: number, maxPoints: number) {\r\n        this.addScene('outro', new LevelOutro(this, this.curLevelId, points, maxPoints));\r\n        this.goToScene('outro');\r\n    }\r\n\r\n    public play(): void {\r\n        // Create new scene with a player\r\n        this.mainScene = new MainScene(this, {maxPoints: 100});\r\n        this.addScene('idle', new Scene());\r\n        this.addScene('main', this.mainScene);\r\n        this.goToScene('main');\r\n    }\r\n\r\n    onPreUpdate(engine: Engine, delta: number): void {\r\n        if (engine.input.keyboard.wasPressed(Keys.R)) {\r\n            this.restart();\r\n        }\r\n        if (engine.input.keyboard.wasPressed(Keys.F4)) {\r\n            this.isShowDebug = !this.isShowDebug;\r\n            this.showDebug(this.isShowDebug);\r\n        }\r\n    }\r\n}\r\n","import {Game} from \"./game\";\r\n\r\nconst game = new Game();\r\ngame.start().then(() => {\r\n  game.onStart();\r\n});\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t792: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkexcalibur_webpack\"] = self[\"webpackChunkexcalibur_webpack\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [128], () => (__webpack_require__(905)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Resources","Load","Sword","Magor","VeverkaRun","VeverkaIdle","ItemsImg","Logo","Lever","PlatformSmall","PlatformMedium","PlatformWheel","ResourceStation","Wheel","Button","Machines","LevelTable","StarGold","StarGrey","Items","lazy","fromImageSource","image","this","grid","columns","rows","spriteHeight","spriteWidth","provider","storage","Platform","constructor","x","y","width","height","rotation","collisionType","Passive","super","pos","color","DarkGray","graphics","use","toSprite","SolidPlatform","onCollisionStart","self","other","side","contact","otherBody","owner","get","Player","isOnSolidPlatform","isOnGround","onCollisionEnd","lastContact","WheelPlatform","isOnPlayform","direction","onPostUpdate","engine","delta","playerReference","runningDirection","undefined","z","collider","Box","GRAVITY","JUMP_GRAVITY","MAX_VELOCITY","ACCELERATION","TURN_ACCELERATION","AIR_MOVEMENT_PENALITY","JUMP_FORCE","isOnWheel","isPressingDown","carryingItem","animations","run","fromSpriteSheet","flying","idle","onInitialize","input","keyboard","on","onKeyPress","bind","jumpPressed","wasPressed","W","isHeld","Up","jumpHeld","heldLeft","A","Left","heldRight","D","Right","movementDirection","Math","sign","vel","S","Down","accel","acc","flipHorizontal","updateItemPosition","abs","Fixed","Bottom","center","getFurthestPoint","bounds","evt","key","Keys","Space","dropItem","isCarryingItem","pickUpItem","item","body","addChild","removeChild","clone","Active","offset","scene","add","position","facing","frame","current","_currentFrame","uglyOffset","sin","handOffset","backOffset","AutomaticSquirrel","Gray","update","HamsterWheel","radius","linkedMachine","wheel","scale","platform","platformHeight","actions","rotateBy","remainingProcessingTime","max","Circle","getQueue","isComplete","clearActions","rotateTo","ItemActor","spawnPos","allocatedToCustomer","getSprite","angularVelocity","Machine","config","manual","isOn","itemQueue","blacklistedItemQueue","isProcessing","maxProcessingTime","tooltip","text","font","textAlign","Center","baseAlign","Middle","shadow","blur","Black","family","size","unit","Px","White","intakeStart","intakeEnd","getIntake","intakeActor","Green","e","itemActor","includes","push","shift","kill","newItem","processItem","newActor","getOutlet","toFixed","length","Paddle","degrees","PI","Grinder","set","crank","crankSprite","grind","Brewer","Polygon","brew","RawItemType","MachineType","ProductType","Acorn","GroundAcorn","roast","RoastedAcorn","Coffee","RoastedGroundAcorn","getProductType","COFFEE","cooldownTimer","isOnCooldown","COOLDOWN","PreventCollision","fPressed","opacity","delay","callMethod","scaleTo","Customer","waitingX","desiredProductType","Yellow","satisfied","assignedItem","runningTarget","drawHeight","PICK_UP_THRESHOLD","drawWidth","console","log","goFetchItem","goTo","xPosition","productAssigned","CustomerControl","Transparent","customers","pendingProducts","halfDrawWidth","HEIGHT","scheduleCustomersRefresh","timeout","random","MAX_TIMEOUT","setTimeout","filter","c","isKilled","waitingCustomers","MAX_WAITING_CUSTOMERS","product","customer","i","pop","productType","find","p","ITEM_TIMEOUT","SceneScaler","sizeInPixels","handler","onScenePreDraw","deactivate","off","camera","zoom","min","window","innerWidth","innerHeight","LEVEL_TIME","MainScene","game","level","entityCounter","timeLabel","timePlayed","lever","forEach","station","aiSquirrel","player","grinder","brewer","customerControl","screenWidth","screenHeight","leftWall","rightWall","topWall","bottomWall","mouse","pointers","primary","acorn","lastWorldPos","physics","gravity","onPreDraw","ctx","entities","floor","onPreUpdate","endLevel","TextLabel","message","GREY","smoothing","_actor","actor","WHITE","LevelIntro","levelId","scaler","backgroundColor","logo","play","onDeactivate","context","GameStart","firstLevel","LevelOutro","points","maxPoints","ratio","starsGained","levelTable","star","T","newLevel","N","Game","displayMode","FillScreen","antialiasing","isShowDebug","levels","curLevelId","debug","boundsColor","Red","showAll","start","showBounds","loader","Object","values","restart","goToScene","then","removeScene","mainScene","onStart","addScene","next","R","F4","showDebug","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","keys","every","splice","r","d","definition","o","defineProperty","enumerable","g","globalThis","Function","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","test","Error","replace","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}